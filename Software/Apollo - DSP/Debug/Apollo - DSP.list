
Apollo - DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800e0d8  0800e0d8  0001e0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5f4  0800e5f4  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5f4  0800e5f4  0001e5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5fc  0800e5fc  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5fc  0800e5fc  0001e5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e600  0800e600  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800e604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  200002d0  0800e8d4  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018b8  0800e8d4  000218b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fc0  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a67  00000000  00000000  000392c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  0003e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b767  00000000  00000000  0003f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b17b  00000000  00000000  0005ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3a6  00000000  00000000  00075d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b50  00000000  00000000  00110190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e0bc 	.word	0x0800e0bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800e0bc 	.word	0x0800e0bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <init_LowPassFilter>:
 */
#include "LowPassFilter.h"
#include  <stdint.h>
#include <stdio.h>

void init_LowPassFilter(LowPassFilter *handle, float cutoffFreq, float sampletimeS) {
 8001008:	b480      	push	{r7}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	ed87 0a02 	vstr	s0, [r7, #8]
 8001014:	edc7 0a01 	vstr	s1, [r7, #4]

	float RC = 1.00f / (6.28318531f * cutoffFreq);
 8001018:	edd7 7a02 	vldr	s15, [r7, #8]
 800101c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001080 <init_LowPassFilter+0x78>
 8001020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102c:	edc7 7a05 	vstr	s15, [r7, #20]

	//compute alpha coefficient
	handle->alpha[0] = sampletimeS / (sampletimeS + RC);
 8001030:	ed97 7a01 	vldr	s14, [r7, #4]
 8001034:	edd7 7a05 	vldr	s15, [r7, #20]
 8001038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800103c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	edc3 7a00 	vstr	s15, [r3]
	//compute the inverse value of alpha coefficient
	handle->alpha[1] = RC / (sampletimeS + RC);
 800104a:	ed97 7a01 	vldr	s14, [r7, #4]
 800104e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001056:	edd7 6a05 	vldr	s13, [r7, #20]
 800105a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edc3 7a01 	vstr	s15, [r3, #4]

	//clear output buffer
	handle->out[0] = 0.00f;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
	handle->out[1] = 0.00f;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
}
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40c90fdb 	.word	0x40c90fdb

08001084 <update_LowPassFilter>:

void update_LowPassFilter(LowPassFilter *handle, float input) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	ed87 0a00 	vstr	s0, [r7]

	//shift output sample
	handle->out[1] = handle->out[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]

	//compute new output sample
	handle->out[0] = handle->alpha[0] * input + handle->alpha[1] * handle->out[1];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	ed93 7a00 	vldr	s14, [r3]
 800109e:	edd7 7a00 	vldr	s15, [r7]
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80010b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	float adcVal = 0;
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t timerUSB = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 fcc1 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f863 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f000 f9cb 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ea:	f000 f9a9 	bl	8001440 <MX_DMA_Init>
  MX_ADC1_Init();
 80010ee:	f000 f8c7 	bl	8001280 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010f2:	f000 f917 	bl	8001324 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010f6:	f000 f943 	bl	8001380 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80010fa:	f000 f977 	bl	80013ec <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80010fe:	f007 fe2d 	bl	8008d5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_LowPassFilter(&LPF1, 10.00f, 0.01f);
 8001102:	eddf 0a26 	vldr	s1, [pc, #152]	; 800119c <main+0xd0>
 8001106:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800110a:	4825      	ldr	r0, [pc, #148]	; (80011a0 <main+0xd4>)
 800110c:	f7ff ff7c 	bl	8001008 <init_LowPassFilter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start(&hadc1);
 8001110:	4824      	ldr	r0, [pc, #144]	; (80011a4 <main+0xd8>)
 8001112:	f000 fd81 	bl	8001c18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4822      	ldr	r0, [pc, #136]	; (80011a4 <main+0xd8>)
 800111c:	f000 fe30 	bl	8001d80 <HAL_ADC_PollForConversion>
	adcVal = HAL_ADC_GetValue(&hadc1);
 8001120:	4820      	ldr	r0, [pc, #128]	; (80011a4 <main+0xd8>)
 8001122:	f000 feb8 	bl	8001e96 <HAL_ADC_GetValue>
 8001126:	ee07 0a90 	vmov	s15, r0
 800112a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	update_LowPassFilter(&LPF1, adcVal);
 8001132:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <main+0xd4>)
 8001138:	f7ff ffa4 	bl	8001084 <update_LowPassFilter>

	if ((HAL_GetTick() - timerUSB) >= 20) {
 800113c:	f000 fcf8 	bl	8001b30 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b13      	cmp	r3, #19
 800114a:	d923      	bls.n	8001194 <main+0xc8>
		sprintf(logBuf, "%.2f,%.2f\r\n", adcVal, (LPF1.out[0]));
 800114c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_f2d>
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <main+0xd4>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9fc 	bl	8000558 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4638      	mov	r0, r7
 8001166:	e9cd 2300 	strd	r2, r3, [sp]
 800116a:	4622      	mov	r2, r4
 800116c:	462b      	mov	r3, r5
 800116e:	490e      	ldr	r1, [pc, #56]	; (80011a8 <main+0xdc>)
 8001170:	f009 f9b6 	bl	800a4e0 <siprintf>
	  	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001174:	463b      	mov	r3, r7
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f832 	bl	80001e0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	b29a      	uxth	r2, r3
 8001180:	463b      	mov	r3, r7
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f007 fea7 	bl	8008ed8 <CDC_Transmit_FS>

	  	timerUSB = HAL_GetTick();
 800118a:	f000 fcd1 	bl	8001b30 <HAL_GetTick>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	HAL_Delay(10);
 8001194:	200a      	movs	r0, #10
 8001196:	f000 fcd7 	bl	8001b48 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 800119a:	e7b9      	b.n	8001110 <main+0x44>
 800119c:	3c23d70a 	.word	0x3c23d70a
 80011a0:	20000484 	.word	0x20000484
 80011a4:	200002ec 	.word	0x200002ec
 80011a8:	0800e0d8 	.word	0x0800e0d8

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f008 fb08 	bl	80097d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <SystemClock_Config+0xcc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <SystemClock_Config+0xcc>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <SystemClock_Config+0xd0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f8:	4a20      	ldr	r2, [pc, #128]	; (800127c <SystemClock_Config+0xd0>)
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <SystemClock_Config+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001216:	2302      	movs	r3, #2
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800121a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001224:	23a8      	movs	r3, #168	; 0xa8
 8001226:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001228:	2304      	movs	r3, #4
 800122a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800122c:	2307      	movs	r3, #7
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f99b 	bl	8004570 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001240:	f000 f954 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2302      	movs	r3, #2
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2102      	movs	r1, #2
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fbfd 	bl	8004a60 <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800126c:	f000 f93e 	bl	80014ec <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3750      	adds	r7, #80	; 0x50
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_ADC1_Init+0x98>)
 8001294:	4a21      	ldr	r2, [pc, #132]	; (800131c <MX_ADC1_Init+0x9c>)
 8001296:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_ADC1_Init+0x98>)
 800129a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800129e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_ADC1_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_ADC1_Init+0x98>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_ADC1_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_ADC1_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_ADC1_Init+0x98>)
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <MX_ADC1_Init+0xa0>)
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_ADC1_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_ADC1_Init+0x98>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_ADC1_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_ADC1_Init+0x98>)
 80012dc:	2201      	movs	r2, #1
 80012de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_ADC1_Init+0x98>)
 80012e2:	f000 fc55 	bl	8001b90 <HAL_ADC_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 f8fe 	bl	80014ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fc:	463b      	mov	r3, r7
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_ADC1_Init+0x98>)
 8001302:	f000 fdd5 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800130c:	f000 f8ee 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200002ec 	.word	0x200002ec
 800131c:	40012000 	.word	0x40012000
 8001320:	0f000001 	.word	0x0f000001

08001324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_I2C1_Init+0x50>)
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <MX_I2C1_Init+0x54>)
 800132c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_I2C1_Init+0x50>)
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <MX_I2C1_Init+0x58>)
 8001332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_I2C1_Init+0x50>)
 8001342:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_I2C1_Init+0x50>)
 8001362:	f001 fd43 	bl	8002dec <HAL_I2C_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800136c:	f000 f8be 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000394 	.word	0x20000394
 8001378:	40005400 	.word	0x40005400
 800137c:	000186a0 	.word	0x000186a0

08001380 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_SPI1_Init+0x64>)
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <MX_SPI1_Init+0x68>)
 8001388:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_SPI1_Init+0x64>)
 800138c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001390:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_SPI1_Init+0x64>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_SPI1_Init+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013cc:	220a      	movs	r2, #10
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_SPI1_Init+0x64>)
 80013d2:	f003 fd63 	bl	8004e9c <HAL_SPI_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013dc:	f000 f886 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200003e8 	.word	0x200003e8
 80013e8:	40013000 	.word	0x40013000

080013ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_USART1_UART_Init+0x50>)
 80013f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 80013f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 8001412:	220c      	movs	r2, #12
 8001414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART1_UART_Init+0x4c>)
 8001424:	f003 fdc3 	bl	8004fae <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800142e:	f000 f85d 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000440 	.word	0x20000440
 800143c:	40011000 	.word	0x40011000

08001440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <MX_DMA_Init+0x3c>)
 8001450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_DMA_Init+0x3c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2038      	movs	r0, #56	; 0x38
 8001468:	f001 f81b 	bl	80024a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800146c:	2038      	movs	r0, #56	; 0x38
 800146e:	f001 f834 	bl	80024da <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_GPIO_Init+0x68>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <MX_GPIO_Init+0x68>)
 8001490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_GPIO_Init+0x68>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_GPIO_Init+0x68>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <MX_GPIO_Init+0x68>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <MX_GPIO_Init+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_GPIO_Init+0x68>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <MX_GPIO_Init+0x68>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_GPIO_Init+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <HAL_ADC_MspInit+0xd8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d156      	bne.n	8001618 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <HAL_ADC_MspInit+0xdc>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <HAL_ADC_MspInit+0xdc>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <HAL_ADC_MspInit+0xdc>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_ADC_MspInit+0xdc>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_ADC_MspInit+0xdc>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_ADC_MspInit+0xdc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015a2:	2303      	movs	r3, #3
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <HAL_ADC_MspInit+0xe0>)
 80015b6:	f001 fa95 	bl	8002ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_ADC_MspInit+0xe8>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_ADC_MspInit+0xe4>)
 80015fe:	f000 ff87 	bl	8002510 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001608:	f7ff ff70 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_ADC_MspInit+0xe4>)
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
 8001612:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_ADC_MspInit+0xe4>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40012000 	.word	0x40012000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	20000334 	.word	0x20000334
 8001630:	40026410 	.word	0x40026410

08001634 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_I2C_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_I2C_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_I2C_MspInit+0x88>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_I2C_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001672:	23c0      	movs	r3, #192	; 0xc0
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001676:	2312      	movs	r3, #18
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001682:	2304      	movs	r3, #4
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <HAL_I2C_MspInit+0x8c>)
 800168e:	f001 fa29 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_I2C_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_I2C_MspInit+0x88>)
 800169c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_I2C_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40005400 	.word	0x40005400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020400 	.word	0x40020400

080016c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_SPI_MspInit+0x84>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d12b      	bne.n	800173e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_SPI_MspInit+0x88>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_SPI_MspInit+0x88>)
 80016f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_SPI_MspInit+0x88>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_SPI_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_SPI_MspInit+0x88>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_SPI_MspInit+0x88>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800171e:	23e0      	movs	r3, #224	; 0xe0
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172e:	2305      	movs	r3, #5
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <HAL_SPI_MspInit+0x8c>)
 800173a:	f001 f9d3 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40013000 	.word	0x40013000
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_UART_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_UART_MspInit+0x88>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a17      	ldr	r2, [pc, #92]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_UART_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_UART_MspInit+0x88>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_UART_MspInit+0x88>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c0:	2307      	movs	r3, #7
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <HAL_UART_MspInit+0x8c>)
 80017cc:	f001 f98a 	bl	8002ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40011000 	.word	0x40011000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001830:	f000 f96a 	bl	8001b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <DMA2_Stream0_IRQHandler+0x10>)
 800183e:	f000 ff15 	bl	800266c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000334 	.word	0x20000334

0800184c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <OTG_FS_IRQHandler+0x10>)
 8001852:	f001 fd5f 	bl	8003314 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000117c 	.word	0x2000117c

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187a:	f007 ff7f 	bl	800977c <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a2:	e7fe      	b.n	80018a2 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
  }

  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
  }
  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800193e:	605a      	str	r2, [r3, #4]
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <_isatty>:

int _isatty(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	; (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f007 fee4 	bl	800977c <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20010000 	.word	0x20010000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	20000494 	.word	0x20000494
 80019e8:	200018b8 	.word	0x200018b8

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <SystemInit+0x20>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SystemInit+0x20>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a16:	490e      	ldr	r1, [pc, #56]	; (8001a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a2c:	4c0b      	ldr	r4, [pc, #44]	; (8001a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a3a:	f7ff ffd7 	bl	80019ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f007 fea3 	bl	8009788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fb43 	bl	80010cc <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001a54:	0800e604 	.word	0x0800e604
  ldr r2, =_sbss
 8001a58:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001a5c:	200018b8 	.word	0x200018b8

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 fcfd 	bl	800248c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f000 f808 	bl	8001aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fd2e 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x54>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x58>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fd15 	bl	80024f6 <HAL_SYSTICK_Config>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00e      	b.n	8001af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b0f      	cmp	r3, #15
 8001ada:	d80a      	bhi.n	8001af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f000 fcdd 	bl	80024a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae8:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_InitTick+0x5c>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x20>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_IncTick+0x24>)
 8001b1a:	6013      	str	r3, [r2, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000498 	.word	0x20000498

08001b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_GetTick+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000498 	.word	0x20000498

08001b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ffee 	bl	8001b30 <HAL_GetTick>
 8001b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d005      	beq.n	8001b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_Delay+0x44>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b6e:	bf00      	nop
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d8f7      	bhi.n	8001b70 <HAL_Delay+0x28>
  {
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000008 	.word	0x20000008

08001b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e033      	b.n	8001c0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fcca 	bl	8001548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bd6:	f023 0302 	bic.w	r3, r3, #2
 8001bda:	f043 0202 	orr.w	r2, r3, #2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 fa86 	bl	80020f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f023 0303 	bic.w	r3, r3, #3
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfe:	e001      	b.n	8001c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Start+0x1a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e097      	b.n	8001d62 <HAL_ADC_Start+0x14a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d018      	beq.n	8001c7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c58:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <HAL_ADC_Start+0x158>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a45      	ldr	r2, [pc, #276]	; (8001d74 <HAL_ADC_Start+0x15c>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9a      	lsrs	r2, r3, #18
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d15f      	bne.n	8001d48 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc6:	d106      	bne.n	8001cd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f023 0206 	bic.w	r2, r3, #6
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_ADC_Start+0x160>)
 8001ce6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10f      	bne.n	8001d1e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d129      	bne.n	8001d60 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e020      	b.n	8001d60 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_ADC_Start+0x164>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d11b      	bne.n	8001d60 <HAL_ADC_Start+0x148>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d114      	bne.n	8001d60 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	e00b      	b.n	8001d60 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000000 	.word	0x20000000
 8001d74:	431bde83 	.word	0x431bde83
 8001d78:	40012300 	.word	0x40012300
 8001d7c:	40012000 	.word	0x40012000

08001d80 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d113      	bne.n	8001dc6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dac:	d10b      	bne.n	8001dc6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f043 0220 	orr.w	r2, r3, #32
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e063      	b.n	8001e8e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dc6:	f7ff feb3 	bl	8001b30 <HAL_GetTick>
 8001dca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dcc:	e021      	b.n	8001e12 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d01d      	beq.n	8001e12 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_ADC_PollForConversion+0x6c>
 8001ddc:	f7ff fea8 	bl	8001b30 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d212      	bcs.n	8001e12 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d00b      	beq.n	8001e12 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e03d      	b.n	8001e8e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d1d6      	bne.n	8001dce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0212 	mvn.w	r2, #18
 8001e28:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d123      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d11f      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d006      	beq.n	8001e68 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d111      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x1c>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e105      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x228>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d925      	bls.n	8001f28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68d9      	ldr	r1, [r3, #12]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b1e      	subs	r3, #30
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	400a      	ands	r2, r1
 8001f00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68d9      	ldr	r1, [r3, #12]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	4603      	mov	r3, r0
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4403      	add	r3, r0
 8001f1a:	3b1e      	subs	r3, #30
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	e022      	b.n	8001f6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6919      	ldr	r1, [r3, #16]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	400a      	ands	r2, r1
 8001f4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6919      	ldr	r1, [r3, #16]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	4603      	mov	r3, r0
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4403      	add	r3, r0
 8001f64:	409a      	lsls	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d824      	bhi.n	8001fc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b05      	subs	r3, #5
 8001f88:	221f      	movs	r2, #31
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	400a      	ands	r2, r1
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b05      	subs	r3, #5
 8001fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbe:	e04c      	b.n	800205a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	d824      	bhi.n	8002012 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b23      	subs	r3, #35	; 0x23
 8001fda:	221f      	movs	r2, #31
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b23      	subs	r3, #35	; 0x23
 8002004:	fa00 f203 	lsl.w	r2, r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
 8002010:	e023      	b.n	800205a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b41      	subs	r3, #65	; 0x41
 8002024:	221f      	movs	r2, #31
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b41      	subs	r3, #65	; 0x41
 800204e:	fa00 f203 	lsl.w	r2, r0, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_ADC_ConfigChannel+0x234>)
 800205c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a21      	ldr	r2, [pc, #132]	; (80020e8 <HAL_ADC_ConfigChannel+0x238>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d109      	bne.n	800207c <HAL_ADC_ConfigChannel+0x1cc>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b12      	cmp	r3, #18
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_ADC_ConfigChannel+0x238>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d123      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d003      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x1e6>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b11      	cmp	r3, #17
 8002094:	d11b      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b10      	cmp	r3, #16
 80020a8:	d111      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_ADC_ConfigChannel+0x23c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_ADC_ConfigChannel+0x240>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9a      	lsrs	r2, r3, #18
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f9      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40012300 	.word	0x40012300
 80020e8:	40012000 	.word	0x40012000
 80020ec:	20000000 	.word	0x20000000
 80020f0:	431bde83 	.word	0x431bde83

080020f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fc:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <ADC_Init+0x1f0>)
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	431a      	orrs	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	021a      	lsls	r2, r3, #8
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800214c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6859      	ldr	r1, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6899      	ldr	r1, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	4a58      	ldr	r2, [pc, #352]	; (80022e8 <ADC_Init+0x1f4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d022      	beq.n	80021d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800219a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6899      	ldr	r1, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e00f      	b.n	80021f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0202 	bic.w	r2, r2, #2
 8002200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	005a      	lsls	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01b      	beq.n	8002258 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800223e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	3b01      	subs	r3, #1
 800224c:	035a      	lsls	r2, r3, #13
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	e007      	b.n	8002268 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	3b01      	subs	r3, #1
 8002284:	051a      	lsls	r2, r3, #20
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022aa:	025a      	lsls	r2, r3, #9
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	029a      	lsls	r2, r3, #10
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40012300 	.word	0x40012300
 80022e8:	0f000001 	.word	0x0f000001

080022ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002308:	4013      	ands	r3, r2
 800230a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x44>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <__NVIC_GetPriorityGrouping+0x18>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0307 	and.w	r3, r3, #7
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db0b      	blt.n	800237a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 021f 	and.w	r2, r3, #31
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <__NVIC_EnableIRQ+0x38>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	2001      	movs	r0, #1
 8002372:	fa00 f202 	lsl.w	r2, r0, r2
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f1c3 0307 	rsb	r3, r3, #7
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	bf28      	it	cs
 80023fe:	2304      	movcs	r3, #4
 8002400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3304      	adds	r3, #4
 8002406:	2b06      	cmp	r3, #6
 8002408:	d902      	bls.n	8002410 <NVIC_EncodePriority+0x30>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3b03      	subs	r3, #3
 800240e:	e000      	b.n	8002412 <NVIC_EncodePriority+0x32>
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	f04f 32ff 	mov.w	r2, #4294967295
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	401a      	ands	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002428:	f04f 31ff 	mov.w	r1, #4294967295
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43d9      	mvns	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	4313      	orrs	r3, r2
         );
}
 800243a:	4618      	mov	r0, r3
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3b01      	subs	r3, #1
 8002454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002458:	d301      	bcc.n	800245e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245a:	2301      	movs	r3, #1
 800245c:	e00f      	b.n	800247e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <SysTick_Config+0x40>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002466:	210f      	movs	r1, #15
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f7ff ff8e 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <SysTick_Config+0x40>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <SysTick_Config+0x40>)
 8002478:	2207      	movs	r2, #7
 800247a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000e010 	.word	0xe000e010

0800248c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff29 	bl	80022ec <__NVIC_SetPriorityGrouping>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	4603      	mov	r3, r0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b4:	f7ff ff3e 	bl	8002334 <__NVIC_GetPriorityGrouping>
 80024b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7ff ff8e 	bl	80023e0 <NVIC_EncodePriority>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4603      	mov	r3, r0
 80024e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff31 	bl	8002350 <__NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ffa2 	bl	8002448 <SysTick_Config>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff fb08 	bl	8001b30 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e099      	b.n	8002660 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254c:	e00f      	b.n	800256e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800254e:	f7ff faef 	bl	8001b30 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b05      	cmp	r3, #5
 800255a:	d908      	bls.n	800256e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2203      	movs	r2, #3
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e078      	b.n	8002660 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e8      	bne.n	800254e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <HAL_DMA_Init+0x158>)
 8002588:	4013      	ands	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	4313      	orrs	r3, r2
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0307 	bic.w	r3, r3, #7
 80025ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d117      	bne.n	8002632 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f9e9 	bl	80029ec <DMA_CheckFifoParam>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800262e:	2301      	movs	r3, #1
 8002630:	e016      	b.n	8002660 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9a0 	bl	8002980 <DMA_CalcBaseAndBitshift>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	223f      	movs	r2, #63	; 0x3f
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	f010803f 	.word	0xf010803f

0800266c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002678:	4b8e      	ldr	r3, [pc, #568]	; (80028b4 <HAL_DMA_IRQHandler+0x248>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a8e      	ldr	r2, [pc, #568]	; (80028b8 <HAL_DMA_IRQHandler+0x24c>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0a9b      	lsrs	r3, r3, #10
 8002684:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2208      	movs	r2, #8
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01a      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2208      	movs	r2, #8
 80026c6:	409a      	lsls	r2, r3
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2201      	movs	r2, #1
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2201      	movs	r2, #1
 80026fc:	409a      	lsls	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0202 	orr.w	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2204      	movs	r2, #4
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2204      	movs	r2, #4
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2210      	movs	r2, #16
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d043      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d03c      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2210      	movs	r2, #16
 8002768:	409a      	lsls	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d108      	bne.n	800279c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d024      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	e01f      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01b      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e016      	b.n	80027dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0208 	bic.w	r2, r2, #8
 80027ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2220      	movs	r2, #32
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 808f 	beq.w	800290c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8087 	beq.w	800290c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2220      	movs	r2, #32
 8002804:	409a      	lsls	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d136      	bne.n	8002884 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0216 	bic.w	r2, r2, #22
 8002824:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002834:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <HAL_DMA_IRQHandler+0x1da>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0208 	bic.w	r2, r2, #8
 8002854:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	223f      	movs	r2, #63	; 0x3f
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d07e      	beq.n	8002978 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
        }
        return;
 8002882:	e079      	b.n	8002978 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01d      	beq.n	80028ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d031      	beq.n	800290c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
 80028b0:	e02c      	b.n	800290c <HAL_DMA_IRQHandler+0x2a0>
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000
 80028b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d023      	beq.n	800290c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e01e      	b.n	800290c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0210 	bic.w	r2, r2, #16
 80028ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	2b00      	cmp	r3, #0
 8002912:	d032      	beq.n	800297a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2205      	movs	r2, #5
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	d307      	bcc.n	8002954 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f2      	bne.n	8002938 <HAL_DMA_IRQHandler+0x2cc>
 8002952:	e000      	b.n	8002956 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002954:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
 8002976:	e000      	b.n	800297a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002978:	bf00      	nop
    }
  }
}
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b10      	subs	r3, #16
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <DMA_CalcBaseAndBitshift+0x68>)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d909      	bls.n	80029c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b6:	f023 0303 	bic.w	r3, r3, #3
 80029ba:	1d1a      	adds	r2, r3, #4
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	659a      	str	r2, [r3, #88]	; 0x58
 80029c0:	e007      	b.n	80029d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	aaaaaaab 	.word	0xaaaaaaab
 80029e8:	0800e144 	.word	0x0800e144

080029ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11f      	bne.n	8002a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d856      	bhi.n	8002aba <DMA_CheckFifoParam+0xce>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <DMA_CheckFifoParam+0x28>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a37 	.word	0x08002a37
 8002a1c:	08002a25 	.word	0x08002a25
 8002a20:	08002abb 	.word	0x08002abb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d046      	beq.n	8002abe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a34:	e043      	b.n	8002abe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a3e:	d140      	bne.n	8002ac2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a44:	e03d      	b.n	8002ac2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4e:	d121      	bne.n	8002a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d837      	bhi.n	8002ac6 <DMA_CheckFifoParam+0xda>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <DMA_CheckFifoParam+0x70>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a6d 	.word	0x08002a6d
 8002a60:	08002a73 	.word	0x08002a73
 8002a64:	08002a6d 	.word	0x08002a6d
 8002a68:	08002a85 	.word	0x08002a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a70:	e030      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d025      	beq.n	8002aca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a82:	e022      	b.n	8002aca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a8c:	d11f      	bne.n	8002ace <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a92:	e01c      	b.n	8002ace <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d903      	bls.n	8002aa2 <DMA_CheckFifoParam+0xb6>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d003      	beq.n	8002aa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aa0:	e018      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa6:	e015      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e00b      	b.n	8002ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aba:	bf00      	nop
 8002abc:	e00a      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e008      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e006      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e004      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e002      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ace:	bf00      	nop
 8002ad0:	e000      	b.n	8002ad4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
 8002afe:	e159      	b.n	8002db4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	f040 8148 	bne.w	8002dae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d005      	beq.n	8002b36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d130      	bne.n	8002b98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0201 	and.w	r2, r3, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d017      	beq.n	8002bd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d123      	bne.n	8002c28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	69b9      	ldr	r1, [r7, #24]
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0203 	and.w	r2, r3, #3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a2 	beq.w	8002dae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b57      	ldr	r3, [pc, #348]	; (8002dcc <HAL_GPIO_Init+0x2e8>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	4a56      	ldr	r2, [pc, #344]	; (8002dcc <HAL_GPIO_Init+0x2e8>)
 8002c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c78:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7a:	4b54      	ldr	r3, [pc, #336]	; (8002dcc <HAL_GPIO_Init+0x2e8>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c86:	4a52      	ldr	r2, [pc, #328]	; (8002dd0 <HAL_GPIO_Init+0x2ec>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a49      	ldr	r2, [pc, #292]	; (8002dd4 <HAL_GPIO_Init+0x2f0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x202>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a48      	ldr	r2, [pc, #288]	; (8002dd8 <HAL_GPIO_Init+0x2f4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x1fe>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a47      	ldr	r2, [pc, #284]	; (8002ddc <HAL_GPIO_Init+0x2f8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x1fa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a46      	ldr	r2, [pc, #280]	; (8002de0 <HAL_GPIO_Init+0x2fc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x1f6>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a45      	ldr	r2, [pc, #276]	; (8002de4 <HAL_GPIO_Init+0x300>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x1f2>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <HAL_GPIO_Init+0x2ec>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a24      	ldr	r2, [pc, #144]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <HAL_GPIO_Init+0x304>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f aea2 	bls.w	8002b00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40013c00 	.word	0x40013c00

08002dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e12b      	b.n	8003056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe fc0e 	bl	8001634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e50:	f001 fffc 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 8002e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a81      	ldr	r2, [pc, #516]	; (8003060 <HAL_I2C_Init+0x274>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d807      	bhi.n	8002e70 <HAL_I2C_Init+0x84>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a80      	ldr	r2, [pc, #512]	; (8003064 <HAL_I2C_Init+0x278>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	bf94      	ite	ls
 8002e68:	2301      	movls	r3, #1
 8002e6a:	2300      	movhi	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e006      	b.n	8002e7e <HAL_I2C_Init+0x92>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a7d      	ldr	r2, [pc, #500]	; (8003068 <HAL_I2C_Init+0x27c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e0e7      	b.n	8003056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a78      	ldr	r2, [pc, #480]	; (800306c <HAL_I2C_Init+0x280>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a6a      	ldr	r2, [pc, #424]	; (8003060 <HAL_I2C_Init+0x274>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d802      	bhi.n	8002ec0 <HAL_I2C_Init+0xd4>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	e009      	b.n	8002ed4 <HAL_I2C_Init+0xe8>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ec6:	fb02 f303 	mul.w	r3, r2, r3
 8002eca:	4a69      	ldr	r2, [pc, #420]	; (8003070 <HAL_I2C_Init+0x284>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	099b      	lsrs	r3, r3, #6
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	495c      	ldr	r1, [pc, #368]	; (8003060 <HAL_I2C_Init+0x274>)
 8002ef0:	428b      	cmp	r3, r1
 8002ef2:	d819      	bhi.n	8002f28 <HAL_I2C_Init+0x13c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e59      	subs	r1, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f02:	1c59      	adds	r1, r3, #1
 8002f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f08:	400b      	ands	r3, r1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_I2C_Init+0x138>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e59      	subs	r1, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f22:	e051      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002f24:	2304      	movs	r3, #4
 8002f26:	e04f      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d111      	bne.n	8002f54 <HAL_I2C_Init+0x168>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e012      	b.n	8002f7a <HAL_I2C_Init+0x18e>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	0099      	lsls	r1, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Init+0x196>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e022      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10e      	bne.n	8002fa8 <HAL_I2C_Init+0x1bc>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e58      	subs	r0, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	440b      	add	r3, r1
 8002f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa6:	e00f      	b.n	8002fc8 <HAL_I2C_Init+0x1dc>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	6809      	ldr	r1, [r1, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6911      	ldr	r1, [r2, #16]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68d2      	ldr	r2, [r2, #12]
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	430b      	orrs	r3, r1
 800300a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	000186a0 	.word	0x000186a0
 8003064:	001e847f 	.word	0x001e847f
 8003068:	003d08ff 	.word	0x003d08ff
 800306c:	431bde83 	.word	0x431bde83
 8003070:	10624dd3 	.word	0x10624dd3

08003074 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003076:	b08f      	sub	sp, #60	; 0x3c
 8003078:	af0a      	add	r7, sp, #40	; 0x28
 800307a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e10f      	b.n	80032a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f006 f861 	bl	8009168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 fb48 	bl	800575a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	687e      	ldr	r6, [r7, #4]
 80030d2:	466d      	mov	r5, sp
 80030d4:	f106 0410 	add.w	r4, r6, #16
 80030d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030e8:	1d33      	adds	r3, r6, #4
 80030ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ec:	6838      	ldr	r0, [r7, #0]
 80030ee:	f002 fa1f 	bl	8005530 <USB_CoreInit>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0d0      	b.n	80032a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f002 fb36 	bl	800577c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
 8003114:	e04a      	b.n	80031ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	333d      	adds	r3, #61	; 0x3d
 8003126:	2201      	movs	r2, #1
 8003128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	333c      	adds	r3, #60	; 0x3c
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	b298      	uxth	r0, r3
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	3344      	adds	r3, #68	; 0x44
 8003152:	4602      	mov	r2, r0
 8003154:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	3340      	adds	r3, #64	; 0x40
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3348      	adds	r3, #72	; 0x48
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334c      	adds	r3, #76	; 0x4c
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3354      	adds	r3, #84	; 0x54
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3af      	bcc.n	8003116 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	e044      	b.n	8003246 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	3301      	adds	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d3b5      	bcc.n	80031bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	687e      	ldr	r6, [r7, #4]
 8003258:	466d      	mov	r5, sp
 800325a:	f106 0410 	add.w	r4, r6, #16
 800325e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003266:	e894 0003 	ldmia.w	r4, {r0, r1}
 800326a:	e885 0003 	stmia.w	r5, {r0, r1}
 800326e:	1d33      	adds	r3, r6, #4
 8003270:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f002 face 	bl	8005814 <USB_DevInit>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00d      	b.n	80032a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fc1d 	bl	8006ade <USB_DevDisconnect>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_PCD_Start+0x1c>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e020      	b.n	800330c <HAL_PCD_Start+0x5e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d109      	bne.n	80032ee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d005      	beq.n	80032ee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 fa20 	bl	8005738 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 fbcd 	bl	8006a9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b08d      	sub	sp, #52	; 0x34
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fc8b 	bl	8006c46 <USB_GetMode>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 848a 	bne.w	8003c4c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f003 fbef 	bl	8006b20 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8480 	beq.w	8003c4a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f003 fbdc 	bl	8006b20 <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 0202 	and.w	r2, r2, #2
 8003380:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fbca 	bl	8006b20 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b10      	cmp	r3, #16
 8003394:	d161      	bne.n	800345a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0210 	bic.w	r2, r2, #16
 80033a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	3304      	adds	r3, #4
 80033c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	0c5b      	lsrs	r3, r3, #17
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d124      	bne.n	800341c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d035      	beq.n	800344a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	6a38      	ldr	r0, [r7, #32]
 80033f2:	f003 fa01 	bl	80067f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003402:	441a      	add	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003414:	441a      	add	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
 800341a:	e016      	b.n	800344a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	0c5b      	lsrs	r3, r3, #17
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2b06      	cmp	r3, #6
 8003426:	d110      	bne.n	800344a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800342e:	2208      	movs	r2, #8
 8003430:	4619      	mov	r1, r3
 8003432:	6a38      	ldr	r0, [r7, #32]
 8003434:	f003 f9e0 	bl	80067f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003444:	441a      	add	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0210 	orr.w	r2, r2, #16
 8003458:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fb5e 	bl	8006b20 <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800346e:	f040 80a7 	bne.w	80035c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fb63 	bl	8006b46 <USB_ReadDevAllOutEpInterrupt>
 8003480:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003482:	e099      	b.n	80035b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 808e 	beq.w	80035ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fb87 	bl	8006bae <USB_ReadDevOutEPInterrupt>
 80034a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	461a      	mov	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fec3 	bl	800424c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	2308      	movs	r3, #8
 80034e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 ff99 	bl	800441c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	2310      	movs	r3, #16
 8003504:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d030      	beq.n	8003572 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d109      	bne.n	8003530 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800352e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	78db      	ldrb	r3, [r3, #3]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d108      	bne.n	8003560 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f005 ff00 	bl	8009360 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	461a      	mov	r2, r3
 800356e:	2302      	movs	r3, #2
 8003570:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	461a      	mov	r2, r3
 800358a:	2320      	movs	r3, #32
 800358c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	3301      	adds	r3, #1
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f47f af62 	bne.w	8003484 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f003 faab 	bl	8006b20 <USB_ReadInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d4:	f040 80db 	bne.w	800378e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f003 facc 	bl	8006b7a <USB_ReadDevAllInEpInterrupt>
 80035e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035e8:	e0cd      	b.n	8003786 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80c2 	beq.w	800377a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f003 faf2 	bl	8006bea <USB_ReadDevInEPInterrupt>
 8003606:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d057      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	2201      	movs	r2, #1
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003632:	4013      	ands	r3, r2
 8003634:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003642:	461a      	mov	r2, r3
 8003644:	2301      	movs	r3, #1
 8003646:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d132      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	334c      	adds	r3, #76	; 0x4c
 8003660:	6819      	ldr	r1, [r3, #0]
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4403      	add	r3, r0
 8003670:	3348      	adds	r3, #72	; 0x48
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4419      	add	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4403      	add	r3, r0
 8003684:	334c      	adds	r3, #76	; 0x4c
 8003686:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d113      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x3a2>
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3354      	adds	r3, #84	; 0x54
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d108      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036ae:	461a      	mov	r2, r3
 80036b0:	2101      	movs	r1, #1
 80036b2:	f003 faf9 	bl	8006ca8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f005 fdd4 	bl	800926a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	461a      	mov	r2, r3
 80036da:	2308      	movs	r3, #8
 80036dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	461a      	mov	r2, r3
 80036f6:	2310      	movs	r3, #16
 80036f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	461a      	mov	r2, r3
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d023      	beq.n	8003768 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003722:	6a38      	ldr	r0, [r7, #32]
 8003724:	f002 f9da 	bl	8005adc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	3338      	adds	r3, #56	; 0x38
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	3304      	adds	r3, #4
 800373a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	78db      	ldrb	r3, [r3, #3]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d108      	bne.n	8003756 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2200      	movs	r2, #0
 8003748:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	b2db      	uxtb	r3, r3
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f005 fe17 	bl	8009384 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	4413      	add	r3, r2
 800375e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003762:	461a      	mov	r2, r3
 8003764:	2302      	movs	r3, #2
 8003766:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fcdb 	bl	8004130 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	3301      	adds	r3, #1
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	f47f af2e 	bne.w	80035ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f9c4 	bl	8006b20 <USB_ReadInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800379e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037a2:	d122      	bne.n	80037ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f023 0301 	bic.w	r3, r3, #1
 80037b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037ca:	2100      	movs	r1, #0
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fec3 	bl	8004558 <HAL_PCDEx_LPM_Callback>
 80037d2:	e002      	b.n	80037da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f005 fdb5 	bl	8009344 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695a      	ldr	r2, [r3, #20]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 f996 	bl	8006b20 <USB_ReadInterrupts>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fe:	d112      	bne.n	8003826 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d102      	bne.n	8003816 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f005 fd71 	bl	80092f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003824:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f003 f978 	bl	8006b20 <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383a:	f040 80b7 	bne.w	80039ac <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384c:	f023 0301 	bic.w	r3, r3, #1
 8003850:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2110      	movs	r1, #16
 8003858:	4618      	mov	r0, r3
 800385a:	f002 f93f 	bl	8005adc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385e:	2300      	movs	r3, #0
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003862:	e046      	b.n	80038f2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	461a      	mov	r2, r3
 8003872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003876:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003888:	0151      	lsls	r1, r2, #5
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	440a      	add	r2, r1
 800388e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003896:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	461a      	mov	r2, r3
 80038a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038bc:	0151      	lsls	r1, r2, #5
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	440a      	add	r2, r1
 80038c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	0151      	lsls	r1, r2, #5
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	440a      	add	r2, r1
 80038e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	3301      	adds	r3, #1
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d3b3      	bcc.n	8003864 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800390e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003928:	f043 030b 	orr.w	r3, r3, #11
 800392c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393e:	f043 030b 	orr.w	r3, r3, #11
 8003942:	6453      	str	r3, [r2, #68]	; 0x44
 8003944:	e015      	b.n	8003972 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003958:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800395c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800396c:	f043 030b 	orr.w	r3, r3, #11
 8003970:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003980:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003984:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003996:	461a      	mov	r2, r3
 8003998:	f003 f986 	bl	8006ca8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f003 f8b5 	bl	8006b20 <USB_ReadInterrupts>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c0:	d124      	bne.n	8003a0c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f003 f94b 	bl	8006c62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f002 f900 	bl	8005bd6 <USB_GetDevSpeed>
 80039d6:	4603      	mov	r3, r0
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681c      	ldr	r4, [r3, #0]
 80039e2:	f001 fa27 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 80039e6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	4620      	mov	r0, r4
 80039f2:	f001 fdff 	bl	80055f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f005 fc5f 	bl	80092ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 f885 	bl	8006b20 <USB_ReadInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d10a      	bne.n	8003a36 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f005 fc3c 	bl	800929e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 0208 	and.w	r2, r2, #8
 8003a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f003 f870 	bl	8006b20 <USB_ReadInterrupts>
 8003a40:	4603      	mov	r3, r0
 8003a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a46:	2b80      	cmp	r3, #128	; 0x80
 8003a48:	d122      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a56:	2301      	movs	r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e014      	b.n	8003a86 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	4619      	mov	r1, r3
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fb27 	bl	80040ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	3301      	adds	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3e5      	bcc.n	8003a5c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 f843 	bl	8006b20 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa4:	d13b      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e02b      	b.n	8003b04 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3340      	adds	r3, #64	; 0x40
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d115      	bne.n	8003afe <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ad2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	da12      	bge.n	8003afe <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	333f      	adds	r3, #63	; 0x3f
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fae8 	bl	80040ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	3301      	adds	r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3ce      	bcc.n	8003aac <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 fffc 	bl	8006b20 <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b32:	d155      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b34:	2301      	movs	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	e045      	b.n	8003bc6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d12e      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da2b      	bge.n	8003bc0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d121      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbc:	6053      	str	r3, [r2, #4]
            break;
 8003bbe:	e007      	b.n	8003bd0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3b4      	bcc.n	8003b3a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f002 ff9b 	bl	8006b20 <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d10a      	bne.n	8003c0c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f005 fbd6 	bl	80093a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f002 ff85 	bl	8006b20 <USB_ReadInterrupts>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d115      	bne.n	8003c4c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f005 fbc6 	bl	80093c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e000      	b.n	8003c4c <HAL_PCD_IRQHandler+0x938>
      return;
 8003c4a:	bf00      	nop
    }
  }
}
 8003c4c:	3734      	adds	r7, #52	; 0x34
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}

08003c52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_PCD_SetAddress+0x1a>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e013      	b.n	8003c94 <HAL_PCD_SetAddress+0x42>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fee3 	bl	8006a50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	70fb      	strb	r3, [r7, #3]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	803b      	strh	r3, [r7, #0]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da0f      	bge.n	8003ce2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 020f 	and.w	r2, r3, #15
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	3338      	adds	r3, #56	; 0x38
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	705a      	strb	r2, [r3, #1]
 8003ce0:	e00f      	b.n	8003d02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 020f 	and.w	r2, r3, #15
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d0e:	883a      	ldrh	r2, [r7, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	78ba      	ldrb	r2, [r7, #2]
 8003d18:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d2c:	78bb      	ldrb	r3, [r7, #2]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d102      	bne.n	8003d38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_PCD_EP_Open+0xaa>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e00e      	b.n	8003d64 <HAL_PCD_EP_Open+0xc8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68f9      	ldr	r1, [r7, #12]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 ff63 	bl	8005c20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d62:	7afb      	ldrb	r3, [r7, #11]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da0f      	bge.n	8003da0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	3338      	adds	r3, #56	; 0x38
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	3304      	adds	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	705a      	strb	r2, [r3, #1]
 8003d9e:	e00f      	b.n	8003dc0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	3304      	adds	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_PCD_EP_Close+0x6e>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e00e      	b.n	8003df8 <HAL_PCD_EP_Close+0x8c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 ffa1 	bl	8005d30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d102      	bne.n	8003e5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e5c:	7afb      	ldrb	r3, [r7, #11]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	f002 fa80 	bl	8006378 <USB_EP0StartXfer>
 8003e78:	e008      	b.n	8003e8c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	f002 f82e 	bl	8005ee8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003eb8:	681b      	ldr	r3, [r3, #0]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	f003 020f 	and.w	r2, r3, #15
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	3338      	adds	r3, #56	; 0x38
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2201      	movs	r2, #1
 8003f04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f06:	7afb      	ldrb	r3, [r7, #11]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f20:	7afb      	ldrb	r3, [r7, #11]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6979      	ldr	r1, [r7, #20]
 8003f38:	f002 fa1e 	bl	8006378 <USB_EP0StartXfer>
 8003f3c:	e008      	b.n	8003f50 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	f001 ffcc 	bl	8005ee8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d901      	bls.n	8003f78 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e050      	b.n	800401a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	da0f      	bge.n	8003fa0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	78fb      	ldrb	r3, [r7, #3]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	3338      	adds	r3, #56	; 0x38
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	705a      	strb	r2, [r3, #1]
 8003f9e:	e00d      	b.n	8003fbc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_EP_SetStall+0x82>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e01e      	b.n	800401a <HAL_PCD_EP_SetStall+0xc0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 fc5c 	bl	80068a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	b2d9      	uxtb	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800400a:	461a      	mov	r2, r3
 800400c:	f002 fe4c 	bl	8006ca8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d901      	bls.n	8004040 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e042      	b.n	80040c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da0f      	bge.n	8004068 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3338      	adds	r3, #56	; 0x38
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	3304      	adds	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	705a      	strb	r2, [r3, #1]
 8004066:	e00f      	b.n	8004088 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	3304      	adds	r3, #4
 8004080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_PCD_EP_ClrStall+0x86>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e00e      	b.n	80040c6 <HAL_PCD_EP_ClrStall+0xa4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f002 fc64 	bl	8006984 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da0c      	bge.n	80040fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	f003 020f 	and.w	r2, r3, #15
 80040e8:	4613      	mov	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3338      	adds	r3, #56	; 0x38
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	3304      	adds	r3, #4
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e00c      	b.n	8004116 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	4618      	mov	r0, r3
 800411e:	f002 fa83 	bl	8006628 <USB_EPStopXfer>
 8004122:	4603      	mov	r3, r0
 8004124:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004126:	7afb      	ldrb	r3, [r7, #11]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	3338      	adds	r3, #56	; 0x38
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	429a      	cmp	r2, r3
 8004162:	d901      	bls.n	8004168 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e06c      	b.n	8004242 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	429a      	cmp	r2, r3
 800417c:	d902      	bls.n	8004184 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	3303      	adds	r3, #3
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800418c:	e02b      	b.n	80041e6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d902      	bls.n	80041aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3303      	adds	r3, #3
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6919      	ldr	r1, [r3, #16]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4603      	mov	r3, r0
 80041c8:	6978      	ldr	r0, [r7, #20]
 80041ca:	f002 fad7 	bl	800677c <USB_WritePacket>

    ep->xfer_buff  += len;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	441a      	add	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1a      	ldr	r2, [r3, #32]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	441a      	add	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d809      	bhi.n	8004210 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1a      	ldr	r2, [r3, #32]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004204:	429a      	cmp	r2, r3
 8004206:	d203      	bcs.n	8004210 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1be      	bne.n	800418e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	429a      	cmp	r2, r3
 800421a:	d811      	bhi.n	8004240 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	2201      	movs	r2, #1
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	43db      	mvns	r3, r3
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423c:	4013      	ands	r3, r2
 800423e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	333c      	adds	r3, #60	; 0x3c
 8004264:	3304      	adds	r3, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d17b      	bne.n	800437a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4a61      	ldr	r2, [pc, #388]	; (8004414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	f240 80b9 	bls.w	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 80b3 	beq.w	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ae:	461a      	mov	r2, r3
 80042b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b4:	6093      	str	r3, [r2, #8]
 80042b6:	e0a7      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	2320      	movs	r3, #32
 80042d2:	6093      	str	r3, [r2, #8]
 80042d4:	e098      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 8093 	bne.w	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	; (8004414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d90f      	bls.n	800430a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	6093      	str	r3, [r2, #8]
 8004308:	e07e      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	0159      	lsls	r1, r3, #5
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	440b      	add	r3, r1
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004336:	1ad2      	subs	r2, r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d114      	bne.n	800436c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004354:	461a      	mov	r2, r3
 8004356:	2101      	movs	r1, #1
 8004358:	f002 fca6 	bl	8006ca8 <USB_EP0_OutStart>
 800435c:	e006      	b.n	800436c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f004 ff5e 	bl	8009234 <HAL_PCD_DataOutStageCallback>
 8004378:	e046      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	4a26      	ldr	r2, [pc, #152]	; (8004418 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d124      	bne.n	80043cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439e:	6093      	str	r3, [r2, #8]
 80043a0:	e032      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2320      	movs	r3, #32
 80043bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f004 ff35 	bl	8009234 <HAL_PCD_DataOutStageCallback>
 80043ca:	e01d      	b.n	8004408 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d114      	bne.n	80043fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043f4:	461a      	mov	r2, r3
 80043f6:	2100      	movs	r1, #0
 80043f8:	f002 fc56 	bl	8006ca8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f004 ff16 	bl	8009234 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	4f54300a 	.word	0x4f54300a
 8004418:	4f54310a 	.word	0x4f54310a

0800441c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	333c      	adds	r3, #60	; 0x3c
 8004434:	3304      	adds	r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d90e      	bls.n	8004470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	461a      	mov	r2, r3
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f004 fecd 	bl	8009210 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a0a      	ldr	r2, [pc, #40]	; (80044a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d90c      	bls.n	8004498 <PCD_EP_OutSetupPacket_int+0x7c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d108      	bne.n	8004498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004490:	461a      	mov	r2, r3
 8004492:	2101      	movs	r1, #1
 8004494:	f002 fc08 	bl	8006ca8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	4f54300a 	.word	0x4f54300a

080044a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
 80044b4:	4613      	mov	r3, r2
 80044b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044c6:	883b      	ldrh	r3, [r7, #0]
 80044c8:	0419      	lsls	r1, r3, #16
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28
 80044d4:	e028      	b.n	8004528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]
 80044e8:	e00d      	b.n	8004506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	3340      	adds	r3, #64	; 0x40
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	3301      	adds	r3, #1
 8004504:	73fb      	strb	r3, [r7, #15]
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	3b01      	subs	r3, #1
 800450c:	429a      	cmp	r2, r3
 800450e:	d3ec      	bcc.n	80044ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004510:	883b      	ldrh	r3, [r7, #0]
 8004512:	0418      	lsls	r0, r3, #16
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	3b01      	subs	r3, #1
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	4302      	orrs	r2, r0
 8004520:	3340      	adds	r3, #64	; 0x40
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e267      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d075      	beq.n	800467a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458e:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d00c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d112      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a6:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b2:	d10b      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05b      	beq.n	8004678 <HAL_RCC_OscConfig+0x108>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d157      	bne.n	8004678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e242      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x74>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x98>
 80045ee:	4b70      	ldr	r3, [pc, #448]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6f      	ldr	r2, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a6c      	ldr	r2, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 8004608:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a68      	ldr	r2, [pc, #416]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a65      	ldr	r2, [pc, #404]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd fa82 	bl	8001b30 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fd fa7e 	bl	8001b30 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e207      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xc0>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd fa6e 	bl	8001b30 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd fa6a 	bl	8001b30 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1f3      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0xe8>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d063      	beq.n	800474e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800469a:	2b08      	cmp	r3, #8
 800469c:	d11c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1c7      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d6:	e03a      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e0:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0x244>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fd fa23 	bl	8001b30 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fd fa1f 	bl	8001b30 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e1a8      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4925      	ldr	r1, [pc, #148]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
 8004720:	e015      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0x244>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd fa02 	bl	8001b30 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004730:	f7fd f9fe 	bl	8001b30 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e187      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d036      	beq.n	80047c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_RCC_OscConfig+0x248>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fd f9e2 	bl	8001b30 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004770:	f7fd f9de 	bl	8001b30 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e167      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x200>
 800478e:	e01b      	b.n	80047c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_OscConfig+0x248>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004796:	f7fd f9cb 	bl	8001b30 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	e00e      	b.n	80047bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7fd f9c7 	bl	8001b30 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d907      	bls.n	80047bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e150      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
 80047b0:	40023800 	.word	0x40023800
 80047b4:	42470000 	.word	0x42470000
 80047b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ea      	bne.n	800479e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8097 	beq.w	8004904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a7c      	ldr	r2, [pc, #496]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
 80047f6:	4b7a      	ldr	r3, [pc, #488]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b74      	ldr	r3, [pc, #464]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fd f987 	bl	8001b30 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004826:	f7fd f983 	bl	8001b30 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e10c      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d106      	bne.n	800485a <HAL_RCC_OscConfig+0x2ea>
 800484c:	4b64      	ldr	r3, [pc, #400]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a63      	ldr	r2, [pc, #396]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	e01c      	b.n	8004894 <HAL_RCC_OscConfig+0x324>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x30c>
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a5b      	ldr	r2, [pc, #364]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0x324>
 800487c:	4b58      	ldr	r3, [pc, #352]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a57      	ldr	r2, [pc, #348]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
 8004888:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	4a54      	ldr	r2, [pc, #336]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800488e:	f023 0304 	bic.w	r3, r3, #4
 8004892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fd f948 	bl	8001b30 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fd f944 	bl	8001b30 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0cb      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ba:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ee      	beq.n	80048a4 <HAL_RCC_OscConfig+0x334>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c8:	f7fd f932 	bl	8001b30 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fd f92e 	bl	8001b30 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0b5      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e6:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ee      	bne.n	80048d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d105      	bne.n	8004904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f8:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80a1 	beq.w	8004a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490e:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b08      	cmp	r3, #8
 8004918:	d05c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d141      	bne.n	80049a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fd f902 	bl	8001b30 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7fd f8fe 	bl	8001b30 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e087      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	019b      	lsls	r3, r3, #6
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	3b01      	subs	r3, #1
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	491b      	ldr	r1, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fd f8d7 	bl	8001b30 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004986:	f7fd f8d3 	bl	8001b30 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e05c      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x416>
 80049a4:	e054      	b.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fd f8c0 	bl	8001b30 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd f8bc 	bl	8001b30 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e045      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x444>
 80049d2:	e03d      	b.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e038      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x4ec>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d028      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d121      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d11a      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d111      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	3b01      	subs	r3, #1
 8004a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800

08004a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0cc      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d90c      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0b8      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a58      	ldr	r2, [pc, #352]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004acc:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad8:	4b50      	ldr	r3, [pc, #320]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	494d      	ldr	r1, [pc, #308]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d044      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d119      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e07f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d003      	beq.n	8004b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e06f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e067      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4934      	ldr	r1, [pc, #208]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b50:	f7fc ffee 	bl	8001b30 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fc ffea 	bl	8001b30 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e04f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b80:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d20c      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e032      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb4:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4916      	ldr	r1, [pc, #88]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	490e      	ldr	r1, [pc, #56]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be6:	f000 f821 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 8004bea:	4602      	mov	r2, r0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	5ccb      	ldrb	r3, [r1, r3]
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_ClockConfig+0x1c8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fc ff4e 	bl	8001aa8 <HAL_InitTick>

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023c00 	.word	0x40023c00
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	0800e12c 	.word	0x0800e12c
 8004c24:	20000000 	.word	0x20000000
 8004c28:	20000004 	.word	0x20000004

08004c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b094      	sub	sp, #80	; 0x50
 8004c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
 8004c38:	2300      	movs	r3, #0
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c44:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d00d      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x40>
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	f200 80e1 	bhi.w	8004e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x34>
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c5e:	e0db      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4b73      	ldr	r3, [pc, #460]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c64:	e0db      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c66:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6a:	e0d8      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c6c:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c76:	4b6d      	ldr	r3, [pc, #436]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b6a      	ldr	r3, [pc, #424]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	2200      	movs	r2, #0
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	2300      	movs	r3, #0
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	0159      	lsls	r1, r3, #5
 8004cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb0:	0150      	lsls	r0, r2, #5
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	1a51      	subs	r1, r2, r1
 8004cba:	6139      	str	r1, [r7, #16]
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	018b      	lsls	r3, r1, #6
 8004cd4:	4651      	mov	r1, sl
 8004cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cda:	4651      	mov	r1, sl
 8004cdc:	018a      	lsls	r2, r1, #6
 8004cde:	4651      	mov	r1, sl
 8004ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfe:	4690      	mov	r8, r2
 8004d00:	4699      	mov	r9, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	eb18 0303 	adds.w	r3, r8, r3
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	462b      	mov	r3, r5
 8004d0c:	eb49 0303 	adc.w	r3, r9, r3
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d1e:	4629      	mov	r1, r5
 8004d20:	028b      	lsls	r3, r1, #10
 8004d22:	4621      	mov	r1, r4
 8004d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d28:	4621      	mov	r1, r4
 8004d2a:	028a      	lsls	r2, r1, #10
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d32:	2200      	movs	r2, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3c:	f7fb ffac 	bl	8000c98 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	e058      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d4a:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	2200      	movs	r2, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	4611      	mov	r1, r2
 8004d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	f04f 0000 	mov.w	r0, #0
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	0159      	lsls	r1, r3, #5
 8004d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d76:	0150      	lsls	r0, r2, #5
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004da0:	eb63 050b 	sbc.w	r5, r3, fp
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	028b      	lsls	r3, r1, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ddc:	4621      	mov	r1, r4
 8004dde:	028a      	lsls	r2, r1, #10
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	2200      	movs	r2, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	61fa      	str	r2, [r7, #28]
 8004dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df0:	f7fb ff52 	bl	8000c98 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3750      	adds	r7, #80	; 0x50
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00f42400 	.word	0x00f42400

08004e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e38:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000000 	.word	0x20000000

08004e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e50:	f7ff fff0 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e54:	4602      	mov	r2, r0
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	0a9b      	lsrs	r3, r3, #10
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	4903      	ldr	r1, [pc, #12]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e62:	5ccb      	ldrb	r3, [r1, r3]
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	0800e13c 	.word	0x0800e13c

08004e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e78:	f7ff ffdc 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	0b5b      	lsrs	r3, r3, #13
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	4903      	ldr	r1, [pc, #12]	; (8004e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40023800 	.word	0x40023800
 8004e98:	0800e13c 	.word	0x0800e13c

08004e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07b      	b.n	8004fa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d108      	bne.n	8004ec8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ebe:	d009      	beq.n	8004ed4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61da      	str	r2, [r3, #28]
 8004ec6:	e005      	b.n	8004ed4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fc fbe8 	bl	80016c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	ea42 0103 	orr.w	r1, r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f003 0104 	and.w	r1, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0210 	and.w	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e03f      	b.n	8005040 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fc fbbd 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2224      	movs	r2, #36	; 0x24
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f828 	bl	8005048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005006:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695a      	ldr	r2, [r3, #20]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005016:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005026:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800504c:	b0c0      	sub	sp, #256	; 0x100
 800504e:	af00      	add	r7, sp, #0
 8005050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050a0:	f021 010c 	bic.w	r1, r1, #12
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ae:	430b      	orrs	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	6999      	ldr	r1, [r3, #24]
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	ea40 0301 	orr.w	r3, r0, r1
 80050ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b8f      	ldr	r3, [pc, #572]	; (8005314 <UART_SetConfig+0x2cc>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d005      	beq.n	80050e8 <UART_SetConfig+0xa0>
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b8d      	ldr	r3, [pc, #564]	; (8005318 <UART_SetConfig+0x2d0>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d104      	bne.n	80050f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7ff fec4 	bl	8004e74 <HAL_RCC_GetPCLK2Freq>
 80050ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050f0:	e003      	b.n	80050fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f2:	f7ff feab 	bl	8004e4c <HAL_RCC_GetPCLK1Freq>
 80050f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	f040 810c 	bne.w	8005320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	1891      	adds	r1, r2, r2
 8005120:	65b9      	str	r1, [r7, #88]	; 0x58
 8005122:	415b      	adcs	r3, r3
 8005124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800512a:	4621      	mov	r1, r4
 800512c:	eb12 0801 	adds.w	r8, r2, r1
 8005130:	4629      	mov	r1, r5
 8005132:	eb43 0901 	adc.w	r9, r3, r1
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800514a:	4690      	mov	r8, r2
 800514c:	4699      	mov	r9, r3
 800514e:	4623      	mov	r3, r4
 8005150:	eb18 0303 	adds.w	r3, r8, r3
 8005154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005158:	462b      	mov	r3, r5
 800515a:	eb49 0303 	adc.w	r3, r9, r3
 800515e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800516e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005176:	460b      	mov	r3, r1
 8005178:	18db      	adds	r3, r3, r3
 800517a:	653b      	str	r3, [r7, #80]	; 0x50
 800517c:	4613      	mov	r3, r2
 800517e:	eb42 0303 	adc.w	r3, r2, r3
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
 8005184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800518c:	f7fb fd84 	bl	8000c98 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4b61      	ldr	r3, [pc, #388]	; (800531c <UART_SetConfig+0x2d4>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	011c      	lsls	r4, r3, #4
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051b8:	415b      	adcs	r3, r3
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c0:	4641      	mov	r1, r8
 80051c2:	eb12 0a01 	adds.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0b01 	adc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051e0:	4692      	mov	sl, r2
 80051e2:	469b      	mov	fp, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ee:	464b      	mov	r3, r9
 80051f0:	eb4b 0303 	adc.w	r3, fp, r3
 80051f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800520c:	460b      	mov	r3, r1
 800520e:	18db      	adds	r3, r3, r3
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
 8005212:	4613      	mov	r3, r2
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800521e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005222:	f7fb fd39 	bl	8000c98 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4611      	mov	r1, r2
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <UART_SetConfig+0x2d4>)
 800522e:	fba3 2301 	umull	r2, r3, r3, r1
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2264      	movs	r2, #100	; 0x64
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	1acb      	subs	r3, r1, r3
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <UART_SetConfig+0x2d4>)
 8005244:	fba3 2302 	umull	r2, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005250:	441c      	add	r4, r3
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800525c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	63b9      	str	r1, [r7, #56]	; 0x38
 800526c:	415b      	adcs	r3, r3
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005274:	4641      	mov	r1, r8
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6339      	str	r1, [r7, #48]	; 0x30
 800527a:	4649      	mov	r1, r9
 800527c:	414b      	adcs	r3, r1
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800528c:	4659      	mov	r1, fp
 800528e:	00cb      	lsls	r3, r1, #3
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005296:	4651      	mov	r1, sl
 8005298:	00ca      	lsls	r2, r1, #3
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	4642      	mov	r2, r8
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052c8:	460b      	mov	r3, r1
 80052ca:	18db      	adds	r3, r3, r3
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ce:	4613      	mov	r3, r2
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052de:	f7fb fcdb 	bl	8000c98 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <UART_SetConfig+0x2d4>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	2164      	movs	r1, #100	; 0x64
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3332      	adds	r3, #50	; 0x32
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <UART_SetConfig+0x2d4>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4422      	add	r2, r4
 800530e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005310:	e105      	b.n	800551e <UART_SetConfig+0x4d6>
 8005312:	bf00      	nop
 8005314:	40011000 	.word	0x40011000
 8005318:	40011400 	.word	0x40011400
 800531c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800532a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800532e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005332:	4642      	mov	r2, r8
 8005334:	464b      	mov	r3, r9
 8005336:	1891      	adds	r1, r2, r2
 8005338:	6239      	str	r1, [r7, #32]
 800533a:	415b      	adcs	r3, r3
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
 800533e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005342:	4641      	mov	r1, r8
 8005344:	1854      	adds	r4, r2, r1
 8005346:	4649      	mov	r1, r9
 8005348:	eb43 0501 	adc.w	r5, r3, r1
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	00eb      	lsls	r3, r5, #3
 8005356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535a:	00e2      	lsls	r2, r4, #3
 800535c:	4614      	mov	r4, r2
 800535e:	461d      	mov	r5, r3
 8005360:	4643      	mov	r3, r8
 8005362:	18e3      	adds	r3, r4, r3
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005368:	464b      	mov	r3, r9
 800536a:	eb45 0303 	adc.w	r3, r5, r3
 800536e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800537e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800538e:	4629      	mov	r1, r5
 8005390:	008b      	lsls	r3, r1, #2
 8005392:	4621      	mov	r1, r4
 8005394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005398:	4621      	mov	r1, r4
 800539a:	008a      	lsls	r2, r1, #2
 800539c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053a0:	f7fb fc7a 	bl	8000c98 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4b60      	ldr	r3, [pc, #384]	; (800552c <UART_SetConfig+0x4e4>)
 80053aa:	fba3 2302 	umull	r2, r3, r3, r2
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	011c      	lsls	r4, r3, #4
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	61b9      	str	r1, [r7, #24]
 80053cc:	415b      	adcs	r3, r3
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6139      	str	r1, [r7, #16]
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005408:	464b      	mov	r3, r9
 800540a:	460a      	mov	r2, r1
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	67bb      	str	r3, [r7, #120]	; 0x78
 800541e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800542c:	4649      	mov	r1, r9
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	4641      	mov	r1, r8
 8005432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005436:	4641      	mov	r1, r8
 8005438:	008a      	lsls	r2, r1, #2
 800543a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800543e:	f7fb fc2b 	bl	8000c98 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <UART_SetConfig+0x4e4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a34      	ldr	r2, [pc, #208]	; (800552c <UART_SetConfig+0x4e4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005466:	441c      	add	r4, r3
 8005468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546c:	2200      	movs	r2, #0
 800546e:	673b      	str	r3, [r7, #112]	; 0x70
 8005470:	677a      	str	r2, [r7, #116]	; 0x74
 8005472:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005476:	4642      	mov	r2, r8
 8005478:	464b      	mov	r3, r9
 800547a:	1891      	adds	r1, r2, r2
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	415b      	adcs	r3, r3
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005486:	4641      	mov	r1, r8
 8005488:	1851      	adds	r1, r2, r1
 800548a:	6039      	str	r1, [r7, #0]
 800548c:	4649      	mov	r1, r9
 800548e:	414b      	adcs	r3, r1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800549e:	4659      	mov	r1, fp
 80054a0:	00cb      	lsls	r3, r1, #3
 80054a2:	4651      	mov	r1, sl
 80054a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a8:	4651      	mov	r1, sl
 80054aa:	00ca      	lsls	r2, r1, #3
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	4642      	mov	r2, r8
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b8:	464b      	mov	r3, r9
 80054ba:	460a      	mov	r2, r1
 80054bc:	eb42 0303 	adc.w	r3, r2, r3
 80054c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	663b      	str	r3, [r7, #96]	; 0x60
 80054cc:	667a      	str	r2, [r7, #100]	; 0x64
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054da:	4649      	mov	r1, r9
 80054dc:	008b      	lsls	r3, r1, #2
 80054de:	4641      	mov	r1, r8
 80054e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e4:	4641      	mov	r1, r8
 80054e6:	008a      	lsls	r2, r1, #2
 80054e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ec:	f7fb fbd4 	bl	8000c98 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <UART_SetConfig+0x4e4>)
 80054f6:	fba3 1302 	umull	r1, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2164      	movs	r1, #100	; 0x64
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <UART_SetConfig+0x4e4>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4422      	add	r2, r4
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	51eb851f 	.word	0x51eb851f

08005530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005530:	b084      	sub	sp, #16
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	f107 001c 	add.w	r0, r7, #28
 800553e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d122      	bne.n	800558e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d105      	bne.n	8005582 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f001 fbee 	bl	8006d64 <USB_CoreReset>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]
 800558c:	e01a      	b.n	80055c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 fbe2 	bl	8006d64 <USB_CoreReset>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
 80055b6:	e005      	b.n	80055c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10b      	bne.n	80055e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f043 0206 	orr.w	r2, r3, #6
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ee:	b004      	add	sp, #16
 80055f0:	4770      	bx	lr
	...

080055f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d165      	bne.n	80056d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a41      	ldr	r2, [pc, #260]	; (8005710 <USB_SetTurnaroundTime+0x11c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d906      	bls.n	800561e <USB_SetTurnaroundTime+0x2a>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4a40      	ldr	r2, [pc, #256]	; (8005714 <USB_SetTurnaroundTime+0x120>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d202      	bcs.n	800561e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005618:	230f      	movs	r3, #15
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e062      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a3c      	ldr	r2, [pc, #240]	; (8005714 <USB_SetTurnaroundTime+0x120>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d306      	bcc.n	8005634 <USB_SetTurnaroundTime+0x40>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a3b      	ldr	r2, [pc, #236]	; (8005718 <USB_SetTurnaroundTime+0x124>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d202      	bcs.n	8005634 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800562e:	230e      	movs	r3, #14
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e057      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a38      	ldr	r2, [pc, #224]	; (8005718 <USB_SetTurnaroundTime+0x124>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d306      	bcc.n	800564a <USB_SetTurnaroundTime+0x56>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4a37      	ldr	r2, [pc, #220]	; (800571c <USB_SetTurnaroundTime+0x128>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d202      	bcs.n	800564a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005644:	230d      	movs	r3, #13
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e04c      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a33      	ldr	r2, [pc, #204]	; (800571c <USB_SetTurnaroundTime+0x128>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d306      	bcc.n	8005660 <USB_SetTurnaroundTime+0x6c>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a32      	ldr	r2, [pc, #200]	; (8005720 <USB_SetTurnaroundTime+0x12c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d802      	bhi.n	8005660 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800565a:	230c      	movs	r3, #12
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e041      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a2f      	ldr	r2, [pc, #188]	; (8005720 <USB_SetTurnaroundTime+0x12c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d906      	bls.n	8005676 <USB_SetTurnaroundTime+0x82>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4a2e      	ldr	r2, [pc, #184]	; (8005724 <USB_SetTurnaroundTime+0x130>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d802      	bhi.n	8005676 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005670:	230b      	movs	r3, #11
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e036      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a2a      	ldr	r2, [pc, #168]	; (8005724 <USB_SetTurnaroundTime+0x130>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d906      	bls.n	800568c <USB_SetTurnaroundTime+0x98>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4a29      	ldr	r2, [pc, #164]	; (8005728 <USB_SetTurnaroundTime+0x134>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d802      	bhi.n	800568c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005686:	230a      	movs	r3, #10
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e02b      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a26      	ldr	r2, [pc, #152]	; (8005728 <USB_SetTurnaroundTime+0x134>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d906      	bls.n	80056a2 <USB_SetTurnaroundTime+0xae>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4a25      	ldr	r2, [pc, #148]	; (800572c <USB_SetTurnaroundTime+0x138>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d202      	bcs.n	80056a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800569c:	2309      	movs	r3, #9
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e020      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a21      	ldr	r2, [pc, #132]	; (800572c <USB_SetTurnaroundTime+0x138>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d306      	bcc.n	80056b8 <USB_SetTurnaroundTime+0xc4>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4a20      	ldr	r2, [pc, #128]	; (8005730 <USB_SetTurnaroundTime+0x13c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d802      	bhi.n	80056b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056b2:	2308      	movs	r3, #8
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e015      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <USB_SetTurnaroundTime+0x13c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d906      	bls.n	80056ce <USB_SetTurnaroundTime+0xda>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <USB_SetTurnaroundTime+0x140>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d202      	bcs.n	80056ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056c8:	2307      	movs	r3, #7
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e00a      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056ce:	2306      	movs	r3, #6
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e007      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056da:	2309      	movs	r3, #9
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e001      	b.n	80056e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056e0:	2309      	movs	r3, #9
 80056e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	00d8acbf 	.word	0x00d8acbf
 8005714:	00e4e1c0 	.word	0x00e4e1c0
 8005718:	00f42400 	.word	0x00f42400
 800571c:	01067380 	.word	0x01067380
 8005720:	011a499f 	.word	0x011a499f
 8005724:	01312cff 	.word	0x01312cff
 8005728:	014ca43f 	.word	0x014ca43f
 800572c:	016e3600 	.word	0x016e3600
 8005730:	01a6ab1f 	.word	0x01a6ab1f
 8005734:	01e84800 	.word	0x01e84800

08005738 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d115      	bne.n	80057ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057aa:	2001      	movs	r0, #1
 80057ac:	f7fc f9cc 	bl	8001b48 <HAL_Delay>
      ms++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fa45 	bl	8006c46 <USB_GetMode>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d01e      	beq.n	8005800 <USB_SetCurrentMode+0x84>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b31      	cmp	r3, #49	; 0x31
 80057c6:	d9f0      	bls.n	80057aa <USB_SetCurrentMode+0x2e>
 80057c8:	e01a      	b.n	8005800 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d115      	bne.n	80057fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057dc:	2001      	movs	r0, #1
 80057de:	f7fc f9b3 	bl	8001b48 <HAL_Delay>
      ms++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fa2c 	bl	8006c46 <USB_GetMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <USB_SetCurrentMode+0x84>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b31      	cmp	r3, #49	; 0x31
 80057f8:	d9f0      	bls.n	80057dc <USB_SetCurrentMode+0x60>
 80057fa:	e001      	b.n	8005800 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e005      	b.n	800580c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b32      	cmp	r3, #50	; 0x32
 8005804:	d101      	bne.n	800580a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005814:	b084      	sub	sp, #16
 8005816:	b580      	push	{r7, lr}
 8005818:	b086      	sub	sp, #24
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e009      	b.n	8005848 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	3340      	adds	r3, #64	; 0x40
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3301      	adds	r3, #1
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	2b0e      	cmp	r3, #14
 800584c:	d9f2      	bls.n	8005834 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11c      	bne.n	800588e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	; 0x38
 800588c:	e00b      	b.n	80058a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b8:	4619      	mov	r1, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	461a      	mov	r2, r3
 80058c2:	680b      	ldr	r3, [r1, #0]
 80058c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d10c      	bne.n	80058e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058d2:	2100      	movs	r1, #0
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f965 	bl	8005ba4 <USB_SetDevSpeed>
 80058da:	e008      	b.n	80058ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058dc:	2101      	movs	r1, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f960 	bl	8005ba4 <USB_SetDevSpeed>
 80058e4:	e003      	b.n	80058ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058e6:	2103      	movs	r1, #3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f95b 	bl	8005ba4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058ee:	2110      	movs	r1, #16
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f8f3 	bl	8005adc <USB_FlushTxFifo>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f91f 	bl	8005b44 <USB_FlushRxFifo>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	461a      	mov	r2, r3
 8005918:	2300      	movs	r3, #0
 800591a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	461a      	mov	r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	461a      	mov	r2, r3
 8005930:	2300      	movs	r3, #0
 8005932:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e043      	b.n	80059c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800594c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005950:	d118      	bne.n	8005984 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	461a      	mov	r2, r3
 8005966:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e013      	b.n	8005996 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	461a      	mov	r2, r3
 800597c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e008      	b.n	8005996 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	461a      	mov	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	461a      	mov	r2, r3
 80059b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3301      	adds	r3, #1
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3b7      	bcc.n	800593a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	e043      	b.n	8005a58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e6:	d118      	bne.n	8005a1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	461a      	mov	r2, r3
 80059fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e013      	b.n	8005a2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	461a      	mov	r2, r3
 8005a12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e008      	b.n	8005a2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	461a      	mov	r2, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	461a      	mov	r2, r3
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	3301      	adds	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d3b7      	bcc.n	80059d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f043 0210 	orr.w	r2, r3, #16
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <USB_DevInit+0x2c4>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f043 0208 	orr.w	r2, r3, #8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d107      	bne.n	8005ac8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac0:	f043 0304 	orr.w	r3, r3, #4
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad4:	b004      	add	sp, #16
 8005ad6:	4770      	bx	lr
 8005ad8:	803c3800 	.word	0x803c3800

08005adc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <USB_FlushTxFifo+0x64>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e01b      	b.n	8005b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	daf2      	bge.n	8005aea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	019b      	lsls	r3, r3, #6
 8005b0c:	f043 0220 	orr.w	r2, r3, #32
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <USB_FlushTxFifo+0x64>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e006      	b.n	8005b34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d0f0      	beq.n	8005b14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	00030d40 	.word	0x00030d40

08005b44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3301      	adds	r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4a11      	ldr	r2, [pc, #68]	; (8005ba0 <USB_FlushRxFifo+0x5c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e018      	b.n	8005b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	daf2      	bge.n	8005b50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2210      	movs	r2, #16
 8005b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <USB_FlushRxFifo+0x5c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e006      	b.n	8005b94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d0f0      	beq.n	8005b74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	00030d40 	.word	0x00030d40

08005ba4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b087      	sub	sp, #28
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0306 	and.w	r3, r3, #6
 8005bee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d102      	bne.n	8005bfc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]
 8005bfa:	e00a      	b.n	8005c12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d002      	beq.n	8005c08 <USB_GetDevSpeed+0x32>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b06      	cmp	r3, #6
 8005c06:	d102      	bne.n	8005c0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	75fb      	strb	r3, [r7, #23]
 8005c0c:	e001      	b.n	8005c12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c0e:	230f      	movs	r3, #15
 8005c10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d13a      	bne.n	8005cb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d155      	bne.n	8005d20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	791b      	ldrb	r3, [r3, #4]
 8005c8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	059b      	lsls	r3, r3, #22
 8005c96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	e036      	b.n	8005d20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d11a      	bne.n	8005d20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	791b      	ldrb	r3, [r3, #4]
 8005d04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d06:	430b      	orrs	r3, r1
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d161      	bne.n	8005e10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d62:	d11f      	bne.n	8005da4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	f003 030f 	and.w	r3, r3, #15
 8005dd8:	2101      	movs	r1, #1
 8005dda:	fa01 f303 	lsl.w	r3, r1, r3
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	43db      	mvns	r3, r3
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de8:	4013      	ands	r3, r2
 8005dea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	0159      	lsls	r1, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	440b      	add	r3, r1
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	4619      	mov	r1, r3
 8005e08:	4b35      	ldr	r3, [pc, #212]	; (8005ee0 <USB_DeactivateEndpoint+0x1b0>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	600b      	str	r3, [r1, #0]
 8005e0e:	e060      	b.n	8005ed2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e26:	d11f      	bne.n	8005e68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	0151      	lsls	r1, r2, #5
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	440a      	add	r2, r1
 8005e5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2101      	movs	r1, #1
 8005e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	43db      	mvns	r3, r3
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e88:	4013      	ands	r3, r2
 8005e8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eac:	4013      	ands	r3, r2
 8005eae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	0159      	lsls	r1, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	440b      	add	r3, r1
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <USB_DeactivateEndpoint+0x1b4>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	ec337800 	.word	0xec337800
 8005ee4:	eff37800 	.word	0xeff37800

08005ee8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	; 0x28
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	f040 815c 	bne.w	80061c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d132      	bne.n	8005f78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	69fa      	ldr	r2, [r7, #28]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	0cdb      	lsrs	r3, r3, #19
 8005f72:	04db      	lsls	r3, r3, #19
 8005f74:	6113      	str	r3, [r2, #16]
 8005f76:	e074      	b.n	8006062 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f92:	0cdb      	lsrs	r3, r3, #19
 8005f94:	04db      	lsls	r3, r3, #19
 8005f96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6999      	ldr	r1, [r3, #24]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	440b      	add	r3, r1
 8005fd4:	1e59      	subs	r1, r3, #1
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fde:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005fe0:	4b9d      	ldr	r3, [pc, #628]	; (8006258 <USB_EPStartXfer+0x370>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	69b9      	ldr	r1, [r7, #24]
 8005fe6:	0148      	lsls	r0, r1, #5
 8005fe8:	69f9      	ldr	r1, [r7, #28]
 8005fea:	4401      	add	r1, r0
 8005fec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600a:	69b9      	ldr	r1, [r7, #24]
 800600c:	0148      	lsls	r0, r1, #5
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	4401      	add	r1, r0
 8006012:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006016:	4313      	orrs	r3, r2
 8006018:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	791b      	ldrb	r3, [r3, #4]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d11f      	bne.n	8006062 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006040:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006060:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d14b      	bne.n	8006100 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	461a      	mov	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d128      	bne.n	80060de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d110      	bne.n	80060be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e00f      	b.n	80060de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e133      	b.n	8006368 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800611e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d015      	beq.n	8006154 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 811b 	beq.w	8006368 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	69f9      	ldr	r1, [r7, #28]
 800614a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614e:	4313      	orrs	r3, r2
 8006150:	634b      	str	r3, [r1, #52]	; 0x34
 8006152:	e109      	b.n	8006368 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006160:	2b00      	cmp	r3, #0
 8006162:	d110      	bne.n	8006186 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	0151      	lsls	r1, r2, #5
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	440a      	add	r2, r1
 800617a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e00f      	b.n	80061a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6919      	ldr	r1, [r3, #16]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	b298      	uxth	r0, r3
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fade 	bl	800677c <USB_WritePacket>
 80061c0:	e0d2      	b.n	8006368 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061dc:	0cdb      	lsrs	r3, r3, #19
 80061de:	04db      	lsls	r3, r3, #19
 80061e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006200:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006204:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d126      	bne.n	800625c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006224:	69b9      	ldr	r1, [r7, #24]
 8006226:	0148      	lsls	r0, r1, #5
 8006228:	69f9      	ldr	r1, [r7, #28]
 800622a:	4401      	add	r1, r0
 800622c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006230:	4313      	orrs	r3, r2
 8006232:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006252:	6113      	str	r3, [r2, #16]
 8006254:	e03a      	b.n	80062cc <USB_EPStartXfer+0x3e4>
 8006256:	bf00      	nop
 8006258:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	699a      	ldr	r2, [r3, #24]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	4413      	add	r3, r2
 8006266:	1e5a      	subs	r2, r3, #1
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	8afa      	ldrh	r2, [r7, #22]
 8006278:	fb03 f202 	mul.w	r2, r3, r2
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	8afb      	ldrh	r3, [r7, #22]
 8006290:	04d9      	lsls	r1, r3, #19
 8006292:	4b38      	ldr	r3, [pc, #224]	; (8006374 <USB_EPStartXfer+0x48c>)
 8006294:	400b      	ands	r3, r1
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	0148      	lsls	r0, r1, #5
 800629a:	69f9      	ldr	r1, [r7, #28]
 800629c:	4401      	add	r1, r0
 800629e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a2:	4313      	orrs	r3, r2
 80062a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	0148      	lsls	r0, r1, #5
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	4401      	add	r1, r0
 80062c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062c8:	4313      	orrs	r3, r2
 80062ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d10d      	bne.n	80062ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6919      	ldr	r1, [r3, #16]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	460a      	mov	r2, r1
 80062ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	791b      	ldrb	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d128      	bne.n	8006348 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d110      	bne.n	8006328 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006320:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e00f      	b.n	8006348 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006346:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006366:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3720      	adds	r7, #32
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	1ff80000 	.word	0x1ff80000

08006378 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	4613      	mov	r3, r2
 8006384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 80ce 	bne.w	8006536 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d132      	bne.n	8006408 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006400:	0cdb      	lsrs	r3, r3, #19
 8006402:	04db      	lsls	r3, r3, #19
 8006404:	6113      	str	r3, [r2, #16]
 8006406:	e04e      	b.n	80064a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006422:	0cdb      	lsrs	r3, r3, #19
 8006424:	04db      	lsls	r3, r3, #19
 8006426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006442:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006446:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800644a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	429a      	cmp	r2, r3
 8006456:	d903      	bls.n	8006460 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800647e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006496:	6939      	ldr	r1, [r7, #16]
 8006498:	0148      	lsls	r0, r1, #5
 800649a:	6979      	ldr	r1, [r7, #20]
 800649c:	4401      	add	r1, r0
 800649e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064a2:	4313      	orrs	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064a6:	79fb      	ldrb	r3, [r7, #7]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d11e      	bne.n	80064ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d009      	beq.n	80064c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	461a      	mov	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	e097      	b.n	800661a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006504:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006508:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 8083 	beq.w	800661a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	2101      	movs	r1, #1
 8006526:	fa01 f303 	lsl.w	r3, r1, r3
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006530:	4313      	orrs	r3, r2
 8006532:	634b      	str	r3, [r1, #52]	; 0x34
 8006534:	e071      	b.n	800661a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006550:	0cdb      	lsrs	r3, r3, #19
 8006552:	04db      	lsls	r3, r3, #19
 8006554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006578:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c8:	6939      	ldr	r1, [r7, #16]
 80065ca:	0148      	lsls	r0, r1, #5
 80065cc:	6979      	ldr	r1, [r7, #20]
 80065ce:	4401      	add	r1, r0
 80065d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065d4:	4313      	orrs	r3, r2
 80065d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d10d      	bne.n	80065fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d009      	beq.n	80065fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6919      	ldr	r1, [r3, #16]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	460a      	mov	r2, r1
 80065f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006618:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d14a      	bne.n	80066dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800665a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665e:	f040 8086 	bne.w	800676e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006680:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006684:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d902      	bls.n	80066c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
          break;
 80066be:	e056      	b.n	800676e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d8:	d0e7      	beq.n	80066aa <USB_EPStopXfer+0x82>
 80066da:	e048      	b.n	800676e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f4:	d13b      	bne.n	800676e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006718:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f242 7210 	movw	r2, #10000	; 0x2710
 800674a:	4293      	cmp	r3, r2
 800674c:	d902      	bls.n	8006754 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	75fb      	strb	r3, [r7, #23]
          break;
 8006752:	e00c      	b.n	800676e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800676c:	d0e7      	beq.n	800673e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800677c:	b480      	push	{r7}
 800677e:	b089      	sub	sp, #36	; 0x24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4611      	mov	r1, r2
 8006788:	461a      	mov	r2, r3
 800678a:	460b      	mov	r3, r1
 800678c:	71fb      	strb	r3, [r7, #7]
 800678e:	4613      	mov	r3, r2
 8006790:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800679a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d123      	bne.n	80067ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067a2:	88bb      	ldrh	r3, [r7, #4]
 80067a4:	3303      	adds	r3, #3
 80067a6:	089b      	lsrs	r3, r3, #2
 80067a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e018      	b.n	80067e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	031a      	lsls	r2, r3, #12
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067bc:	461a      	mov	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	3301      	adds	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3301      	adds	r3, #1
 80067ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3301      	adds	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	3301      	adds	r3, #1
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d3e2      	bcc.n	80067b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3724      	adds	r7, #36	; 0x24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b08b      	sub	sp, #44	; 0x2c
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	b29b      	uxth	r3, r3
 8006814:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	e014      	b.n	800684e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	3301      	adds	r3, #1
 8006834:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	3301      	adds	r3, #1
 800683a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	3301      	adds	r3, #1
 8006840:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	3301      	adds	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	3301      	adds	r3, #1
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	429a      	cmp	r2, r3
 8006854:	d3e6      	bcc.n	8006824 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006856:	8bfb      	ldrh	r3, [r7, #30]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01e      	beq.n	800689a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	461a      	mov	r2, r3
 8006868:	f107 0310 	add.w	r3, r7, #16
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	b2da      	uxtb	r2, r3
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	701a      	strb	r2, [r3, #0]
      i++;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	3301      	adds	r3, #1
 8006886:	623b      	str	r3, [r7, #32]
      pDest++;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	3301      	adds	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	3b01      	subs	r3, #1
 8006892:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006894:	8bfb      	ldrh	r3, [r7, #30]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ea      	bne.n	8006870 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800689c:	4618      	mov	r0, r3
 800689e:	372c      	adds	r7, #44	; 0x2c
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d12c      	bne.n	800691e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	db12      	blt.n	80068fc <USB_EPSetStall+0x54>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00f      	beq.n	80068fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	e02b      	b.n	8006976 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	db12      	blt.n	8006956 <USB_EPSetStall+0xae>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006950:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006954:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006974:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d128      	bne.n	80069f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	791b      	ldrb	r3, [r3, #4]
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d003      	beq.n	80069d0 <USB_EPClearStall+0x4c>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	791b      	ldrb	r3, [r3, #4]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d138      	bne.n	8006a42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	e027      	b.n	8006a42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d003      	beq.n	8006a22 <USB_EPClearStall+0x9e>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d10f      	bne.n	8006a42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aca:	f023 0302 	bic.w	r3, r3, #2
 8006ace:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006af8:	f023 0303 	bic.w	r3, r3, #3
 8006afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b38:	68fb      	ldr	r3, [r7, #12]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	b29b      	uxth	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b087      	sub	sp, #28
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4013      	ands	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c38:	68bb      	ldr	r3, [r7, #8]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0301 	and.w	r3, r3, #1
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c80:	f023 0307 	bic.w	r3, r3, #7
 8006c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	333c      	adds	r3, #60	; 0x3c
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4a26      	ldr	r2, [pc, #152]	; (8006d60 <USB_EP0_OutStart+0xb8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d90a      	bls.n	8006ce2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cdc:	d101      	bne.n	8006ce2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e037      	b.n	8006d52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	461a      	mov	r2, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d10:	f043 0318 	orr.w	r3, r3, #24
 8006d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10f      	bne.n	8006d50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	4f54300a 	.word	0x4f54300a

08006d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <USB_CoreReset+0x64>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e01b      	b.n	8006dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	daf2      	bge.n	8006d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f043 0201 	orr.w	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a09      	ldr	r2, [pc, #36]	; (8006dc8 <USB_CoreReset+0x64>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e006      	b.n	8006dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d0f0      	beq.n	8006d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	00030d40 	.word	0x00030d40

08006dcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006dd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ddc:	f002 fc8a 	bl	80096f4 <USBD_static_malloc>
 8006de0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32b0      	adds	r2, #176	; 0xb0
 8006df2:	2100      	movs	r1, #0
 8006df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e0d4      	b.n	8006fa6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006dfc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e00:	2100      	movs	r1, #0
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f002 fce4 	bl	80097d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32b0      	adds	r2, #176	; 0xb0
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32b0      	adds	r2, #176	; 0xb0
 8006e22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7c1b      	ldrb	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d138      	bne.n	8006ea6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e34:	4b5e      	ldr	r3, [pc, #376]	; (8006fb0 <USBD_CDC_Init+0x1e4>)
 8006e36:	7819      	ldrb	r1, [r3, #0]
 8006e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f002 fb35 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e44:	4b5a      	ldr	r3, [pc, #360]	; (8006fb0 <USBD_CDC_Init+0x1e4>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	3324      	adds	r3, #36	; 0x24
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e5e:	4b55      	ldr	r3, [pc, #340]	; (8006fb4 <USBD_CDC_Init+0x1e8>)
 8006e60:	7819      	ldrb	r1, [r3, #0]
 8006e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e66:	2202      	movs	r2, #2
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f002 fb20 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e6e:	4b51      	ldr	r3, [pc, #324]	; (8006fb4 <USBD_CDC_Init+0x1e8>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 020f 	and.w	r2, r3, #15
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e86:	2201      	movs	r2, #1
 8006e88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e8a:	4b4b      	ldr	r3, [pc, #300]	; (8006fb8 <USBD_CDC_Init+0x1ec>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	f003 020f 	and.w	r2, r3, #15
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	3326      	adds	r3, #38	; 0x26
 8006ea0:	2210      	movs	r2, #16
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e035      	b.n	8006f12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ea6:	4b42      	ldr	r3, [pc, #264]	; (8006fb0 <USBD_CDC_Init+0x1e4>)
 8006ea8:	7819      	ldrb	r1, [r3, #0]
 8006eaa:	2340      	movs	r3, #64	; 0x40
 8006eac:	2202      	movs	r2, #2
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f002 fafd 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eb4:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <USBD_CDC_Init+0x1e4>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 020f 	and.w	r2, r3, #15
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	3324      	adds	r3, #36	; 0x24
 8006eca:	2201      	movs	r2, #1
 8006ecc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ece:	4b39      	ldr	r3, [pc, #228]	; (8006fb4 <USBD_CDC_Init+0x1e8>)
 8006ed0:	7819      	ldrb	r1, [r3, #0]
 8006ed2:	2340      	movs	r3, #64	; 0x40
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 fae9 	bl	80094ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006edc:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <USBD_CDC_Init+0x1e8>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ef8:	4b2f      	ldr	r3, [pc, #188]	; (8006fb8 <USBD_CDC_Init+0x1ec>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 020f 	and.w	r2, r3, #15
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3326      	adds	r3, #38	; 0x26
 8006f0e:	2210      	movs	r2, #16
 8006f10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f12:	4b29      	ldr	r3, [pc, #164]	; (8006fb8 <USBD_CDC_Init+0x1ec>)
 8006f14:	7819      	ldrb	r1, [r3, #0]
 8006f16:	2308      	movs	r3, #8
 8006f18:	2203      	movs	r2, #3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 fac7 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <USBD_CDC_Init+0x1ec>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	2201      	movs	r2, #1
 8006f38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	33b0      	adds	r3, #176	; 0xb0
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f70:	2302      	movs	r3, #2
 8006f72:	e018      	b.n	8006fa6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7c1b      	ldrb	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10a      	bne.n	8006f92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f7c:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <USBD_CDC_Init+0x1e8>)
 8006f7e:	7819      	ldrb	r1, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f002 fb7e 	bl	800968c <USBD_LL_PrepareReceive>
 8006f90:	e008      	b.n	8006fa4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <USBD_CDC_Init+0x1e8>)
 8006f94:	7819      	ldrb	r1, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f002 fb74 	bl	800968c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000093 	.word	0x20000093
 8006fb4:	20000094 	.word	0x20000094
 8006fb8:	20000095 	.word	0x20000095

08006fbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006fc8:	4b3a      	ldr	r3, [pc, #232]	; (80070b4 <USBD_CDC_DeInit+0xf8>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f002 fa93 	bl	80094fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fd4:	4b37      	ldr	r3, [pc, #220]	; (80070b4 <USBD_CDC_DeInit+0xf8>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3324      	adds	r3, #36	; 0x24
 8006fea:	2200      	movs	r2, #0
 8006fec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fee:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <USBD_CDC_DeInit+0xfc>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f002 fa80 	bl	80094fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ffa:	4b2f      	ldr	r3, [pc, #188]	; (80070b8 <USBD_CDC_DeInit+0xfc>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	f003 020f 	and.w	r2, r3, #15
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007012:	2200      	movs	r2, #0
 8007014:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007016:	4b29      	ldr	r3, [pc, #164]	; (80070bc <USBD_CDC_DeInit+0x100>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f002 fa6c 	bl	80094fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <USBD_CDC_DeInit+0x100>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	f003 020f 	and.w	r2, r3, #15
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	3324      	adds	r3, #36	; 0x24
 8007038:	2200      	movs	r2, #0
 800703a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800703c:	4b1f      	ldr	r3, [pc, #124]	; (80070bc <USBD_CDC_DeInit+0x100>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 020f 	and.w	r2, r3, #15
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	440b      	add	r3, r1
 8007050:	3326      	adds	r3, #38	; 0x26
 8007052:	2200      	movs	r2, #0
 8007054:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	32b0      	adds	r2, #176	; 0xb0
 8007060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01f      	beq.n	80070a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	33b0      	adds	r3, #176	; 0xb0
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	32b0      	adds	r2, #176	; 0xb0
 8007086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708a:	4618      	mov	r0, r3
 800708c:	f002 fb40 	bl	8009710 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32b0      	adds	r2, #176	; 0xb0
 800709a:	2100      	movs	r1, #0
 800709c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000093 	.word	0x20000093
 80070b8:	20000094 	.word	0x20000094
 80070bc:	20000095 	.word	0x20000095

080070c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	32b0      	adds	r2, #176	; 0xb0
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e0bf      	b.n	8007270 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d050      	beq.n	800719e <USBD_CDC_Setup+0xde>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	f040 80af 	bne.w	8007260 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d03a      	beq.n	8007180 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b25b      	sxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	da1b      	bge.n	800714c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	33b0      	adds	r3, #176	; 0xb0
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800712a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	88d2      	ldrh	r2, [r2, #6]
 8007130:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88db      	ldrh	r3, [r3, #6]
 8007136:	2b07      	cmp	r3, #7
 8007138:	bf28      	it	cs
 800713a:	2307      	movcs	r3, #7
 800713c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	89fa      	ldrh	r2, [r7, #14]
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fd89 	bl	8008c5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800714a:	e090      	b.n	800726e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	785a      	ldrb	r2, [r3, #1]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	2b3f      	cmp	r3, #63	; 0x3f
 800715c:	d803      	bhi.n	8007166 <USBD_CDC_Setup+0xa6>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	e000      	b.n	8007168 <USBD_CDC_Setup+0xa8>
 8007166:	2240      	movs	r2, #64	; 0x40
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800716e:	6939      	ldr	r1, [r7, #16]
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007176:	461a      	mov	r2, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fd9b 	bl	8008cb4 <USBD_CtlPrepareRx>
      break;
 800717e:	e076      	b.n	800726e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	33b0      	adds	r3, #176	; 0xb0
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	7850      	ldrb	r0, [r2, #1]
 8007196:	2200      	movs	r2, #0
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	4798      	blx	r3
      break;
 800719c:	e067      	b.n	800726e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	785b      	ldrb	r3, [r3, #1]
 80071a2:	2b0b      	cmp	r3, #11
 80071a4:	d851      	bhi.n	800724a <USBD_CDC_Setup+0x18a>
 80071a6:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_CDC_Setup+0xec>)
 80071a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	08007259 	.word	0x08007259
 80071b4:	0800724b 	.word	0x0800724b
 80071b8:	0800724b 	.word	0x0800724b
 80071bc:	0800724b 	.word	0x0800724b
 80071c0:	0800724b 	.word	0x0800724b
 80071c4:	0800724b 	.word	0x0800724b
 80071c8:	0800724b 	.word	0x0800724b
 80071cc:	0800724b 	.word	0x0800724b
 80071d0:	0800724b 	.word	0x0800724b
 80071d4:	08007207 	.word	0x08007207
 80071d8:	08007231 	.word	0x08007231
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d107      	bne.n	80071f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071e8:	f107 030a 	add.w	r3, r7, #10
 80071ec:	2202      	movs	r2, #2
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fd33 	bl	8008c5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071f6:	e032      	b.n	800725e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 fcbd 	bl	8008b7a <USBD_CtlError>
            ret = USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	75fb      	strb	r3, [r7, #23]
          break;
 8007204:	e02b      	b.n	800725e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b03      	cmp	r3, #3
 8007210:	d107      	bne.n	8007222 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007212:	f107 030d 	add.w	r3, r7, #13
 8007216:	2201      	movs	r2, #1
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fd1e 	bl	8008c5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007220:	e01d      	b.n	800725e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 fca8 	bl	8008b7a <USBD_CtlError>
            ret = USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	75fb      	strb	r3, [r7, #23]
          break;
 800722e:	e016      	b.n	800725e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b03      	cmp	r3, #3
 800723a:	d00f      	beq.n	800725c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fc9b 	bl	8008b7a <USBD_CtlError>
            ret = USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007248:	e008      	b.n	800725c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fc94 	bl	8008b7a <USBD_CtlError>
          ret = USBD_FAIL;
 8007252:	2303      	movs	r3, #3
 8007254:	75fb      	strb	r3, [r7, #23]
          break;
 8007256:	e002      	b.n	800725e <USBD_CDC_Setup+0x19e>
          break;
 8007258:	bf00      	nop
 800725a:	e008      	b.n	800726e <USBD_CDC_Setup+0x1ae>
          break;
 800725c:	bf00      	nop
      }
      break;
 800725e:	e006      	b.n	800726e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fc89 	bl	8008b7a <USBD_CtlError>
      ret = USBD_FAIL;
 8007268:	2303      	movs	r3, #3
 800726a:	75fb      	strb	r3, [r7, #23]
      break;
 800726c:	bf00      	nop
  }

  return (uint8_t)ret;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800728a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	32b0      	adds	r2, #176	; 0xb0
 8007296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800729e:	2303      	movs	r3, #3
 80072a0:	e065      	b.n	800736e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32b0      	adds	r2, #176	; 0xb0
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	f003 020f 	and.w	r2, r3, #15
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	3318      	adds	r3, #24
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d02f      	beq.n	800732c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072cc:	78fb      	ldrb	r3, [r7, #3]
 80072ce:	f003 020f 	and.w	r2, r3, #15
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	440b      	add	r3, r1
 80072de:	3318      	adds	r3, #24
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f003 010f 	and.w	r1, r3, #15
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	460b      	mov	r3, r1
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	440b      	add	r3, r1
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4403      	add	r3, r0
 80072f4:	3348      	adds	r3, #72	; 0x48
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007302:	2b00      	cmp	r3, #0
 8007304:	d112      	bne.n	800732c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	f003 020f 	and.w	r2, r3, #15
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	3318      	adds	r3, #24
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800731e:	78f9      	ldrb	r1, [r7, #3]
 8007320:	2300      	movs	r3, #0
 8007322:	2200      	movs	r2, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f002 f990 	bl	800964a <USBD_LL_Transmit>
 800732a:	e01f      	b.n	800736c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	33b0      	adds	r3, #176	; 0xb0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d010      	beq.n	800736c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	33b0      	adds	r3, #176	; 0xb0
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	32b0      	adds	r2, #176	; 0xb0
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	32b0      	adds	r2, #176	; 0xb0
 800739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e01a      	b.n	80073de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f002 f98e 	bl	80096ce <USBD_LL_GetRxDataSize>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	33b0      	adds	r3, #176	; 0xb0
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073d8:	4611      	mov	r1, r2
 80073da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	32b0      	adds	r2, #176	; 0xb0
 80073f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007404:	2303      	movs	r3, #3
 8007406:	e025      	b.n	8007454 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	33b0      	adds	r3, #176	; 0xb0
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01a      	beq.n	8007452 <USBD_CDC_EP0_RxReady+0x6c>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007422:	2bff      	cmp	r3, #255	; 0xff
 8007424:	d015      	beq.n	8007452 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	33b0      	adds	r3, #176	; 0xb0
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800743e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007446:	b292      	uxth	r2, r2
 8007448:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	22ff      	movs	r2, #255	; 0xff
 800744e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007464:	2182      	movs	r1, #130	; 0x82
 8007466:	4818      	ldr	r0, [pc, #96]	; (80074c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007468:	f000 fd4f 	bl	8007f0a <USBD_GetEpDesc>
 800746c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800746e:	2101      	movs	r1, #1
 8007470:	4815      	ldr	r0, [pc, #84]	; (80074c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007472:	f000 fd4a 	bl	8007f0a <USBD_GetEpDesc>
 8007476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007478:	2181      	movs	r1, #129	; 0x81
 800747a:	4813      	ldr	r0, [pc, #76]	; (80074c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800747c:	f000 fd45 	bl	8007f0a <USBD_GetEpDesc>
 8007480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2210      	movs	r2, #16
 800748c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d006      	beq.n	80074a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2200      	movs	r2, #0
 8007498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800749c:	711a      	strb	r2, [r3, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d006      	beq.n	80074b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b0:	711a      	strb	r2, [r3, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2243      	movs	r2, #67	; 0x43
 80074ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20000050 	.word	0x20000050

080074cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074d4:	2182      	movs	r1, #130	; 0x82
 80074d6:	4818      	ldr	r0, [pc, #96]	; (8007538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074d8:	f000 fd17 	bl	8007f0a <USBD_GetEpDesc>
 80074dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074de:	2101      	movs	r1, #1
 80074e0:	4815      	ldr	r0, [pc, #84]	; (8007538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074e2:	f000 fd12 	bl	8007f0a <USBD_GetEpDesc>
 80074e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e8:	2181      	movs	r1, #129	; 0x81
 80074ea:	4813      	ldr	r0, [pc, #76]	; (8007538 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074ec:	f000 fd0d 	bl	8007f0a <USBD_GetEpDesc>
 80074f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2210      	movs	r2, #16
 80074fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d006      	beq.n	8007512 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2200      	movs	r2, #0
 8007508:	711a      	strb	r2, [r3, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f042 0202 	orr.w	r2, r2, #2
 8007510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	711a      	strb	r2, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f042 0202 	orr.w	r2, r2, #2
 8007524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2243      	movs	r2, #67	; 0x43
 800752a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000050 	.word	0x20000050

0800753c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007544:	2182      	movs	r1, #130	; 0x82
 8007546:	4818      	ldr	r0, [pc, #96]	; (80075a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007548:	f000 fcdf 	bl	8007f0a <USBD_GetEpDesc>
 800754c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800754e:	2101      	movs	r1, #1
 8007550:	4815      	ldr	r0, [pc, #84]	; (80075a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007552:	f000 fcda 	bl	8007f0a <USBD_GetEpDesc>
 8007556:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007558:	2181      	movs	r1, #129	; 0x81
 800755a:	4813      	ldr	r0, [pc, #76]	; (80075a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800755c:	f000 fcd5 	bl	8007f0a <USBD_GetEpDesc>
 8007560:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2210      	movs	r2, #16
 800756c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d006      	beq.n	8007582 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2200      	movs	r2, #0
 8007578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800757c:	711a      	strb	r2, [r3, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d006      	beq.n	8007596 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007590:	711a      	strb	r2, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2243      	movs	r2, #67	; 0x43
 800759a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800759c:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20000050 	.word	0x20000050

080075ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	220a      	movs	r2, #10
 80075b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075ba:	4b03      	ldr	r3, [pc, #12]	; (80075c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	2000000c 	.word	0x2000000c

080075cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075dc:	2303      	movs	r3, #3
 80075de:	e009      	b.n	80075f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	33b0      	adds	r3, #176	; 0xb0
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	32b0      	adds	r2, #176	; 0xb0
 8007616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007622:	2303      	movs	r3, #3
 8007624:	e008      	b.n	8007638 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	32b0      	adds	r2, #176	; 0xb0
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	e004      	b.n	8007672 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32b0      	adds	r2, #176	; 0xb0
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32b0      	adds	r2, #176	; 0xb0
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e025      	b.n	80076fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d11f      	bne.n	80076fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076c4:	4b10      	ldr	r3, [pc, #64]	; (8007708 <USBD_CDC_TransmitPacket+0x88>)
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4403      	add	r3, r0
 80076de:	3318      	adds	r3, #24
 80076e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076e2:	4b09      	ldr	r3, [pc, #36]	; (8007708 <USBD_CDC_TransmitPacket+0x88>)
 80076e4:	7819      	ldrb	r1, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 ffa9 	bl	800964a <USBD_LL_Transmit>

    ret = USBD_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20000093 	.word	0x20000093

0800770c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	32b0      	adds	r2, #176	; 0xb0
 800771e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007722:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32b0      	adds	r2, #176	; 0xb0
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007736:	2303      	movs	r3, #3
 8007738:	e018      	b.n	800776c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7c1b      	ldrb	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <USBD_CDC_ReceivePacket+0x68>)
 8007744:	7819      	ldrb	r1, [r3, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800774c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 ff9b 	bl	800968c <USBD_LL_PrepareReceive>
 8007756:	e008      	b.n	800776a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <USBD_CDC_ReceivePacket+0x68>)
 800775a:	7819      	ldrb	r1, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007762:	2340      	movs	r3, #64	; 0x40
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 ff91 	bl	800968c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000094 	.word	0x20000094

08007778 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800778c:	2303      	movs	r3, #3
 800778e:	e01f      	b.n	80077d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	79fa      	ldrb	r2, [r7, #7]
 80077c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f001 fe0b 	bl	80093e0 <USBD_LL_Init>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e025      	b.n	800783c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32ae      	adds	r2, #174	; 0xae
 8007802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	32ae      	adds	r2, #174	; 0xae
 8007816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	f107 020e 	add.w	r2, r7, #14
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	4602      	mov	r2, r0
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fe13 	bl	8009478 <USBD_LL_Start>
 8007852:	4603      	mov	r3, r0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007866:	4618      	mov	r0, r3
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	78fa      	ldrb	r2, [r7, #3]
 8007896:	4611      	mov	r1, r2
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	4611      	mov	r1, r2
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078d0:	2303      	movs	r3, #3
 80078d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f001 f908 	bl	8008b06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007904:	461a      	mov	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007912:	f003 031f 	and.w	r3, r3, #31
 8007916:	2b02      	cmp	r3, #2
 8007918:	d01a      	beq.n	8007950 <USBD_LL_SetupStage+0x72>
 800791a:	2b02      	cmp	r3, #2
 800791c:	d822      	bhi.n	8007964 <USBD_LL_SetupStage+0x86>
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <USBD_LL_SetupStage+0x4a>
 8007922:	2b01      	cmp	r3, #1
 8007924:	d00a      	beq.n	800793c <USBD_LL_SetupStage+0x5e>
 8007926:	e01d      	b.n	8007964 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fb5f 	bl	8007ff4 <USBD_StdDevReq>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	e020      	b.n	800797e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fbc7 	bl	80080d8 <USBD_StdItfReq>
 800794a:	4603      	mov	r3, r0
 800794c:	73fb      	strb	r3, [r7, #15]
      break;
 800794e:	e016      	b.n	800797e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc29 	bl	80081b0 <USBD_StdEPReq>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]
      break;
 8007962:	e00c      	b.n	800797e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800796a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800796e:	b2db      	uxtb	r3, r3
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fde0 	bl	8009538 <USBD_LL_StallEP>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
      break;
 800797c:	bf00      	nop
  }

  return ret;
 800797e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	460b      	mov	r3, r1
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d16e      	bne.n	8007a7e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f040 8098 	bne.w	8007ae4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d913      	bls.n	80079e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	4293      	cmp	r3, r2
 80079d8:	bf28      	it	cs
 80079da:	4613      	movcs	r3, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f001 f984 	bl	8008cee <USBD_CtlContinueRx>
 80079e6:	e07d      	b.n	8007ae4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d014      	beq.n	8007a20 <USBD_LL_DataOutStage+0x98>
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d81d      	bhi.n	8007a36 <USBD_LL_DataOutStage+0xae>
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <USBD_LL_DataOutStage+0x7c>
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d003      	beq.n	8007a0a <USBD_LL_DataOutStage+0x82>
 8007a02:	e018      	b.n	8007a36 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	75bb      	strb	r3, [r7, #22]
            break;
 8007a08:	e018      	b.n	8007a3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 fa5e 	bl	8007ed6 <USBD_CoreFindIF>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75bb      	strb	r3, [r7, #22]
            break;
 8007a1e:	e00d      	b.n	8007a3c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	4619      	mov	r1, r3
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 fa60 	bl	8007ef0 <USBD_CoreFindEP>
 8007a30:	4603      	mov	r3, r0
 8007a32:	75bb      	strb	r3, [r7, #22]
            break;
 8007a34:	e002      	b.n	8007a3c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75bb      	strb	r3, [r7, #22]
            break;
 8007a3a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a3c:	7dbb      	ldrb	r3, [r7, #22]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d119      	bne.n	8007a76 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d113      	bne.n	8007a76 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a4e:	7dba      	ldrb	r2, [r7, #22]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	32ae      	adds	r2, #174	; 0xae
 8007a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a5e:	7dba      	ldrb	r2, [r7, #22]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a66:	7dba      	ldrb	r2, [r7, #22]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	32ae      	adds	r2, #174	; 0xae
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f001 f94a 	bl	8008d10 <USBD_CtlSendStatus>
 8007a7c:	e032      	b.n	8007ae4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	4619      	mov	r1, r3
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fa31 	bl	8007ef0 <USBD_CoreFindEP>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a92:	7dbb      	ldrb	r3, [r7, #22]
 8007a94:	2bff      	cmp	r3, #255	; 0xff
 8007a96:	d025      	beq.n	8007ae4 <USBD_LL_DataOutStage+0x15c>
 8007a98:	7dbb      	ldrb	r3, [r7, #22]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d122      	bne.n	8007ae4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d117      	bne.n	8007ada <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007aaa:	7dba      	ldrb	r2, [r7, #22]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	32ae      	adds	r2, #174	; 0xae
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00f      	beq.n	8007ada <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007aba:	7dba      	ldrb	r2, [r7, #22]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ac2:	7dba      	ldrb	r2, [r7, #22]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	32ae      	adds	r2, #174	; 0xae
 8007ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	7afa      	ldrb	r2, [r7, #11]
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	4798      	blx	r3
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	e000      	b.n	8007ae6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b086      	sub	sp, #24
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	460b      	mov	r3, r1
 8007af8:	607a      	str	r2, [r7, #4]
 8007afa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d16f      	bne.n	8007be2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3314      	adds	r3, #20
 8007b06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d15a      	bne.n	8007bc8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d914      	bls.n	8007b48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	1ad2      	subs	r2, r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 f8ac 	bl	8008c92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2100      	movs	r1, #0
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 fda3 	bl	800968c <USBD_LL_PrepareReceive>
 8007b46:	e03f      	b.n	8007bc8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d11c      	bne.n	8007b8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d316      	bcc.n	8007b8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d20f      	bcs.n	8007b8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2100      	movs	r1, #0
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f001 f88d 	bl	8008c92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b80:	2300      	movs	r3, #0
 8007b82:	2200      	movs	r2, #0
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 fd80 	bl	800968c <USBD_LL_PrepareReceive>
 8007b8c:	e01c      	b.n	8007bc8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d10f      	bne.n	8007bba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d009      	beq.n	8007bba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bba:	2180      	movs	r1, #128	; 0x80
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 fcbb 	bl	8009538 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f001 f8b7 	bl	8008d36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d03a      	beq.n	8007c48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fe42 	bl	800785c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007be0:	e032      	b.n	8007c48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007be2:	7afb      	ldrb	r3, [r7, #11]
 8007be4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	4619      	mov	r1, r3
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 f97f 	bl	8007ef0 <USBD_CoreFindEP>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	2bff      	cmp	r3, #255	; 0xff
 8007bfa:	d025      	beq.n	8007c48 <USBD_LL_DataInStage+0x15a>
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d122      	bne.n	8007c48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d11c      	bne.n	8007c48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c0e:	7dfa      	ldrb	r2, [r7, #23]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	32ae      	adds	r2, #174	; 0xae
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d014      	beq.n	8007c48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c1e:	7dfa      	ldrb	r2, [r7, #23]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c26:	7dfa      	ldrb	r2, [r7, #23]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	32ae      	adds	r2, #174	; 0xae
 8007c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	7afa      	ldrb	r2, [r7, #11]
 8007c34:	4611      	mov	r1, r2
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c3e:	7dbb      	ldrb	r3, [r7, #22]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c44:	7dbb      	ldrb	r3, [r7, #22]
 8007c46:	e000      	b.n	8007c4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d014      	beq.n	8007cb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6852      	ldr	r2, [r2, #4]
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	4611      	mov	r1, r2
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb8:	2340      	movs	r3, #64	; 0x40
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fbf5 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2240      	movs	r2, #64	; 0x40
 8007cd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2180      	movs	r1, #128	; 0x80
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fbe7 	bl	80094ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2240      	movs	r2, #64	; 0x40
 8007cea:	621a      	str	r2, [r3, #32]

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2204      	movs	r2, #4
 8007d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d106      	bne.n	8007d64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d110      	bne.n	8007da8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	32ae      	adds	r2, #174	; 0xae
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e01c      	b.n	8007e0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d115      	bne.n	8007e0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	32ae      	adds	r2, #174	; 0xae
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	32ae      	adds	r2, #174	; 0xae
 8007dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	78fa      	ldrb	r2, [r7, #3]
 8007e06:	4611      	mov	r1, r2
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32ae      	adds	r2, #174	; 0xae
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e01c      	b.n	8007e72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d115      	bne.n	8007e70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	32ae      	adds	r2, #174	; 0xae
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	32ae      	adds	r2, #174	; 0xae
 8007e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6852      	ldr	r2, [r2, #4]
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	4798      	blx	r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ee2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007efc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b086      	sub	sp, #24
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d920      	bls.n	8007f74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f3a:	e013      	b.n	8007f64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f3c:	f107 030a 	add.w	r3, r7, #10
 8007f40:	4619      	mov	r1, r3
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f000 f81b 	bl	8007f7e <USBD_GetNextDesc>
 8007f48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d108      	bne.n	8007f64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	789b      	ldrb	r3, [r3, #2]
 8007f5a:	78fa      	ldrb	r2, [r7, #3]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d008      	beq.n	8007f72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f60:	2300      	movs	r3, #0
 8007f62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	885b      	ldrh	r3, [r3, #2]
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	897b      	ldrh	r3, [r7, #10]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d8e5      	bhi.n	8007f3c <USBD_GetEpDesc+0x32>
 8007f70:	e000      	b.n	8007f74 <USBD_GetEpDesc+0x6a>
          break;
 8007f72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f74:	693b      	ldr	r3, [r7, #16]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	881a      	ldrh	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007faa:	68fb      	ldr	r3, [r7, #12]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fd6:	8a3b      	ldrh	r3, [r7, #16]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	b21a      	sxth	r2, r3
 8007fdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	b21b      	sxth	r3, r3
 8007fe4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fe6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d005      	beq.n	800801a <USBD_StdDevReq+0x26>
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d857      	bhi.n	80080c2 <USBD_StdDevReq+0xce>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00f      	beq.n	8008036 <USBD_StdDevReq+0x42>
 8008016:	2b20      	cmp	r3, #32
 8008018:	d153      	bne.n	80080c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	32ae      	adds	r2, #174	; 0xae
 8008024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	4798      	blx	r3
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
      break;
 8008034:	e04a      	b.n	80080cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b09      	cmp	r3, #9
 800803c:	d83b      	bhi.n	80080b6 <USBD_StdDevReq+0xc2>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <USBD_StdDevReq+0x50>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008099 	.word	0x08008099
 8008048:	080080ad 	.word	0x080080ad
 800804c:	080080b7 	.word	0x080080b7
 8008050:	080080a3 	.word	0x080080a3
 8008054:	080080b7 	.word	0x080080b7
 8008058:	08008077 	.word	0x08008077
 800805c:	0800806d 	.word	0x0800806d
 8008060:	080080b7 	.word	0x080080b7
 8008064:	0800808f 	.word	0x0800808f
 8008068:	08008081 	.word	0x08008081
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fa3c 	bl	80084ec <USBD_GetDescriptor>
          break;
 8008074:	e024      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fba1 	bl	80087c0 <USBD_SetAddress>
          break;
 800807e:	e01f      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fbe0 	bl	8008848 <USBD_SetConfig>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
          break;
 800808c:	e018      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc83 	bl	800899c <USBD_GetConfig>
          break;
 8008096:	e013      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fcb4 	bl	8008a08 <USBD_GetStatus>
          break;
 80080a0:	e00e      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fce3 	bl	8008a70 <USBD_SetFeature>
          break;
 80080aa:	e009      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fd07 	bl	8008ac2 <USBD_ClrFeature>
          break;
 80080b4:	e004      	b.n	80080c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fd5e 	bl	8008b7a <USBD_CtlError>
          break;
 80080be:	bf00      	nop
      }
      break;
 80080c0:	e004      	b.n	80080cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fd58 	bl	8008b7a <USBD_CtlError>
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop

080080d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080ee:	2b40      	cmp	r3, #64	; 0x40
 80080f0:	d005      	beq.n	80080fe <USBD_StdItfReq+0x26>
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	d852      	bhi.n	800819c <USBD_StdItfReq+0xc4>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <USBD_StdItfReq+0x26>
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d14e      	bne.n	800819c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	2b02      	cmp	r3, #2
 800810a:	d840      	bhi.n	800818e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	889b      	ldrh	r3, [r3, #4]
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b01      	cmp	r3, #1
 8008114:	d836      	bhi.n	8008184 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	889b      	ldrh	r3, [r3, #4]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff fed9 	bl	8007ed6 <USBD_CoreFindIF>
 8008124:	4603      	mov	r3, r0
 8008126:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2bff      	cmp	r3, #255	; 0xff
 800812c:	d01d      	beq.n	800816a <USBD_StdItfReq+0x92>
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11a      	bne.n	800816a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008134:	7bba      	ldrb	r2, [r7, #14]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	; 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00f      	beq.n	8008164 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008144:	7bba      	ldrb	r2, [r7, #14]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800814c:	7bba      	ldrb	r2, [r7, #14]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	32ae      	adds	r2, #174	; 0xae
 8008152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
 800815e:	4603      	mov	r3, r0
 8008160:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008162:	e004      	b.n	800816e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008164:	2303      	movs	r3, #3
 8008166:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008168:	e001      	b.n	800816e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800816a:	2303      	movs	r3, #3
 800816c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	88db      	ldrh	r3, [r3, #6]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d110      	bne.n	8008198 <USBD_StdItfReq+0xc0>
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10d      	bne.n	8008198 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fdc7 	bl	8008d10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008182:	e009      	b.n	8008198 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fcf7 	bl	8008b7a <USBD_CtlError>
          break;
 800818c:	e004      	b.n	8008198 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fcf2 	bl	8008b7a <USBD_CtlError>
          break;
 8008196:	e000      	b.n	800819a <USBD_StdItfReq+0xc2>
          break;
 8008198:	bf00      	nop
      }
      break;
 800819a:	e004      	b.n	80081a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fceb 	bl	8008b7a <USBD_CtlError>
      break;
 80081a4:	bf00      	nop
  }

  return ret;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	889b      	ldrh	r3, [r3, #4]
 80081c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d007      	beq.n	80081e0 <USBD_StdEPReq+0x30>
 80081d0:	2b40      	cmp	r3, #64	; 0x40
 80081d2:	f200 817f 	bhi.w	80084d4 <USBD_StdEPReq+0x324>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02a      	beq.n	8008230 <USBD_StdEPReq+0x80>
 80081da:	2b20      	cmp	r3, #32
 80081dc:	f040 817a 	bne.w	80084d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fe83 	bl	8007ef0 <USBD_CoreFindEP>
 80081ea:	4603      	mov	r3, r0
 80081ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	2bff      	cmp	r3, #255	; 0xff
 80081f2:	f000 8174 	beq.w	80084de <USBD_StdEPReq+0x32e>
 80081f6:	7b7b      	ldrb	r3, [r7, #13]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f040 8170 	bne.w	80084de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081fe:	7b7a      	ldrb	r2, [r7, #13]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008206:	7b7a      	ldrb	r2, [r7, #13]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	32ae      	adds	r2, #174	; 0xae
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8163 	beq.w	80084de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008218:	7b7a      	ldrb	r2, [r7, #13]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	32ae      	adds	r2, #174	; 0xae
 800821e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
 800822a:	4603      	mov	r3, r0
 800822c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800822e:	e156      	b.n	80084de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b03      	cmp	r3, #3
 8008236:	d008      	beq.n	800824a <USBD_StdEPReq+0x9a>
 8008238:	2b03      	cmp	r3, #3
 800823a:	f300 8145 	bgt.w	80084c8 <USBD_StdEPReq+0x318>
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 809b 	beq.w	800837a <USBD_StdEPReq+0x1ca>
 8008244:	2b01      	cmp	r3, #1
 8008246:	d03c      	beq.n	80082c2 <USBD_StdEPReq+0x112>
 8008248:	e13e      	b.n	80084c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d002      	beq.n	800825c <USBD_StdEPReq+0xac>
 8008256:	2b03      	cmp	r3, #3
 8008258:	d016      	beq.n	8008288 <USBD_StdEPReq+0xd8>
 800825a:	e02c      	b.n	80082b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <USBD_StdEPReq+0xce>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b80      	cmp	r3, #128	; 0x80
 8008266:	d00a      	beq.n	800827e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f963 	bl	8009538 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008272:	2180      	movs	r1, #128	; 0x80
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f95f 	bl	8009538 <USBD_LL_StallEP>
 800827a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800827c:	e020      	b.n	80082c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc7a 	bl	8008b7a <USBD_CtlError>
              break;
 8008286:	e01b      	b.n	80082c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	885b      	ldrh	r3, [r3, #2]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10e      	bne.n	80082ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008290:	7bbb      	ldrb	r3, [r7, #14]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <USBD_StdEPReq+0xfe>
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b80      	cmp	r3, #128	; 0x80
 800829a:	d008      	beq.n	80082ae <USBD_StdEPReq+0xfe>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	88db      	ldrh	r3, [r3, #6]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	4619      	mov	r1, r3
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f945 	bl	8009538 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fd2e 	bl	8008d10 <USBD_CtlSendStatus>

              break;
 80082b4:	e004      	b.n	80082c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fc5e 	bl	8008b7a <USBD_CtlError>
              break;
 80082be:	bf00      	nop
          }
          break;
 80082c0:	e107      	b.n	80084d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d002      	beq.n	80082d4 <USBD_StdEPReq+0x124>
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d016      	beq.n	8008300 <USBD_StdEPReq+0x150>
 80082d2:	e04b      	b.n	800836c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00d      	beq.n	80082f6 <USBD_StdEPReq+0x146>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d00a      	beq.n	80082f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f927 	bl	8009538 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082ea:	2180      	movs	r1, #128	; 0x80
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f923 	bl	8009538 <USBD_LL_StallEP>
 80082f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f4:	e040      	b.n	8008378 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fc3e 	bl	8008b7a <USBD_CtlError>
              break;
 80082fe:	e03b      	b.n	8008378 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	885b      	ldrh	r3, [r3, #2]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d136      	bne.n	8008376 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 f92d 	bl	8009576 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fcf7 	bl	8008d10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff fde2 	bl	8007ef0 <USBD_CoreFindEP>
 800832c:	4603      	mov	r3, r0
 800832e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008330:	7b7b      	ldrb	r3, [r7, #13]
 8008332:	2bff      	cmp	r3, #255	; 0xff
 8008334:	d01f      	beq.n	8008376 <USBD_StdEPReq+0x1c6>
 8008336:	7b7b      	ldrb	r3, [r7, #13]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d11c      	bne.n	8008376 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008344:	7b7a      	ldrb	r2, [r7, #13]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	32ae      	adds	r2, #174	; 0xae
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d010      	beq.n	8008376 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008354:	7b7a      	ldrb	r2, [r7, #13]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	32ae      	adds	r2, #174	; 0xae
 800835a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800836a:	e004      	b.n	8008376 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fc03 	bl	8008b7a <USBD_CtlError>
              break;
 8008374:	e000      	b.n	8008378 <USBD_StdEPReq+0x1c8>
              break;
 8008376:	bf00      	nop
          }
          break;
 8008378:	e0ab      	b.n	80084d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d002      	beq.n	800838c <USBD_StdEPReq+0x1dc>
 8008386:	2b03      	cmp	r3, #3
 8008388:	d032      	beq.n	80083f0 <USBD_StdEPReq+0x240>
 800838a:	e097      	b.n	80084bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <USBD_StdEPReq+0x1f2>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b80      	cmp	r3, #128	; 0x80
 8008396:	d004      	beq.n	80083a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fbed 	bl	8008b7a <USBD_CtlError>
                break;
 80083a0:	e091      	b.n	80084c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	da0b      	bge.n	80083c2 <USBD_StdEPReq+0x212>
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	3310      	adds	r3, #16
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4413      	add	r3, r2
 80083be:	3304      	adds	r3, #4
 80083c0:	e00b      	b.n	80083da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	4413      	add	r3, r2
 80083d8:	3304      	adds	r3, #4
 80083da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2202      	movs	r2, #2
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fc37 	bl	8008c5c <USBD_CtlSendData>
              break;
 80083ee:	e06a      	b.n	80084c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da11      	bge.n	800841c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	f003 020f 	and.w	r2, r3, #15
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	3324      	adds	r3, #36	; 0x24
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d117      	bne.n	8008442 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fbb0 	bl	8008b7a <USBD_CtlError>
                  break;
 800841a:	e054      	b.n	80084c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	f003 020f 	and.w	r2, r3, #15
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	440b      	add	r3, r1
 800842e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fb9d 	bl	8008b7a <USBD_CtlError>
                  break;
 8008440:	e041      	b.n	80084c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008446:	2b00      	cmp	r3, #0
 8008448:	da0b      	bge.n	8008462 <USBD_StdEPReq+0x2b2>
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	3310      	adds	r3, #16
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	4413      	add	r3, r2
 800845e:	3304      	adds	r3, #4
 8008460:	e00b      	b.n	800847a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4413      	add	r3, r2
 8008478:	3304      	adds	r3, #4
 800847a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <USBD_StdEPReq+0x2d8>
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b80      	cmp	r3, #128	; 0x80
 8008486:	d103      	bne.n	8008490 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e00e      	b.n	80084ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f88d 	bl	80095b4 <USBD_LL_IsStallEP>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e002      	b.n	80084ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2202      	movs	r2, #2
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fbd1 	bl	8008c5c <USBD_CtlSendData>
              break;
 80084ba:	e004      	b.n	80084c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fb5b 	bl	8008b7a <USBD_CtlError>
              break;
 80084c4:	bf00      	nop
          }
          break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb55 	bl	8008b7a <USBD_CtlError>
          break;
 80084d0:	bf00      	nop
      }
      break;
 80084d2:	e005      	b.n	80084e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fb4f 	bl	8008b7a <USBD_CtlError>
      break;
 80084dc:	e000      	b.n	80084e0 <USBD_StdEPReq+0x330>
      break;
 80084de:	bf00      	nop
  }

  return ret;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	0a1b      	lsrs	r3, r3, #8
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	2b06      	cmp	r3, #6
 800850e:	f200 8128 	bhi.w	8008762 <USBD_GetDescriptor+0x276>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <USBD_GetDescriptor+0x2c>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008535 	.word	0x08008535
 800851c:	0800854d 	.word	0x0800854d
 8008520:	0800858d 	.word	0x0800858d
 8008524:	08008763 	.word	0x08008763
 8008528:	08008763 	.word	0x08008763
 800852c:	08008703 	.word	0x08008703
 8008530:	0800872f 	.word	0x0800872f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	7c12      	ldrb	r2, [r2, #16]
 8008540:	f107 0108 	add.w	r1, r7, #8
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
 8008548:	60f8      	str	r0, [r7, #12]
      break;
 800854a:	e112      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7c1b      	ldrb	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10d      	bne.n	8008570 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800855a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855c:	f107 0208 	add.w	r2, r7, #8
 8008560:	4610      	mov	r0, r2
 8008562:	4798      	blx	r3
 8008564:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	2202      	movs	r2, #2
 800856c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800856e:	e100      	b.n	8008772 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f107 0208 	add.w	r2, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	2202      	movs	r2, #2
 8008588:	701a      	strb	r2, [r3, #0]
      break;
 800858a:	e0f2      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	885b      	ldrh	r3, [r3, #2]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b05      	cmp	r3, #5
 8008594:	f200 80ac 	bhi.w	80086f0 <USBD_GetDescriptor+0x204>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USBD_GetDescriptor+0xb4>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085b9 	.word	0x080085b9
 80085a4:	080085ed 	.word	0x080085ed
 80085a8:	08008621 	.word	0x08008621
 80085ac:	08008655 	.word	0x08008655
 80085b0:	08008689 	.word	0x08008689
 80085b4:	080086bd 	.word	0x080086bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e091      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 facb 	bl	8008b7a <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e089      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e077      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fab1 	bl	8008b7a <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e06f      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e05d      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa97 	bl	8008b7a <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e055      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e043      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa7d 	bl	8008b7a <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e03b      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086aa:	e029      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa63 	bl	8008b7a <USBD_CtlError>
            err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ba:	e021      	b.n	8008700 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c2:	699b      	ldr	r3, [r3, #24]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	7c12      	ldrb	r2, [r2, #16]
 80086d4:	f107 0108 	add.w	r1, r7, #8
 80086d8:	4610      	mov	r0, r2
 80086da:	4798      	blx	r3
 80086dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086de:	e00f      	b.n	8008700 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa49 	bl	8008b7a <USBD_CtlError>
            err++;
 80086e8:	7afb      	ldrb	r3, [r7, #11]
 80086ea:	3301      	adds	r3, #1
 80086ec:	72fb      	strb	r3, [r7, #11]
          break;
 80086ee:	e007      	b.n	8008700 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa41 	bl	8008b7a <USBD_CtlError>
          err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086fe:	bf00      	nop
      }
      break;
 8008700:	e037      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7c1b      	ldrb	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	f107 0208 	add.w	r2, r7, #8
 8008716:	4610      	mov	r0, r2
 8008718:	4798      	blx	r3
 800871a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800871c:	e029      	b.n	8008772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa2a 	bl	8008b7a <USBD_CtlError>
        err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	e021      	b.n	8008772 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7c1b      	ldrb	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10d      	bne.n	8008752 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	f107 0208 	add.w	r2, r7, #8
 8008742:	4610      	mov	r0, r2
 8008744:	4798      	blx	r3
 8008746:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3301      	adds	r3, #1
 800874c:	2207      	movs	r2, #7
 800874e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008750:	e00f      	b.n	8008772 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fa10 	bl	8008b7a <USBD_CtlError>
        err++;
 800875a:	7afb      	ldrb	r3, [r7, #11]
 800875c:	3301      	adds	r3, #1
 800875e:	72fb      	strb	r3, [r7, #11]
      break;
 8008760:	e007      	b.n	8008772 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fa08 	bl	8008b7a <USBD_CtlError>
      err++;
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	3301      	adds	r3, #1
 800876e:	72fb      	strb	r3, [r7, #11]
      break;
 8008770:	bf00      	nop
  }

  if (err != 0U)
 8008772:	7afb      	ldrb	r3, [r7, #11]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d11e      	bne.n	80087b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	88db      	ldrh	r3, [r3, #6]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d016      	beq.n	80087ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008780:	893b      	ldrh	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88da      	ldrh	r2, [r3, #6]
 800878a:	893b      	ldrh	r3, [r7, #8]
 800878c:	4293      	cmp	r3, r2
 800878e:	bf28      	it	cs
 8008790:	4613      	movcs	r3, r2
 8008792:	b29b      	uxth	r3, r3
 8008794:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008796:	893b      	ldrh	r3, [r7, #8]
 8008798:	461a      	mov	r2, r3
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fa5d 	bl	8008c5c <USBD_CtlSendData>
 80087a2:	e009      	b.n	80087b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9e7 	bl	8008b7a <USBD_CtlError>
 80087ac:	e004      	b.n	80087b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 faae 	bl	8008d10 <USBD_CtlSendStatus>
 80087b4:	e000      	b.n	80087b8 <USBD_GetDescriptor+0x2cc>
    return;
 80087b6:	bf00      	nop
  }
}
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop

080087c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	889b      	ldrh	r3, [r3, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d131      	bne.n	8008836 <USBD_SetAddress+0x76>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	88db      	ldrh	r3, [r3, #6]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d12d      	bne.n	8008836 <USBD_SetAddress+0x76>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	2b7f      	cmp	r3, #127	; 0x7f
 80087e0:	d829      	bhi.n	8008836 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	885b      	ldrh	r3, [r3, #2]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d104      	bne.n	8008804 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f9bc 	bl	8008b7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	e01d      	b.n	8008840 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	7bfa      	ldrb	r2, [r7, #15]
 8008808:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fefb 	bl	800960c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa7a 	bl	8008d10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2202      	movs	r2, #2
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882a:	e009      	b.n	8008840 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008834:	e004      	b.n	8008840 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f99e 	bl	8008b7a <USBD_CtlError>
  }
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	885b      	ldrh	r3, [r3, #2]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	4b4e      	ldr	r3, [pc, #312]	; (8008998 <USBD_SetConfig+0x150>)
 800885e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008860:	4b4d      	ldr	r3, [pc, #308]	; (8008998 <USBD_SetConfig+0x150>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d905      	bls.n	8008874 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f985 	bl	8008b7a <USBD_CtlError>
    return USBD_FAIL;
 8008870:	2303      	movs	r3, #3
 8008872:	e08c      	b.n	800898e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d002      	beq.n	8008886 <USBD_SetConfig+0x3e>
 8008880:	2b03      	cmp	r3, #3
 8008882:	d029      	beq.n	80088d8 <USBD_SetConfig+0x90>
 8008884:	e075      	b.n	8008972 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008886:	4b44      	ldr	r3, [pc, #272]	; (8008998 <USBD_SetConfig+0x150>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d020      	beq.n	80088d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800888e:	4b42      	ldr	r3, [pc, #264]	; (8008998 <USBD_SetConfig+0x150>)
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008898:	4b3f      	ldr	r3, [pc, #252]	; (8008998 <USBD_SetConfig+0x150>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fe ffe7 	bl	8007872 <USBD_SetClassConfig>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d008      	beq.n	80088c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088ae:	6839      	ldr	r1, [r7, #0]
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f962 	bl	8008b7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2202      	movs	r2, #2
 80088ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088be:	e065      	b.n	800898c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa25 	bl	8008d10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2203      	movs	r2, #3
 80088ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088ce:	e05d      	b.n	800898c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fa1d 	bl	8008d10 <USBD_CtlSendStatus>
      break;
 80088d6:	e059      	b.n	800898c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088d8:	4b2f      	ldr	r3, [pc, #188]	; (8008998 <USBD_SetConfig+0x150>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d112      	bne.n	8008906 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088e8:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <USBD_SetConfig+0x150>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <USBD_SetConfig+0x150>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7fe ffd6 	bl	80078aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa06 	bl	8008d10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008904:	e042      	b.n	800898c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008906:	4b24      	ldr	r3, [pc, #144]	; (8008998 <USBD_SetConfig+0x150>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	d02a      	beq.n	800896a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	b2db      	uxtb	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fe ffc4 	bl	80078aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <USBD_SetConfig+0x150>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800892c:	4b1a      	ldr	r3, [pc, #104]	; (8008998 <USBD_SetConfig+0x150>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe ff9d 	bl	8007872 <USBD_SetClassConfig>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00f      	beq.n	8008962 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f918 	bl	8008b7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7fe ffa9 	bl	80078aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008960:	e014      	b.n	800898c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9d4 	bl	8008d10 <USBD_CtlSendStatus>
      break;
 8008968:	e010      	b.n	800898c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f9d0 	bl	8008d10 <USBD_CtlSendStatus>
      break;
 8008970:	e00c      	b.n	800898c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f900 	bl	8008b7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <USBD_SetConfig+0x150>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fe ff92 	bl	80078aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	73fb      	strb	r3, [r7, #15]
      break;
 800898a:	bf00      	nop
  }

  return ret;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	2000049c 	.word	0x2000049c

0800899c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d004      	beq.n	80089b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8e2 	bl	8008b7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089b6:	e023      	b.n	8008a00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	dc02      	bgt.n	80089ca <USBD_GetConfig+0x2e>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dc03      	bgt.n	80089d0 <USBD_GetConfig+0x34>
 80089c8:	e015      	b.n	80089f6 <USBD_GetConfig+0x5a>
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d00b      	beq.n	80089e6 <USBD_GetConfig+0x4a>
 80089ce:	e012      	b.n	80089f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3308      	adds	r3, #8
 80089da:	2201      	movs	r2, #1
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f93c 	bl	8008c5c <USBD_CtlSendData>
        break;
 80089e4:	e00c      	b.n	8008a00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	2201      	movs	r2, #1
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f934 	bl	8008c5c <USBD_CtlSendData>
        break;
 80089f4:	e004      	b.n	8008a00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f8be 	bl	8008b7a <USBD_CtlError>
        break;
 80089fe:	bf00      	nop
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d81e      	bhi.n	8008a5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	88db      	ldrh	r3, [r3, #6]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d004      	beq.n	8008a32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8a5 	bl	8008b7a <USBD_CtlError>
        break;
 8008a30:	e01a      	b.n	8008a68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d005      	beq.n	8008a4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f043 0202 	orr.w	r2, r3, #2
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	330c      	adds	r3, #12
 8008a52:	2202      	movs	r2, #2
 8008a54:	4619      	mov	r1, r3
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f900 	bl	8008c5c <USBD_CtlSendData>
      break;
 8008a5c:	e004      	b.n	8008a68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f88a 	bl	8008b7a <USBD_CtlError>
      break;
 8008a66:	bf00      	nop
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3708      	adds	r7, #8
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d107      	bne.n	8008a92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f940 	bl	8008d10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a90:	e013      	b.n	8008aba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d10b      	bne.n	8008ab2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	889b      	ldrh	r3, [r3, #4]
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f930 	bl	8008d10 <USBD_CtlSendStatus>
}
 8008ab0:	e003      	b.n	8008aba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f860 	bl	8008b7a <USBD_CtlError>
}
 8008aba:	bf00      	nop
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d80b      	bhi.n	8008af2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d10c      	bne.n	8008afc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f910 	bl	8008d10 <USBD_CtlSendStatus>
      }
      break;
 8008af0:	e004      	b.n	8008afc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f840 	bl	8008b7a <USBD_CtlError>
      break;
 8008afa:	e000      	b.n	8008afe <USBD_ClrFeature+0x3c>
      break;
 8008afc:	bf00      	nop
  }
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fa41 	bl	8007fb8 <SWAPBYTE>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3301      	adds	r3, #1
 8008b42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff fa34 	bl	8007fb8 <SWAPBYTE>
 8008b50:	4603      	mov	r3, r0
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f7ff fa27 	bl	8007fb8 <SWAPBYTE>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	80da      	strh	r2, [r3, #6]
}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b84:	2180      	movs	r1, #128	; 0x80
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fcd6 	bl	8009538 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fcd2 	bl	8009538 <USBD_LL_StallEP>
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d036      	beq.n	8008c20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f000 f836 	bl	8008c28 <USBD_GetLen>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	4413      	add	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7812      	ldrb	r2, [r2, #0]
 8008bd4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	2203      	movs	r2, #3
 8008be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	3301      	adds	r3, #1
 8008bea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bec:	e013      	b.n	8008c16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bee:	7dfb      	ldrb	r3, [r7, #23]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	613b      	str	r3, [r7, #16]
    idx++;
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	3301      	adds	r3, #1
 8008c04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	3301      	adds	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e7      	bne.n	8008bee <USBD_GetString+0x52>
 8008c1e:	e000      	b.n	8008c22 <USBD_GetString+0x86>
    return;
 8008c20:	bf00      	nop
  }
}
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c38:	e005      	b.n	8008c46 <USBD_GetLen+0x1e>
  {
    len++;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f5      	bne.n	8008c3a <USBD_GetLen+0x12>
  }

  return len;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	2100      	movs	r1, #0
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fce1 	bl	800964a <USBD_LL_Transmit>

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b084      	sub	sp, #16
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fcd0 	bl	800964a <USBD_LL_Transmit>

  return USBD_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2203      	movs	r2, #3
 8008cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 fcd4 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	60f8      	str	r0, [r7, #12]
 8008cf6:	60b9      	str	r1, [r7, #8]
 8008cf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	2100      	movs	r1, #0
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 fcc3 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d20:	2300      	movs	r3, #0
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fc8f 	bl	800964a <USBD_LL_Transmit>

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2205      	movs	r2, #5
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d46:	2300      	movs	r3, #0
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fc9d 	bl	800968c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d60:	2200      	movs	r2, #0
 8008d62:	4912      	ldr	r1, [pc, #72]	; (8008dac <MX_USB_DEVICE_Init+0x50>)
 8008d64:	4812      	ldr	r0, [pc, #72]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d66:	f7fe fd07 	bl	8007778 <USBD_Init>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d70:	f7f8 fbbc 	bl	80014ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <MX_USB_DEVICE_Init+0x58>)
 8008d76:	480e      	ldr	r0, [pc, #56]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d78:	f7fe fd2e 	bl	80077d8 <USBD_RegisterClass>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d82:	f7f8 fbb3 	bl	80014ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d86:	490c      	ldr	r1, [pc, #48]	; (8008db8 <MX_USB_DEVICE_Init+0x5c>)
 8008d88:	4809      	ldr	r0, [pc, #36]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d8a:	f7fe fc1f 	bl	80075cc <USBD_CDC_RegisterInterface>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d94:	f7f8 fbaa 	bl	80014ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d98:	4805      	ldr	r0, [pc, #20]	; (8008db0 <MX_USB_DEVICE_Init+0x54>)
 8008d9a:	f7fe fd53 	bl	8007844 <USBD_Start>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008da4:	f7f8 fba2 	bl	80014ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	200000ac 	.word	0x200000ac
 8008db0:	200004a0 	.word	0x200004a0
 8008db4:	20000018 	.word	0x20000018
 8008db8:	20000098 	.word	0x20000098

08008dbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4905      	ldr	r1, [pc, #20]	; (8008dd8 <CDC_Init_FS+0x1c>)
 8008dc4:	4805      	ldr	r0, [pc, #20]	; (8008ddc <CDC_Init_FS+0x20>)
 8008dc6:	f7fe fc1b 	bl	8007600 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dca:	4905      	ldr	r1, [pc, #20]	; (8008de0 <CDC_Init_FS+0x24>)
 8008dcc:	4803      	ldr	r0, [pc, #12]	; (8008ddc <CDC_Init_FS+0x20>)
 8008dce:	f7fe fc39 	bl	8007644 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20000b7c 	.word	0x20000b7c
 8008ddc:	200004a0 	.word	0x200004a0
 8008de0:	2000077c 	.word	0x2000077c

08008de4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008de8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
 8008e00:	4613      	mov	r3, r2
 8008e02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	2b23      	cmp	r3, #35	; 0x23
 8008e08:	d84a      	bhi.n	8008ea0 <CDC_Control_FS+0xac>
 8008e0a:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <CDC_Control_FS+0x1c>)
 8008e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e10:	08008ea1 	.word	0x08008ea1
 8008e14:	08008ea1 	.word	0x08008ea1
 8008e18:	08008ea1 	.word	0x08008ea1
 8008e1c:	08008ea1 	.word	0x08008ea1
 8008e20:	08008ea1 	.word	0x08008ea1
 8008e24:	08008ea1 	.word	0x08008ea1
 8008e28:	08008ea1 	.word	0x08008ea1
 8008e2c:	08008ea1 	.word	0x08008ea1
 8008e30:	08008ea1 	.word	0x08008ea1
 8008e34:	08008ea1 	.word	0x08008ea1
 8008e38:	08008ea1 	.word	0x08008ea1
 8008e3c:	08008ea1 	.word	0x08008ea1
 8008e40:	08008ea1 	.word	0x08008ea1
 8008e44:	08008ea1 	.word	0x08008ea1
 8008e48:	08008ea1 	.word	0x08008ea1
 8008e4c:	08008ea1 	.word	0x08008ea1
 8008e50:	08008ea1 	.word	0x08008ea1
 8008e54:	08008ea1 	.word	0x08008ea1
 8008e58:	08008ea1 	.word	0x08008ea1
 8008e5c:	08008ea1 	.word	0x08008ea1
 8008e60:	08008ea1 	.word	0x08008ea1
 8008e64:	08008ea1 	.word	0x08008ea1
 8008e68:	08008ea1 	.word	0x08008ea1
 8008e6c:	08008ea1 	.word	0x08008ea1
 8008e70:	08008ea1 	.word	0x08008ea1
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008ea1 	.word	0x08008ea1
 8008e80:	08008ea1 	.word	0x08008ea1
 8008e84:	08008ea1 	.word	0x08008ea1
 8008e88:	08008ea1 	.word	0x08008ea1
 8008e8c:	08008ea1 	.word	0x08008ea1
 8008e90:	08008ea1 	.word	0x08008ea1
 8008e94:	08008ea1 	.word	0x08008ea1
 8008e98:	08008ea1 	.word	0x08008ea1
 8008e9c:	08008ea1 	.word	0x08008ea1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ea0:	bf00      	nop
  }

  return (USBD_OK);
 8008ea2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4805      	ldr	r0, [pc, #20]	; (8008ed4 <CDC_Receive_FS+0x24>)
 8008ebe:	f7fe fbc1 	bl	8007644 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ec2:	4804      	ldr	r0, [pc, #16]	; (8008ed4 <CDC_Receive_FS+0x24>)
 8008ec4:	f7fe fc22 	bl	800770c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ec8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	200004a0 	.word	0x200004a0

08008ed8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ee8:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <CDC_Transmit_FS+0x48>)
 8008eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d001      	beq.n	8008efe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e00b      	b.n	8008f16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	461a      	mov	r2, r3
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4806      	ldr	r0, [pc, #24]	; (8008f20 <CDC_Transmit_FS+0x48>)
 8008f06:	f7fe fb7b 	bl	8007600 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f0a:	4805      	ldr	r0, [pc, #20]	; (8008f20 <CDC_Transmit_FS+0x48>)
 8008f0c:	f7fe fbb8 	bl	8007680 <USBD_CDC_TransmitPacket>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200004a0 	.word	0x200004a0

08008f24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	6039      	str	r1, [r7, #0]
 8008f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2212      	movs	r2, #18
 8008f58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	200000c8 	.word	0x200000c8

08008f6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2204      	movs	r2, #4
 8008f7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f7e:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	200000dc 	.word	0x200000dc

08008f90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	6039      	str	r1, [r7, #0]
 8008f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d105      	bne.n	8008fae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	4907      	ldr	r1, [pc, #28]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fa6:	4808      	ldr	r0, [pc, #32]	; (8008fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fa8:	f7ff fdf8 	bl	8008b9c <USBD_GetString>
 8008fac:	e004      	b.n	8008fb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	4904      	ldr	r1, [pc, #16]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fb2:	4805      	ldr	r0, [pc, #20]	; (8008fc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fb4:	f7ff fdf2 	bl	8008b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000f7c 	.word	0x20000f7c
 8008fc8:	0800e0e4 	.word	0x0800e0e4

08008fcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	4904      	ldr	r1, [pc, #16]	; (8008fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fdc:	4804      	ldr	r0, [pc, #16]	; (8008ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fde:	f7ff fddd 	bl	8008b9c <USBD_GetString>
  return USBD_StrDesc;
 8008fe2:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20000f7c 	.word	0x20000f7c
 8008ff0:	0800e0fc 	.word	0x0800e0fc

08008ff4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	221a      	movs	r2, #26
 8009004:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009006:	f000 f843 	bl	8009090 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800900a:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	200000e0 	.word	0x200000e0

08009018 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d105      	bne.n	8009036 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	4907      	ldr	r1, [pc, #28]	; (800904c <USBD_FS_ConfigStrDescriptor+0x34>)
 800902e:	4808      	ldr	r0, [pc, #32]	; (8009050 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009030:	f7ff fdb4 	bl	8008b9c <USBD_GetString>
 8009034:	e004      	b.n	8009040 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	4904      	ldr	r1, [pc, #16]	; (800904c <USBD_FS_ConfigStrDescriptor+0x34>)
 800903a:	4805      	ldr	r0, [pc, #20]	; (8009050 <USBD_FS_ConfigStrDescriptor+0x38>)
 800903c:	f7ff fdae 	bl	8008b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000f7c 	.word	0x20000f7c
 8009050:	0800e110 	.word	0x0800e110

08009054 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	6039      	str	r1, [r7, #0]
 800905e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d105      	bne.n	8009072 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	4907      	ldr	r1, [pc, #28]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800906a:	4808      	ldr	r0, [pc, #32]	; (800908c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800906c:	f7ff fd96 	bl	8008b9c <USBD_GetString>
 8009070:	e004      	b.n	800907c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	4904      	ldr	r1, [pc, #16]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009076:	4805      	ldr	r0, [pc, #20]	; (800908c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009078:	f7ff fd90 	bl	8008b9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20000f7c 	.word	0x20000f7c
 800908c:	0800e11c 	.word	0x0800e11c

08009090 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009096:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <Get_SerialNum+0x44>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800909c:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <Get_SerialNum+0x48>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090a2:	4b0e      	ldr	r3, [pc, #56]	; (80090dc <Get_SerialNum+0x4c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090b6:	2208      	movs	r2, #8
 80090b8:	4909      	ldr	r1, [pc, #36]	; (80090e0 <Get_SerialNum+0x50>)
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f814 	bl	80090e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090c0:	2204      	movs	r2, #4
 80090c2:	4908      	ldr	r1, [pc, #32]	; (80090e4 <Get_SerialNum+0x54>)
 80090c4:	68b8      	ldr	r0, [r7, #8]
 80090c6:	f000 f80f 	bl	80090e8 <IntToUnicode>
  }
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	1fff7a10 	.word	0x1fff7a10
 80090d8:	1fff7a14 	.word	0x1fff7a14
 80090dc:	1fff7a18 	.word	0x1fff7a18
 80090e0:	200000e2 	.word	0x200000e2
 80090e4:	200000f2 	.word	0x200000f2

080090e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b087      	sub	sp, #28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4613      	mov	r3, r2
 80090f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]
 80090fe:	e027      	b.n	8009150 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	0f1b      	lsrs	r3, r3, #28
 8009104:	2b09      	cmp	r3, #9
 8009106:	d80b      	bhi.n	8009120 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	0f1b      	lsrs	r3, r3, #28
 800910c:	b2da      	uxtb	r2, r3
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	4619      	mov	r1, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	440b      	add	r3, r1
 8009118:	3230      	adds	r2, #48	; 0x30
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e00a      	b.n	8009136 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	0f1b      	lsrs	r3, r3, #28
 8009124:	b2da      	uxtb	r2, r3
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	4619      	mov	r1, r3
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	440b      	add	r3, r1
 8009130:	3237      	adds	r2, #55	; 0x37
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	3301      	adds	r3, #1
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	4413      	add	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	3301      	adds	r3, #1
 800914e:	75fb      	strb	r3, [r7, #23]
 8009150:	7dfa      	ldrb	r2, [r7, #23]
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	429a      	cmp	r2, r3
 8009156:	d3d3      	bcc.n	8009100 <IntToUnicode+0x18>
  }
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
	...

08009168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	; 0x28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009170:	f107 0314 	add.w	r3, r7, #20
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	609a      	str	r2, [r3, #8]
 800917c:	60da      	str	r2, [r3, #12]
 800917e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009188:	d13a      	bne.n	8009200 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800918a:	2300      	movs	r3, #0
 800918c:	613b      	str	r3, [r7, #16]
 800918e:	4b1e      	ldr	r3, [pc, #120]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	4a1d      	ldr	r2, [pc, #116]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 8009194:	f043 0301 	orr.w	r3, r3, #1
 8009198:	6313      	str	r3, [r2, #48]	; 0x30
 800919a:	4b1b      	ldr	r3, [pc, #108]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 800919c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	613b      	str	r3, [r7, #16]
 80091a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ac:	2302      	movs	r3, #2
 80091ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091b4:	2303      	movs	r3, #3
 80091b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091b8:	230a      	movs	r3, #10
 80091ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	4619      	mov	r1, r3
 80091c2:	4812      	ldr	r0, [pc, #72]	; (800920c <HAL_PCD_MspInit+0xa4>)
 80091c4:	f7f9 fc8e 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091c8:	4b0f      	ldr	r3, [pc, #60]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	4a0e      	ldr	r2, [pc, #56]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 80091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d2:	6353      	str	r3, [r2, #52]	; 0x34
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 80091da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091dc:	4a0a      	ldr	r2, [pc, #40]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 80091de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e2:	6453      	str	r3, [r2, #68]	; 0x44
 80091e4:	4b08      	ldr	r3, [pc, #32]	; (8009208 <HAL_PCD_MspInit+0xa0>)
 80091e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	2043      	movs	r0, #67	; 0x43
 80091f6:	f7f9 f954 	bl	80024a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091fa:	2043      	movs	r0, #67	; 0x43
 80091fc:	f7f9 f96d 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009200:	bf00      	nop
 8009202:	3728      	adds	r7, #40	; 0x28
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	40023800 	.word	0x40023800
 800920c:	40020000 	.word	0x40020000

08009210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f7fe fb59 	bl	80078de <USBD_LL_SetupStage>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	4413      	add	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	4619      	mov	r1, r3
 800925e:	f7fe fb93 	bl	8007988 <USBD_LL_DataOutStage>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	334c      	adds	r3, #76	; 0x4c
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	4619      	mov	r1, r3
 8009292:	f7fe fc2c 	bl	8007aee <USBD_LL_DataInStage>
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fd60 	bl	8007d72 <USBD_LL_SOF>
}
 80092b2:	bf00      	nop
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092c2:	2301      	movs	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d001      	beq.n	80092d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092ce:	f7f8 f90d 	bl	80014ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092d8:	7bfa      	ldrb	r2, [r7, #15]
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fd0a 	bl	8007cf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fcb2 	bl	8007c52 <USBD_LL_Reset>
}
 80092ee:	bf00      	nop
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fd05 	bl	8007d16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800931e:	f043 0301 	orr.w	r3, r3, #1
 8009322:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <HAL_PCD_SuspendCallback+0x48>)
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	4a03      	ldr	r2, [pc, #12]	; (8009340 <HAL_PCD_SuspendCallback+0x48>)
 8009332:	f043 0306 	orr.w	r3, r3, #6
 8009336:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	e000ed00 	.word	0xe000ed00

08009344 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fcf5 	bl	8007d42 <USBD_LL_Resume>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	4611      	mov	r1, r2
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd4d 	bl	8007e16 <USBD_LL_IsoOUTIncomplete>
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	460b      	mov	r3, r1
 800938e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fd09 	bl	8007db2 <USBD_LL_IsoINIncomplete>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fd5f 	bl	8007e7a <USBD_LL_DevConnected>
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe fd5c 	bl	8007e90 <USBD_LL_DevDisconnected>
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d13c      	bne.n	800946a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093f0:	4a20      	ldr	r2, [pc, #128]	; (8009474 <USBD_LL_Init+0x94>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	; (8009474 <USBD_LL_Init+0x94>)
 80093fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009400:	4b1c      	ldr	r3, [pc, #112]	; (8009474 <USBD_LL_Init+0x94>)
 8009402:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009406:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009408:	4b1a      	ldr	r3, [pc, #104]	; (8009474 <USBD_LL_Init+0x94>)
 800940a:	2204      	movs	r2, #4
 800940c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800940e:	4b19      	ldr	r3, [pc, #100]	; (8009474 <USBD_LL_Init+0x94>)
 8009410:	2202      	movs	r2, #2
 8009412:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009414:	4b17      	ldr	r3, [pc, #92]	; (8009474 <USBD_LL_Init+0x94>)
 8009416:	2200      	movs	r2, #0
 8009418:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800941a:	4b16      	ldr	r3, [pc, #88]	; (8009474 <USBD_LL_Init+0x94>)
 800941c:	2202      	movs	r2, #2
 800941e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009420:	4b14      	ldr	r3, [pc, #80]	; (8009474 <USBD_LL_Init+0x94>)
 8009422:	2200      	movs	r2, #0
 8009424:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009426:	4b13      	ldr	r3, [pc, #76]	; (8009474 <USBD_LL_Init+0x94>)
 8009428:	2200      	movs	r2, #0
 800942a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800942c:	4b11      	ldr	r3, [pc, #68]	; (8009474 <USBD_LL_Init+0x94>)
 800942e:	2200      	movs	r2, #0
 8009430:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009432:	4b10      	ldr	r3, [pc, #64]	; (8009474 <USBD_LL_Init+0x94>)
 8009434:	2200      	movs	r2, #0
 8009436:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009438:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <USBD_LL_Init+0x94>)
 800943a:	2200      	movs	r2, #0
 800943c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800943e:	480d      	ldr	r0, [pc, #52]	; (8009474 <USBD_LL_Init+0x94>)
 8009440:	f7f9 fe18 	bl	8003074 <HAL_PCD_Init>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800944a:	f7f8 f84f 	bl	80014ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	4808      	ldr	r0, [pc, #32]	; (8009474 <USBD_LL_Init+0x94>)
 8009452:	f7fb f870 	bl	8004536 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009456:	2240      	movs	r2, #64	; 0x40
 8009458:	2100      	movs	r1, #0
 800945a:	4806      	ldr	r0, [pc, #24]	; (8009474 <USBD_LL_Init+0x94>)
 800945c:	f7fb f824 	bl	80044a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009460:	2280      	movs	r2, #128	; 0x80
 8009462:	2101      	movs	r1, #1
 8009464:	4803      	ldr	r0, [pc, #12]	; (8009474 <USBD_LL_Init+0x94>)
 8009466:	f7fb f81f 	bl	80044a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	2000117c 	.word	0x2000117c

08009478 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800948e:	4618      	mov	r0, r3
 8009490:	f7f9 ff0d 	bl	80032ae <HAL_PCD_Start>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f942 	bl	8009724 <USBD_Get_USB_Status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	4608      	mov	r0, r1
 80094b8:	4611      	mov	r1, r2
 80094ba:	461a      	mov	r2, r3
 80094bc:	4603      	mov	r3, r0
 80094be:	70fb      	strb	r3, [r7, #3]
 80094c0:	460b      	mov	r3, r1
 80094c2:	70bb      	strb	r3, [r7, #2]
 80094c4:	4613      	mov	r3, r2
 80094c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094d6:	78bb      	ldrb	r3, [r7, #2]
 80094d8:	883a      	ldrh	r2, [r7, #0]
 80094da:	78f9      	ldrb	r1, [r7, #3]
 80094dc:	f7fa fbde 	bl	8003c9c <HAL_PCD_EP_Open>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f91c 	bl	8009724 <USBD_Get_USB_Status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f7fa fc27 	bl	8003d6c <HAL_PCD_EP_Close>
 800951e:	4603      	mov	r3, r0
 8009520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009522:	7bfb      	ldrb	r3, [r7, #15]
 8009524:	4618      	mov	r0, r3
 8009526:	f000 f8fd 	bl	8009724 <USBD_Get_USB_Status>
 800952a:	4603      	mov	r3, r0
 800952c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f7fa fcff 	bl	8003f5a <HAL_PCD_EP_SetStall>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	4618      	mov	r0, r3
 8009564:	f000 f8de 	bl	8009724 <USBD_Get_USB_Status>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956c:	7bbb      	ldrb	r3, [r7, #14]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009590:	78fa      	ldrb	r2, [r7, #3]
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f7fa fd44 	bl	8004022 <HAL_PCD_EP_ClrStall>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f8bf 	bl	8009724 <USBD_Get_USB_Status>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	da0b      	bge.n	80095e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	333e      	adds	r3, #62	; 0x3e
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	e00b      	b.n	8009600 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	4613      	mov	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80095fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f7fa fb11 	bl	8003c52 <HAL_PCD_SetAddress>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f874 	bl	8009724 <USBD_Get_USB_Status>
 800963c:	4603      	mov	r3, r0
 800963e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009640:	7bbb      	ldrb	r3, [r7, #14]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
 8009656:	460b      	mov	r3, r1
 8009658:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009668:	7af9      	ldrb	r1, [r7, #11]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	f7fa fc2a 	bl	8003ec6 <HAL_PCD_EP_Transmit>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 f853 	bl	8009724 <USBD_Get_USB_Status>
 800967e:	4603      	mov	r3, r0
 8009680:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009682:	7dbb      	ldrb	r3, [r7, #22]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3718      	adds	r7, #24
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	607a      	str	r2, [r7, #4]
 8009696:	603b      	str	r3, [r7, #0]
 8009698:	460b      	mov	r3, r1
 800969a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096aa:	7af9      	ldrb	r1, [r7, #11]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	f7fa fba6 	bl	8003e00 <HAL_PCD_EP_Receive>
 80096b4:	4603      	mov	r3, r0
 80096b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f000 f832 	bl	8009724 <USBD_Get_USB_Status>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e0:	78fa      	ldrb	r2, [r7, #3]
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fa fbd6 	bl	8003e96 <HAL_PCD_EP_GetRxCount>
 80096ea:	4603      	mov	r3, r0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096fc:	4b03      	ldr	r3, [pc, #12]	; (800970c <USBD_static_malloc+0x18>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20001688 	.word	0x20001688

08009710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d817      	bhi.n	8009768 <USBD_Get_USB_Status+0x44>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <USBD_Get_USB_Status+0x1c>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009751 	.word	0x08009751
 8009744:	08009757 	.word	0x08009757
 8009748:	0800975d 	.word	0x0800975d
 800974c:	08009763 	.word	0x08009763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e00b      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009756:	2303      	movs	r3, #3
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	e008      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	e005      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
    break;
 8009766:	e002      	b.n	800976e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009768:	2303      	movs	r3, #3
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	bf00      	nop
  }
  return usb_status;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <__errno>:
 800977c:	4b01      	ldr	r3, [pc, #4]	; (8009784 <__errno+0x8>)
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	200000fc 	.word	0x200000fc

08009788 <__libc_init_array>:
 8009788:	b570      	push	{r4, r5, r6, lr}
 800978a:	4d0d      	ldr	r5, [pc, #52]	; (80097c0 <__libc_init_array+0x38>)
 800978c:	4c0d      	ldr	r4, [pc, #52]	; (80097c4 <__libc_init_array+0x3c>)
 800978e:	1b64      	subs	r4, r4, r5
 8009790:	10a4      	asrs	r4, r4, #2
 8009792:	2600      	movs	r6, #0
 8009794:	42a6      	cmp	r6, r4
 8009796:	d109      	bne.n	80097ac <__libc_init_array+0x24>
 8009798:	4d0b      	ldr	r5, [pc, #44]	; (80097c8 <__libc_init_array+0x40>)
 800979a:	4c0c      	ldr	r4, [pc, #48]	; (80097cc <__libc_init_array+0x44>)
 800979c:	f004 fc8e 	bl	800e0bc <_init>
 80097a0:	1b64      	subs	r4, r4, r5
 80097a2:	10a4      	asrs	r4, r4, #2
 80097a4:	2600      	movs	r6, #0
 80097a6:	42a6      	cmp	r6, r4
 80097a8:	d105      	bne.n	80097b6 <__libc_init_array+0x2e>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b0:	4798      	blx	r3
 80097b2:	3601      	adds	r6, #1
 80097b4:	e7ee      	b.n	8009794 <__libc_init_array+0xc>
 80097b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ba:	4798      	blx	r3
 80097bc:	3601      	adds	r6, #1
 80097be:	e7f2      	b.n	80097a6 <__libc_init_array+0x1e>
 80097c0:	0800e5fc 	.word	0x0800e5fc
 80097c4:	0800e5fc 	.word	0x0800e5fc
 80097c8:	0800e5fc 	.word	0x0800e5fc
 80097cc:	0800e600 	.word	0x0800e600

080097d0 <memset>:
 80097d0:	4402      	add	r2, r0
 80097d2:	4603      	mov	r3, r0
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d100      	bne.n	80097da <memset+0xa>
 80097d8:	4770      	bx	lr
 80097da:	f803 1b01 	strb.w	r1, [r3], #1
 80097de:	e7f9      	b.n	80097d4 <memset+0x4>

080097e0 <__cvt>:
 80097e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097e4:	ec55 4b10 	vmov	r4, r5, d0
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	460e      	mov	r6, r1
 80097ec:	4619      	mov	r1, r3
 80097ee:	462b      	mov	r3, r5
 80097f0:	bfbb      	ittet	lt
 80097f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097f6:	461d      	movlt	r5, r3
 80097f8:	2300      	movge	r3, #0
 80097fa:	232d      	movlt	r3, #45	; 0x2d
 80097fc:	700b      	strb	r3, [r1, #0]
 80097fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009800:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009804:	4691      	mov	r9, r2
 8009806:	f023 0820 	bic.w	r8, r3, #32
 800980a:	bfbc      	itt	lt
 800980c:	4622      	movlt	r2, r4
 800980e:	4614      	movlt	r4, r2
 8009810:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009814:	d005      	beq.n	8009822 <__cvt+0x42>
 8009816:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800981a:	d100      	bne.n	800981e <__cvt+0x3e>
 800981c:	3601      	adds	r6, #1
 800981e:	2102      	movs	r1, #2
 8009820:	e000      	b.n	8009824 <__cvt+0x44>
 8009822:	2103      	movs	r1, #3
 8009824:	ab03      	add	r3, sp, #12
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	ab02      	add	r3, sp, #8
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	ec45 4b10 	vmov	d0, r4, r5
 8009830:	4653      	mov	r3, sl
 8009832:	4632      	mov	r2, r6
 8009834:	f001 fdac 	bl	800b390 <_dtoa_r>
 8009838:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800983c:	4607      	mov	r7, r0
 800983e:	d102      	bne.n	8009846 <__cvt+0x66>
 8009840:	f019 0f01 	tst.w	r9, #1
 8009844:	d022      	beq.n	800988c <__cvt+0xac>
 8009846:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800984a:	eb07 0906 	add.w	r9, r7, r6
 800984e:	d110      	bne.n	8009872 <__cvt+0x92>
 8009850:	783b      	ldrb	r3, [r7, #0]
 8009852:	2b30      	cmp	r3, #48	; 0x30
 8009854:	d10a      	bne.n	800986c <__cvt+0x8c>
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f7 f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009862:	b918      	cbnz	r0, 800986c <__cvt+0x8c>
 8009864:	f1c6 0601 	rsb	r6, r6, #1
 8009868:	f8ca 6000 	str.w	r6, [sl]
 800986c:	f8da 3000 	ldr.w	r3, [sl]
 8009870:	4499      	add	r9, r3
 8009872:	2200      	movs	r2, #0
 8009874:	2300      	movs	r3, #0
 8009876:	4620      	mov	r0, r4
 8009878:	4629      	mov	r1, r5
 800987a:	f7f7 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800987e:	b108      	cbz	r0, 8009884 <__cvt+0xa4>
 8009880:	f8cd 900c 	str.w	r9, [sp, #12]
 8009884:	2230      	movs	r2, #48	; 0x30
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	454b      	cmp	r3, r9
 800988a:	d307      	bcc.n	800989c <__cvt+0xbc>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009890:	1bdb      	subs	r3, r3, r7
 8009892:	4638      	mov	r0, r7
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	b004      	add	sp, #16
 8009898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989c:	1c59      	adds	r1, r3, #1
 800989e:	9103      	str	r1, [sp, #12]
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e7f0      	b.n	8009886 <__cvt+0xa6>

080098a4 <__exponent>:
 80098a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098a6:	4603      	mov	r3, r0
 80098a8:	2900      	cmp	r1, #0
 80098aa:	bfb8      	it	lt
 80098ac:	4249      	neglt	r1, r1
 80098ae:	f803 2b02 	strb.w	r2, [r3], #2
 80098b2:	bfb4      	ite	lt
 80098b4:	222d      	movlt	r2, #45	; 0x2d
 80098b6:	222b      	movge	r2, #43	; 0x2b
 80098b8:	2909      	cmp	r1, #9
 80098ba:	7042      	strb	r2, [r0, #1]
 80098bc:	dd2a      	ble.n	8009914 <__exponent+0x70>
 80098be:	f10d 0407 	add.w	r4, sp, #7
 80098c2:	46a4      	mov	ip, r4
 80098c4:	270a      	movs	r7, #10
 80098c6:	46a6      	mov	lr, r4
 80098c8:	460a      	mov	r2, r1
 80098ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80098ce:	fb07 1516 	mls	r5, r7, r6, r1
 80098d2:	3530      	adds	r5, #48	; 0x30
 80098d4:	2a63      	cmp	r2, #99	; 0x63
 80098d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80098da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098de:	4631      	mov	r1, r6
 80098e0:	dcf1      	bgt.n	80098c6 <__exponent+0x22>
 80098e2:	3130      	adds	r1, #48	; 0x30
 80098e4:	f1ae 0502 	sub.w	r5, lr, #2
 80098e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098ec:	1c44      	adds	r4, r0, #1
 80098ee:	4629      	mov	r1, r5
 80098f0:	4561      	cmp	r1, ip
 80098f2:	d30a      	bcc.n	800990a <__exponent+0x66>
 80098f4:	f10d 0209 	add.w	r2, sp, #9
 80098f8:	eba2 020e 	sub.w	r2, r2, lr
 80098fc:	4565      	cmp	r5, ip
 80098fe:	bf88      	it	hi
 8009900:	2200      	movhi	r2, #0
 8009902:	4413      	add	r3, r2
 8009904:	1a18      	subs	r0, r3, r0
 8009906:	b003      	add	sp, #12
 8009908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009912:	e7ed      	b.n	80098f0 <__exponent+0x4c>
 8009914:	2330      	movs	r3, #48	; 0x30
 8009916:	3130      	adds	r1, #48	; 0x30
 8009918:	7083      	strb	r3, [r0, #2]
 800991a:	70c1      	strb	r1, [r0, #3]
 800991c:	1d03      	adds	r3, r0, #4
 800991e:	e7f1      	b.n	8009904 <__exponent+0x60>

08009920 <_printf_float>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	ed2d 8b02 	vpush	{d8}
 8009928:	b08d      	sub	sp, #52	; 0x34
 800992a:	460c      	mov	r4, r1
 800992c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009930:	4616      	mov	r6, r2
 8009932:	461f      	mov	r7, r3
 8009934:	4605      	mov	r5, r0
 8009936:	f002 fe89 	bl	800c64c <_localeconv_r>
 800993a:	f8d0 a000 	ldr.w	sl, [r0]
 800993e:	4650      	mov	r0, sl
 8009940:	f7f6 fc4e 	bl	80001e0 <strlen>
 8009944:	2300      	movs	r3, #0
 8009946:	930a      	str	r3, [sp, #40]	; 0x28
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	9305      	str	r3, [sp, #20]
 800994c:	f8d8 3000 	ldr.w	r3, [r8]
 8009950:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009954:	3307      	adds	r3, #7
 8009956:	f023 0307 	bic.w	r3, r3, #7
 800995a:	f103 0208 	add.w	r2, r3, #8
 800995e:	f8c8 2000 	str.w	r2, [r8]
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800996a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800996e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009972:	9307      	str	r3, [sp, #28]
 8009974:	f8cd 8018 	str.w	r8, [sp, #24]
 8009978:	ee08 0a10 	vmov	s16, r0
 800997c:	4b9f      	ldr	r3, [pc, #636]	; (8009bfc <_printf_float+0x2dc>)
 800997e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	f7f7 f8d9 	bl	8000b3c <__aeabi_dcmpun>
 800998a:	bb88      	cbnz	r0, 80099f0 <_printf_float+0xd0>
 800998c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009990:	4b9a      	ldr	r3, [pc, #616]	; (8009bfc <_printf_float+0x2dc>)
 8009992:	f04f 32ff 	mov.w	r2, #4294967295
 8009996:	f7f7 f8b3 	bl	8000b00 <__aeabi_dcmple>
 800999a:	bb48      	cbnz	r0, 80099f0 <_printf_float+0xd0>
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	4640      	mov	r0, r8
 80099a2:	4649      	mov	r1, r9
 80099a4:	f7f7 f8a2 	bl	8000aec <__aeabi_dcmplt>
 80099a8:	b110      	cbz	r0, 80099b0 <_printf_float+0x90>
 80099aa:	232d      	movs	r3, #45	; 0x2d
 80099ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099b0:	4b93      	ldr	r3, [pc, #588]	; (8009c00 <_printf_float+0x2e0>)
 80099b2:	4894      	ldr	r0, [pc, #592]	; (8009c04 <_printf_float+0x2e4>)
 80099b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099b8:	bf94      	ite	ls
 80099ba:	4698      	movls	r8, r3
 80099bc:	4680      	movhi	r8, r0
 80099be:	2303      	movs	r3, #3
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	9b05      	ldr	r3, [sp, #20]
 80099c4:	f023 0204 	bic.w	r2, r3, #4
 80099c8:	6022      	str	r2, [r4, #0]
 80099ca:	f04f 0900 	mov.w	r9, #0
 80099ce:	9700      	str	r7, [sp, #0]
 80099d0:	4633      	mov	r3, r6
 80099d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099d4:	4621      	mov	r1, r4
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 f9d8 	bl	8009d8c <_printf_common>
 80099dc:	3001      	adds	r0, #1
 80099de:	f040 8090 	bne.w	8009b02 <_printf_float+0x1e2>
 80099e2:	f04f 30ff 	mov.w	r0, #4294967295
 80099e6:	b00d      	add	sp, #52	; 0x34
 80099e8:	ecbd 8b02 	vpop	{d8}
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	4642      	mov	r2, r8
 80099f2:	464b      	mov	r3, r9
 80099f4:	4640      	mov	r0, r8
 80099f6:	4649      	mov	r1, r9
 80099f8:	f7f7 f8a0 	bl	8000b3c <__aeabi_dcmpun>
 80099fc:	b140      	cbz	r0, 8009a10 <_printf_float+0xf0>
 80099fe:	464b      	mov	r3, r9
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfbc      	itt	lt
 8009a04:	232d      	movlt	r3, #45	; 0x2d
 8009a06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a0a:	487f      	ldr	r0, [pc, #508]	; (8009c08 <_printf_float+0x2e8>)
 8009a0c:	4b7f      	ldr	r3, [pc, #508]	; (8009c0c <_printf_float+0x2ec>)
 8009a0e:	e7d1      	b.n	80099b4 <_printf_float+0x94>
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a16:	9206      	str	r2, [sp, #24]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	d13f      	bne.n	8009a9c <_printf_float+0x17c>
 8009a1c:	2306      	movs	r3, #6
 8009a1e:	6063      	str	r3, [r4, #4]
 8009a20:	9b05      	ldr	r3, [sp, #20]
 8009a22:	6861      	ldr	r1, [r4, #4]
 8009a24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9303      	str	r3, [sp, #12]
 8009a2c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a32:	ab09      	add	r3, sp, #36	; 0x24
 8009a34:	ec49 8b10 	vmov	d0, r8, r9
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	6022      	str	r2, [r4, #0]
 8009a3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a40:	4628      	mov	r0, r5
 8009a42:	f7ff fecd 	bl	80097e0 <__cvt>
 8009a46:	9b06      	ldr	r3, [sp, #24]
 8009a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a4a:	2b47      	cmp	r3, #71	; 0x47
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	d108      	bne.n	8009a62 <_printf_float+0x142>
 8009a50:	1cc8      	adds	r0, r1, #3
 8009a52:	db02      	blt.n	8009a5a <_printf_float+0x13a>
 8009a54:	6863      	ldr	r3, [r4, #4]
 8009a56:	4299      	cmp	r1, r3
 8009a58:	dd41      	ble.n	8009ade <_printf_float+0x1be>
 8009a5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a5e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a66:	d820      	bhi.n	8009aaa <_printf_float+0x18a>
 8009a68:	3901      	subs	r1, #1
 8009a6a:	465a      	mov	r2, fp
 8009a6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a70:	9109      	str	r1, [sp, #36]	; 0x24
 8009a72:	f7ff ff17 	bl	80098a4 <__exponent>
 8009a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a78:	1813      	adds	r3, r2, r0
 8009a7a:	2a01      	cmp	r2, #1
 8009a7c:	4681      	mov	r9, r0
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	dc02      	bgt.n	8009a88 <_printf_float+0x168>
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	07d2      	lsls	r2, r2, #31
 8009a86:	d501      	bpl.n	8009a8c <_printf_float+0x16c>
 8009a88:	3301      	adds	r3, #1
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d09c      	beq.n	80099ce <_printf_float+0xae>
 8009a94:	232d      	movs	r3, #45	; 0x2d
 8009a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a9a:	e798      	b.n	80099ce <_printf_float+0xae>
 8009a9c:	9a06      	ldr	r2, [sp, #24]
 8009a9e:	2a47      	cmp	r2, #71	; 0x47
 8009aa0:	d1be      	bne.n	8009a20 <_printf_float+0x100>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1bc      	bne.n	8009a20 <_printf_float+0x100>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e7b9      	b.n	8009a1e <_printf_float+0xfe>
 8009aaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009aae:	d118      	bne.n	8009ae2 <_printf_float+0x1c2>
 8009ab0:	2900      	cmp	r1, #0
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	dd0b      	ble.n	8009ace <_printf_float+0x1ae>
 8009ab6:	6121      	str	r1, [r4, #16]
 8009ab8:	b913      	cbnz	r3, 8009ac0 <_printf_float+0x1a0>
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	07d0      	lsls	r0, r2, #31
 8009abe:	d502      	bpl.n	8009ac6 <_printf_float+0x1a6>
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	440b      	add	r3, r1
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ac8:	f04f 0900 	mov.w	r9, #0
 8009acc:	e7de      	b.n	8009a8c <_printf_float+0x16c>
 8009ace:	b913      	cbnz	r3, 8009ad6 <_printf_float+0x1b6>
 8009ad0:	6822      	ldr	r2, [r4, #0]
 8009ad2:	07d2      	lsls	r2, r2, #31
 8009ad4:	d501      	bpl.n	8009ada <_printf_float+0x1ba>
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	e7f4      	b.n	8009ac4 <_printf_float+0x1a4>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e7f2      	b.n	8009ac4 <_printf_float+0x1a4>
 8009ade:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	db05      	blt.n	8009af4 <_printf_float+0x1d4>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	6121      	str	r1, [r4, #16]
 8009aec:	07d8      	lsls	r0, r3, #31
 8009aee:	d5ea      	bpl.n	8009ac6 <_printf_float+0x1a6>
 8009af0:	1c4b      	adds	r3, r1, #1
 8009af2:	e7e7      	b.n	8009ac4 <_printf_float+0x1a4>
 8009af4:	2900      	cmp	r1, #0
 8009af6:	bfd4      	ite	le
 8009af8:	f1c1 0202 	rsble	r2, r1, #2
 8009afc:	2201      	movgt	r2, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	e7e0      	b.n	8009ac4 <_printf_float+0x1a4>
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	055a      	lsls	r2, r3, #21
 8009b06:	d407      	bmi.n	8009b18 <_printf_float+0x1f8>
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	d12c      	bne.n	8009b70 <_printf_float+0x250>
 8009b16:	e764      	b.n	80099e2 <_printf_float+0xc2>
 8009b18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b1c:	f240 80e0 	bls.w	8009ce0 <_printf_float+0x3c0>
 8009b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f7f6 ffd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d034      	beq.n	8009b9a <_printf_float+0x27a>
 8009b30:	4a37      	ldr	r2, [pc, #220]	; (8009c10 <_printf_float+0x2f0>)
 8009b32:	2301      	movs	r3, #1
 8009b34:	4631      	mov	r1, r6
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	f43f af51 	beq.w	80099e2 <_printf_float+0xc2>
 8009b40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b44:	429a      	cmp	r2, r3
 8009b46:	db02      	blt.n	8009b4e <_printf_float+0x22e>
 8009b48:	6823      	ldr	r3, [r4, #0]
 8009b4a:	07d8      	lsls	r0, r3, #31
 8009b4c:	d510      	bpl.n	8009b70 <_printf_float+0x250>
 8009b4e:	ee18 3a10 	vmov	r3, s16
 8009b52:	4652      	mov	r2, sl
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	f43f af41 	beq.w	80099e2 <_printf_float+0xc2>
 8009b60:	f04f 0800 	mov.w	r8, #0
 8009b64:	f104 091a 	add.w	r9, r4, #26
 8009b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	4543      	cmp	r3, r8
 8009b6e:	dc09      	bgt.n	8009b84 <_printf_float+0x264>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	079b      	lsls	r3, r3, #30
 8009b74:	f100 8105 	bmi.w	8009d82 <_printf_float+0x462>
 8009b78:	68e0      	ldr	r0, [r4, #12]
 8009b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7c:	4298      	cmp	r0, r3
 8009b7e:	bfb8      	it	lt
 8009b80:	4618      	movlt	r0, r3
 8009b82:	e730      	b.n	80099e6 <_printf_float+0xc6>
 8009b84:	2301      	movs	r3, #1
 8009b86:	464a      	mov	r2, r9
 8009b88:	4631      	mov	r1, r6
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	47b8      	blx	r7
 8009b8e:	3001      	adds	r0, #1
 8009b90:	f43f af27 	beq.w	80099e2 <_printf_float+0xc2>
 8009b94:	f108 0801 	add.w	r8, r8, #1
 8009b98:	e7e6      	b.n	8009b68 <_printf_float+0x248>
 8009b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	dc39      	bgt.n	8009c14 <_printf_float+0x2f4>
 8009ba0:	4a1b      	ldr	r2, [pc, #108]	; (8009c10 <_printf_float+0x2f0>)
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f af19 	beq.w	80099e2 <_printf_float+0xc2>
 8009bb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	d102      	bne.n	8009bbe <_printf_float+0x29e>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	07d9      	lsls	r1, r3, #31
 8009bbc:	d5d8      	bpl.n	8009b70 <_printf_float+0x250>
 8009bbe:	ee18 3a10 	vmov	r3, s16
 8009bc2:	4652      	mov	r2, sl
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	47b8      	blx	r7
 8009bca:	3001      	adds	r0, #1
 8009bcc:	f43f af09 	beq.w	80099e2 <_printf_float+0xc2>
 8009bd0:	f04f 0900 	mov.w	r9, #0
 8009bd4:	f104 0a1a 	add.w	sl, r4, #26
 8009bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bda:	425b      	negs	r3, r3
 8009bdc:	454b      	cmp	r3, r9
 8009bde:	dc01      	bgt.n	8009be4 <_printf_float+0x2c4>
 8009be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be2:	e792      	b.n	8009b0a <_printf_float+0x1ea>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4652      	mov	r2, sl
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f aef7 	beq.w	80099e2 <_printf_float+0xc2>
 8009bf4:	f109 0901 	add.w	r9, r9, #1
 8009bf8:	e7ee      	b.n	8009bd8 <_printf_float+0x2b8>
 8009bfa:	bf00      	nop
 8009bfc:	7fefffff 	.word	0x7fefffff
 8009c00:	0800e150 	.word	0x0800e150
 8009c04:	0800e154 	.word	0x0800e154
 8009c08:	0800e15c 	.word	0x0800e15c
 8009c0c:	0800e158 	.word	0x0800e158
 8009c10:	0800e160 	.word	0x0800e160
 8009c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	bfa8      	it	ge
 8009c1c:	461a      	movge	r2, r3
 8009c1e:	2a00      	cmp	r2, #0
 8009c20:	4691      	mov	r9, r2
 8009c22:	dc37      	bgt.n	8009c94 <_printf_float+0x374>
 8009c24:	f04f 0b00 	mov.w	fp, #0
 8009c28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c2c:	f104 021a 	add.w	r2, r4, #26
 8009c30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c32:	9305      	str	r3, [sp, #20]
 8009c34:	eba3 0309 	sub.w	r3, r3, r9
 8009c38:	455b      	cmp	r3, fp
 8009c3a:	dc33      	bgt.n	8009ca4 <_printf_float+0x384>
 8009c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c40:	429a      	cmp	r2, r3
 8009c42:	db3b      	blt.n	8009cbc <_printf_float+0x39c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07da      	lsls	r2, r3, #31
 8009c48:	d438      	bmi.n	8009cbc <_printf_float+0x39c>
 8009c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4c:	9a05      	ldr	r2, [sp, #20]
 8009c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c50:	1a9a      	subs	r2, r3, r2
 8009c52:	eba3 0901 	sub.w	r9, r3, r1
 8009c56:	4591      	cmp	r9, r2
 8009c58:	bfa8      	it	ge
 8009c5a:	4691      	movge	r9, r2
 8009c5c:	f1b9 0f00 	cmp.w	r9, #0
 8009c60:	dc35      	bgt.n	8009cce <_printf_float+0x3ae>
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c6a:	f104 0a1a 	add.w	sl, r4, #26
 8009c6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c72:	1a9b      	subs	r3, r3, r2
 8009c74:	eba3 0309 	sub.w	r3, r3, r9
 8009c78:	4543      	cmp	r3, r8
 8009c7a:	f77f af79 	ble.w	8009b70 <_printf_float+0x250>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4652      	mov	r2, sl
 8009c82:	4631      	mov	r1, r6
 8009c84:	4628      	mov	r0, r5
 8009c86:	47b8      	blx	r7
 8009c88:	3001      	adds	r0, #1
 8009c8a:	f43f aeaa 	beq.w	80099e2 <_printf_float+0xc2>
 8009c8e:	f108 0801 	add.w	r8, r8, #1
 8009c92:	e7ec      	b.n	8009c6e <_printf_float+0x34e>
 8009c94:	4613      	mov	r3, r2
 8009c96:	4631      	mov	r1, r6
 8009c98:	4642      	mov	r2, r8
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d1c0      	bne.n	8009c24 <_printf_float+0x304>
 8009ca2:	e69e      	b.n	80099e2 <_printf_float+0xc2>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	9205      	str	r2, [sp, #20]
 8009cac:	47b8      	blx	r7
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f43f ae97 	beq.w	80099e2 <_printf_float+0xc2>
 8009cb4:	9a05      	ldr	r2, [sp, #20]
 8009cb6:	f10b 0b01 	add.w	fp, fp, #1
 8009cba:	e7b9      	b.n	8009c30 <_printf_float+0x310>
 8009cbc:	ee18 3a10 	vmov	r3, s16
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d1be      	bne.n	8009c4a <_printf_float+0x32a>
 8009ccc:	e689      	b.n	80099e2 <_printf_float+0xc2>
 8009cce:	9a05      	ldr	r2, [sp, #20]
 8009cd0:	464b      	mov	r3, r9
 8009cd2:	4442      	add	r2, r8
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	d1c1      	bne.n	8009c62 <_printf_float+0x342>
 8009cde:	e680      	b.n	80099e2 <_printf_float+0xc2>
 8009ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ce2:	2a01      	cmp	r2, #1
 8009ce4:	dc01      	bgt.n	8009cea <_printf_float+0x3ca>
 8009ce6:	07db      	lsls	r3, r3, #31
 8009ce8:	d538      	bpl.n	8009d5c <_printf_float+0x43c>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4642      	mov	r2, r8
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f ae74 	beq.w	80099e2 <_printf_float+0xc2>
 8009cfa:	ee18 3a10 	vmov	r3, s16
 8009cfe:	4652      	mov	r2, sl
 8009d00:	4631      	mov	r1, r6
 8009d02:	4628      	mov	r0, r5
 8009d04:	47b8      	blx	r7
 8009d06:	3001      	adds	r0, #1
 8009d08:	f43f ae6b 	beq.w	80099e2 <_printf_float+0xc2>
 8009d0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d10:	2200      	movs	r2, #0
 8009d12:	2300      	movs	r3, #0
 8009d14:	f7f6 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d18:	b9d8      	cbnz	r0, 8009d52 <_printf_float+0x432>
 8009d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1c:	f108 0201 	add.w	r2, r8, #1
 8009d20:	3b01      	subs	r3, #1
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d10e      	bne.n	8009d4a <_printf_float+0x42a>
 8009d2c:	e659      	b.n	80099e2 <_printf_float+0xc2>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4652      	mov	r2, sl
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b8      	blx	r7
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f43f ae52 	beq.w	80099e2 <_printf_float+0xc2>
 8009d3e:	f108 0801 	add.w	r8, r8, #1
 8009d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d44:	3b01      	subs	r3, #1
 8009d46:	4543      	cmp	r3, r8
 8009d48:	dcf1      	bgt.n	8009d2e <_printf_float+0x40e>
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d50:	e6dc      	b.n	8009b0c <_printf_float+0x1ec>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	f104 0a1a 	add.w	sl, r4, #26
 8009d5a:	e7f2      	b.n	8009d42 <_printf_float+0x422>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4642      	mov	r2, r8
 8009d60:	e7df      	b.n	8009d22 <_printf_float+0x402>
 8009d62:	2301      	movs	r3, #1
 8009d64:	464a      	mov	r2, r9
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f43f ae38 	beq.w	80099e2 <_printf_float+0xc2>
 8009d72:	f108 0801 	add.w	r8, r8, #1
 8009d76:	68e3      	ldr	r3, [r4, #12]
 8009d78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d7a:	1a5b      	subs	r3, r3, r1
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	dcf0      	bgt.n	8009d62 <_printf_float+0x442>
 8009d80:	e6fa      	b.n	8009b78 <_printf_float+0x258>
 8009d82:	f04f 0800 	mov.w	r8, #0
 8009d86:	f104 0919 	add.w	r9, r4, #25
 8009d8a:	e7f4      	b.n	8009d76 <_printf_float+0x456>

08009d8c <_printf_common>:
 8009d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d90:	4616      	mov	r6, r2
 8009d92:	4699      	mov	r9, r3
 8009d94:	688a      	ldr	r2, [r1, #8]
 8009d96:	690b      	ldr	r3, [r1, #16]
 8009d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	bfb8      	it	lt
 8009da0:	4613      	movlt	r3, r2
 8009da2:	6033      	str	r3, [r6, #0]
 8009da4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009da8:	4607      	mov	r7, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	b10a      	cbz	r2, 8009db2 <_printf_common+0x26>
 8009dae:	3301      	adds	r3, #1
 8009db0:	6033      	str	r3, [r6, #0]
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	0699      	lsls	r1, r3, #26
 8009db6:	bf42      	ittt	mi
 8009db8:	6833      	ldrmi	r3, [r6, #0]
 8009dba:	3302      	addmi	r3, #2
 8009dbc:	6033      	strmi	r3, [r6, #0]
 8009dbe:	6825      	ldr	r5, [r4, #0]
 8009dc0:	f015 0506 	ands.w	r5, r5, #6
 8009dc4:	d106      	bne.n	8009dd4 <_printf_common+0x48>
 8009dc6:	f104 0a19 	add.w	sl, r4, #25
 8009dca:	68e3      	ldr	r3, [r4, #12]
 8009dcc:	6832      	ldr	r2, [r6, #0]
 8009dce:	1a9b      	subs	r3, r3, r2
 8009dd0:	42ab      	cmp	r3, r5
 8009dd2:	dc26      	bgt.n	8009e22 <_printf_common+0x96>
 8009dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dd8:	1e13      	subs	r3, r2, #0
 8009dda:	6822      	ldr	r2, [r4, #0]
 8009ddc:	bf18      	it	ne
 8009dde:	2301      	movne	r3, #1
 8009de0:	0692      	lsls	r2, r2, #26
 8009de2:	d42b      	bmi.n	8009e3c <_printf_common+0xb0>
 8009de4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009de8:	4649      	mov	r1, r9
 8009dea:	4638      	mov	r0, r7
 8009dec:	47c0      	blx	r8
 8009dee:	3001      	adds	r0, #1
 8009df0:	d01e      	beq.n	8009e30 <_printf_common+0xa4>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	68e5      	ldr	r5, [r4, #12]
 8009df6:	6832      	ldr	r2, [r6, #0]
 8009df8:	f003 0306 	and.w	r3, r3, #6
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	bf08      	it	eq
 8009e00:	1aad      	subeq	r5, r5, r2
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	6922      	ldr	r2, [r4, #16]
 8009e06:	bf0c      	ite	eq
 8009e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e0c:	2500      	movne	r5, #0
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	bfc4      	itt	gt
 8009e12:	1a9b      	subgt	r3, r3, r2
 8009e14:	18ed      	addgt	r5, r5, r3
 8009e16:	2600      	movs	r6, #0
 8009e18:	341a      	adds	r4, #26
 8009e1a:	42b5      	cmp	r5, r6
 8009e1c:	d11a      	bne.n	8009e54 <_printf_common+0xc8>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e008      	b.n	8009e34 <_printf_common+0xa8>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4652      	mov	r2, sl
 8009e26:	4649      	mov	r1, r9
 8009e28:	4638      	mov	r0, r7
 8009e2a:	47c0      	blx	r8
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d103      	bne.n	8009e38 <_printf_common+0xac>
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295
 8009e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e38:	3501      	adds	r5, #1
 8009e3a:	e7c6      	b.n	8009dca <_printf_common+0x3e>
 8009e3c:	18e1      	adds	r1, r4, r3
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	2030      	movs	r0, #48	; 0x30
 8009e42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e46:	4422      	add	r2, r4
 8009e48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e50:	3302      	adds	r3, #2
 8009e52:	e7c7      	b.n	8009de4 <_printf_common+0x58>
 8009e54:	2301      	movs	r3, #1
 8009e56:	4622      	mov	r2, r4
 8009e58:	4649      	mov	r1, r9
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	47c0      	blx	r8
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d0e6      	beq.n	8009e30 <_printf_common+0xa4>
 8009e62:	3601      	adds	r6, #1
 8009e64:	e7d9      	b.n	8009e1a <_printf_common+0x8e>
	...

08009e68 <_printf_i>:
 8009e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	7e0f      	ldrb	r7, [r1, #24]
 8009e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e70:	2f78      	cmp	r7, #120	; 0x78
 8009e72:	4691      	mov	r9, r2
 8009e74:	4680      	mov	r8, r0
 8009e76:	460c      	mov	r4, r1
 8009e78:	469a      	mov	sl, r3
 8009e7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e7e:	d807      	bhi.n	8009e90 <_printf_i+0x28>
 8009e80:	2f62      	cmp	r7, #98	; 0x62
 8009e82:	d80a      	bhi.n	8009e9a <_printf_i+0x32>
 8009e84:	2f00      	cmp	r7, #0
 8009e86:	f000 80d8 	beq.w	800a03a <_printf_i+0x1d2>
 8009e8a:	2f58      	cmp	r7, #88	; 0x58
 8009e8c:	f000 80a3 	beq.w	8009fd6 <_printf_i+0x16e>
 8009e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e98:	e03a      	b.n	8009f10 <_printf_i+0xa8>
 8009e9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e9e:	2b15      	cmp	r3, #21
 8009ea0:	d8f6      	bhi.n	8009e90 <_printf_i+0x28>
 8009ea2:	a101      	add	r1, pc, #4	; (adr r1, 8009ea8 <_printf_i+0x40>)
 8009ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ea8:	08009f01 	.word	0x08009f01
 8009eac:	08009f15 	.word	0x08009f15
 8009eb0:	08009e91 	.word	0x08009e91
 8009eb4:	08009e91 	.word	0x08009e91
 8009eb8:	08009e91 	.word	0x08009e91
 8009ebc:	08009e91 	.word	0x08009e91
 8009ec0:	08009f15 	.word	0x08009f15
 8009ec4:	08009e91 	.word	0x08009e91
 8009ec8:	08009e91 	.word	0x08009e91
 8009ecc:	08009e91 	.word	0x08009e91
 8009ed0:	08009e91 	.word	0x08009e91
 8009ed4:	0800a021 	.word	0x0800a021
 8009ed8:	08009f45 	.word	0x08009f45
 8009edc:	0800a003 	.word	0x0800a003
 8009ee0:	08009e91 	.word	0x08009e91
 8009ee4:	08009e91 	.word	0x08009e91
 8009ee8:	0800a043 	.word	0x0800a043
 8009eec:	08009e91 	.word	0x08009e91
 8009ef0:	08009f45 	.word	0x08009f45
 8009ef4:	08009e91 	.word	0x08009e91
 8009ef8:	08009e91 	.word	0x08009e91
 8009efc:	0800a00b 	.word	0x0800a00b
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	1d1a      	adds	r2, r3, #4
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	602a      	str	r2, [r5, #0]
 8009f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f10:	2301      	movs	r3, #1
 8009f12:	e0a3      	b.n	800a05c <_printf_i+0x1f4>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	6829      	ldr	r1, [r5, #0]
 8009f18:	0606      	lsls	r6, r0, #24
 8009f1a:	f101 0304 	add.w	r3, r1, #4
 8009f1e:	d50a      	bpl.n	8009f36 <_printf_i+0xce>
 8009f20:	680e      	ldr	r6, [r1, #0]
 8009f22:	602b      	str	r3, [r5, #0]
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	da03      	bge.n	8009f30 <_printf_i+0xc8>
 8009f28:	232d      	movs	r3, #45	; 0x2d
 8009f2a:	4276      	negs	r6, r6
 8009f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f30:	485e      	ldr	r0, [pc, #376]	; (800a0ac <_printf_i+0x244>)
 8009f32:	230a      	movs	r3, #10
 8009f34:	e019      	b.n	8009f6a <_printf_i+0x102>
 8009f36:	680e      	ldr	r6, [r1, #0]
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f3e:	bf18      	it	ne
 8009f40:	b236      	sxthne	r6, r6
 8009f42:	e7ef      	b.n	8009f24 <_printf_i+0xbc>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	6820      	ldr	r0, [r4, #0]
 8009f48:	1d19      	adds	r1, r3, #4
 8009f4a:	6029      	str	r1, [r5, #0]
 8009f4c:	0601      	lsls	r1, r0, #24
 8009f4e:	d501      	bpl.n	8009f54 <_printf_i+0xec>
 8009f50:	681e      	ldr	r6, [r3, #0]
 8009f52:	e002      	b.n	8009f5a <_printf_i+0xf2>
 8009f54:	0646      	lsls	r6, r0, #25
 8009f56:	d5fb      	bpl.n	8009f50 <_printf_i+0xe8>
 8009f58:	881e      	ldrh	r6, [r3, #0]
 8009f5a:	4854      	ldr	r0, [pc, #336]	; (800a0ac <_printf_i+0x244>)
 8009f5c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f5e:	bf0c      	ite	eq
 8009f60:	2308      	moveq	r3, #8
 8009f62:	230a      	movne	r3, #10
 8009f64:	2100      	movs	r1, #0
 8009f66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f6a:	6865      	ldr	r5, [r4, #4]
 8009f6c:	60a5      	str	r5, [r4, #8]
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	bfa2      	ittt	ge
 8009f72:	6821      	ldrge	r1, [r4, #0]
 8009f74:	f021 0104 	bicge.w	r1, r1, #4
 8009f78:	6021      	strge	r1, [r4, #0]
 8009f7a:	b90e      	cbnz	r6, 8009f80 <_printf_i+0x118>
 8009f7c:	2d00      	cmp	r5, #0
 8009f7e:	d04d      	beq.n	800a01c <_printf_i+0x1b4>
 8009f80:	4615      	mov	r5, r2
 8009f82:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f86:	fb03 6711 	mls	r7, r3, r1, r6
 8009f8a:	5dc7      	ldrb	r7, [r0, r7]
 8009f8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f90:	4637      	mov	r7, r6
 8009f92:	42bb      	cmp	r3, r7
 8009f94:	460e      	mov	r6, r1
 8009f96:	d9f4      	bls.n	8009f82 <_printf_i+0x11a>
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d10b      	bne.n	8009fb4 <_printf_i+0x14c>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	07de      	lsls	r6, r3, #31
 8009fa0:	d508      	bpl.n	8009fb4 <_printf_i+0x14c>
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	6861      	ldr	r1, [r4, #4]
 8009fa6:	4299      	cmp	r1, r3
 8009fa8:	bfde      	ittt	le
 8009faa:	2330      	movle	r3, #48	; 0x30
 8009fac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fb4:	1b52      	subs	r2, r2, r5
 8009fb6:	6122      	str	r2, [r4, #16]
 8009fb8:	f8cd a000 	str.w	sl, [sp]
 8009fbc:	464b      	mov	r3, r9
 8009fbe:	aa03      	add	r2, sp, #12
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f7ff fee2 	bl	8009d8c <_printf_common>
 8009fc8:	3001      	adds	r0, #1
 8009fca:	d14c      	bne.n	800a066 <_printf_i+0x1fe>
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	b004      	add	sp, #16
 8009fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd6:	4835      	ldr	r0, [pc, #212]	; (800a0ac <_printf_i+0x244>)
 8009fd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fdc:	6829      	ldr	r1, [r5, #0]
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fe4:	6029      	str	r1, [r5, #0]
 8009fe6:	061d      	lsls	r5, r3, #24
 8009fe8:	d514      	bpl.n	800a014 <_printf_i+0x1ac>
 8009fea:	07df      	lsls	r7, r3, #31
 8009fec:	bf44      	itt	mi
 8009fee:	f043 0320 	orrmi.w	r3, r3, #32
 8009ff2:	6023      	strmi	r3, [r4, #0]
 8009ff4:	b91e      	cbnz	r6, 8009ffe <_printf_i+0x196>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	f023 0320 	bic.w	r3, r3, #32
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	2310      	movs	r3, #16
 800a000:	e7b0      	b.n	8009f64 <_printf_i+0xfc>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	f043 0320 	orr.w	r3, r3, #32
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	2378      	movs	r3, #120	; 0x78
 800a00c:	4828      	ldr	r0, [pc, #160]	; (800a0b0 <_printf_i+0x248>)
 800a00e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a012:	e7e3      	b.n	8009fdc <_printf_i+0x174>
 800a014:	0659      	lsls	r1, r3, #25
 800a016:	bf48      	it	mi
 800a018:	b2b6      	uxthmi	r6, r6
 800a01a:	e7e6      	b.n	8009fea <_printf_i+0x182>
 800a01c:	4615      	mov	r5, r2
 800a01e:	e7bb      	b.n	8009f98 <_printf_i+0x130>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	6826      	ldr	r6, [r4, #0]
 800a024:	6961      	ldr	r1, [r4, #20]
 800a026:	1d18      	adds	r0, r3, #4
 800a028:	6028      	str	r0, [r5, #0]
 800a02a:	0635      	lsls	r5, r6, #24
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	d501      	bpl.n	800a034 <_printf_i+0x1cc>
 800a030:	6019      	str	r1, [r3, #0]
 800a032:	e002      	b.n	800a03a <_printf_i+0x1d2>
 800a034:	0670      	lsls	r0, r6, #25
 800a036:	d5fb      	bpl.n	800a030 <_printf_i+0x1c8>
 800a038:	8019      	strh	r1, [r3, #0]
 800a03a:	2300      	movs	r3, #0
 800a03c:	6123      	str	r3, [r4, #16]
 800a03e:	4615      	mov	r5, r2
 800a040:	e7ba      	b.n	8009fb8 <_printf_i+0x150>
 800a042:	682b      	ldr	r3, [r5, #0]
 800a044:	1d1a      	adds	r2, r3, #4
 800a046:	602a      	str	r2, [r5, #0]
 800a048:	681d      	ldr	r5, [r3, #0]
 800a04a:	6862      	ldr	r2, [r4, #4]
 800a04c:	2100      	movs	r1, #0
 800a04e:	4628      	mov	r0, r5
 800a050:	f7f6 f8ce 	bl	80001f0 <memchr>
 800a054:	b108      	cbz	r0, 800a05a <_printf_i+0x1f2>
 800a056:	1b40      	subs	r0, r0, r5
 800a058:	6060      	str	r0, [r4, #4]
 800a05a:	6863      	ldr	r3, [r4, #4]
 800a05c:	6123      	str	r3, [r4, #16]
 800a05e:	2300      	movs	r3, #0
 800a060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a064:	e7a8      	b.n	8009fb8 <_printf_i+0x150>
 800a066:	6923      	ldr	r3, [r4, #16]
 800a068:	462a      	mov	r2, r5
 800a06a:	4649      	mov	r1, r9
 800a06c:	4640      	mov	r0, r8
 800a06e:	47d0      	blx	sl
 800a070:	3001      	adds	r0, #1
 800a072:	d0ab      	beq.n	8009fcc <_printf_i+0x164>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	079b      	lsls	r3, r3, #30
 800a078:	d413      	bmi.n	800a0a2 <_printf_i+0x23a>
 800a07a:	68e0      	ldr	r0, [r4, #12]
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	4298      	cmp	r0, r3
 800a080:	bfb8      	it	lt
 800a082:	4618      	movlt	r0, r3
 800a084:	e7a4      	b.n	8009fd0 <_printf_i+0x168>
 800a086:	2301      	movs	r3, #1
 800a088:	4632      	mov	r2, r6
 800a08a:	4649      	mov	r1, r9
 800a08c:	4640      	mov	r0, r8
 800a08e:	47d0      	blx	sl
 800a090:	3001      	adds	r0, #1
 800a092:	d09b      	beq.n	8009fcc <_printf_i+0x164>
 800a094:	3501      	adds	r5, #1
 800a096:	68e3      	ldr	r3, [r4, #12]
 800a098:	9903      	ldr	r1, [sp, #12]
 800a09a:	1a5b      	subs	r3, r3, r1
 800a09c:	42ab      	cmp	r3, r5
 800a09e:	dcf2      	bgt.n	800a086 <_printf_i+0x21e>
 800a0a0:	e7eb      	b.n	800a07a <_printf_i+0x212>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	f104 0619 	add.w	r6, r4, #25
 800a0a8:	e7f5      	b.n	800a096 <_printf_i+0x22e>
 800a0aa:	bf00      	nop
 800a0ac:	0800e162 	.word	0x0800e162
 800a0b0:	0800e173 	.word	0x0800e173

0800a0b4 <_scanf_float>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	b087      	sub	sp, #28
 800a0ba:	4617      	mov	r7, r2
 800a0bc:	9303      	str	r3, [sp, #12]
 800a0be:	688b      	ldr	r3, [r1, #8]
 800a0c0:	1e5a      	subs	r2, r3, #1
 800a0c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0c6:	bf83      	ittte	hi
 800a0c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0cc:	195b      	addhi	r3, r3, r5
 800a0ce:	9302      	strhi	r3, [sp, #8]
 800a0d0:	2300      	movls	r3, #0
 800a0d2:	bf86      	itte	hi
 800a0d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0d8:	608b      	strhi	r3, [r1, #8]
 800a0da:	9302      	strls	r3, [sp, #8]
 800a0dc:	680b      	ldr	r3, [r1, #0]
 800a0de:	468b      	mov	fp, r1
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0e6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	465e      	mov	r6, fp
 800a0f4:	46aa      	mov	sl, r5
 800a0f6:	46a9      	mov	r9, r5
 800a0f8:	9501      	str	r5, [sp, #4]
 800a0fa:	68a2      	ldr	r2, [r4, #8]
 800a0fc:	b152      	cbz	r2, 800a114 <_scanf_float+0x60>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b4e      	cmp	r3, #78	; 0x4e
 800a104:	d864      	bhi.n	800a1d0 <_scanf_float+0x11c>
 800a106:	2b40      	cmp	r3, #64	; 0x40
 800a108:	d83c      	bhi.n	800a184 <_scanf_float+0xd0>
 800a10a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a10e:	b2c8      	uxtb	r0, r1
 800a110:	280e      	cmp	r0, #14
 800a112:	d93a      	bls.n	800a18a <_scanf_float+0xd6>
 800a114:	f1b9 0f00 	cmp.w	r9, #0
 800a118:	d003      	beq.n	800a122 <_scanf_float+0x6e>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a126:	f1ba 0f01 	cmp.w	sl, #1
 800a12a:	f200 8113 	bhi.w	800a354 <_scanf_float+0x2a0>
 800a12e:	455e      	cmp	r6, fp
 800a130:	f200 8105 	bhi.w	800a33e <_scanf_float+0x28a>
 800a134:	2501      	movs	r5, #1
 800a136:	4628      	mov	r0, r5
 800a138:	b007      	add	sp, #28
 800a13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a142:	2a0d      	cmp	r2, #13
 800a144:	d8e6      	bhi.n	800a114 <_scanf_float+0x60>
 800a146:	a101      	add	r1, pc, #4	; (adr r1, 800a14c <_scanf_float+0x98>)
 800a148:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a14c:	0800a28b 	.word	0x0800a28b
 800a150:	0800a115 	.word	0x0800a115
 800a154:	0800a115 	.word	0x0800a115
 800a158:	0800a115 	.word	0x0800a115
 800a15c:	0800a2eb 	.word	0x0800a2eb
 800a160:	0800a2c3 	.word	0x0800a2c3
 800a164:	0800a115 	.word	0x0800a115
 800a168:	0800a115 	.word	0x0800a115
 800a16c:	0800a299 	.word	0x0800a299
 800a170:	0800a115 	.word	0x0800a115
 800a174:	0800a115 	.word	0x0800a115
 800a178:	0800a115 	.word	0x0800a115
 800a17c:	0800a115 	.word	0x0800a115
 800a180:	0800a251 	.word	0x0800a251
 800a184:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a188:	e7db      	b.n	800a142 <_scanf_float+0x8e>
 800a18a:	290e      	cmp	r1, #14
 800a18c:	d8c2      	bhi.n	800a114 <_scanf_float+0x60>
 800a18e:	a001      	add	r0, pc, #4	; (adr r0, 800a194 <_scanf_float+0xe0>)
 800a190:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a194:	0800a243 	.word	0x0800a243
 800a198:	0800a115 	.word	0x0800a115
 800a19c:	0800a243 	.word	0x0800a243
 800a1a0:	0800a2d7 	.word	0x0800a2d7
 800a1a4:	0800a115 	.word	0x0800a115
 800a1a8:	0800a1f1 	.word	0x0800a1f1
 800a1ac:	0800a22d 	.word	0x0800a22d
 800a1b0:	0800a22d 	.word	0x0800a22d
 800a1b4:	0800a22d 	.word	0x0800a22d
 800a1b8:	0800a22d 	.word	0x0800a22d
 800a1bc:	0800a22d 	.word	0x0800a22d
 800a1c0:	0800a22d 	.word	0x0800a22d
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a22d 	.word	0x0800a22d
 800a1cc:	0800a22d 	.word	0x0800a22d
 800a1d0:	2b6e      	cmp	r3, #110	; 0x6e
 800a1d2:	d809      	bhi.n	800a1e8 <_scanf_float+0x134>
 800a1d4:	2b60      	cmp	r3, #96	; 0x60
 800a1d6:	d8b2      	bhi.n	800a13e <_scanf_float+0x8a>
 800a1d8:	2b54      	cmp	r3, #84	; 0x54
 800a1da:	d077      	beq.n	800a2cc <_scanf_float+0x218>
 800a1dc:	2b59      	cmp	r3, #89	; 0x59
 800a1de:	d199      	bne.n	800a114 <_scanf_float+0x60>
 800a1e0:	2d07      	cmp	r5, #7
 800a1e2:	d197      	bne.n	800a114 <_scanf_float+0x60>
 800a1e4:	2508      	movs	r5, #8
 800a1e6:	e029      	b.n	800a23c <_scanf_float+0x188>
 800a1e8:	2b74      	cmp	r3, #116	; 0x74
 800a1ea:	d06f      	beq.n	800a2cc <_scanf_float+0x218>
 800a1ec:	2b79      	cmp	r3, #121	; 0x79
 800a1ee:	e7f6      	b.n	800a1de <_scanf_float+0x12a>
 800a1f0:	6821      	ldr	r1, [r4, #0]
 800a1f2:	05c8      	lsls	r0, r1, #23
 800a1f4:	d51a      	bpl.n	800a22c <_scanf_float+0x178>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1fc:	6021      	str	r1, [r4, #0]
 800a1fe:	f109 0901 	add.w	r9, r9, #1
 800a202:	b11b      	cbz	r3, 800a20c <_scanf_float+0x158>
 800a204:	3b01      	subs	r3, #1
 800a206:	3201      	adds	r2, #1
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	60a2      	str	r2, [r4, #8]
 800a20c:	68a3      	ldr	r3, [r4, #8]
 800a20e:	3b01      	subs	r3, #1
 800a210:	60a3      	str	r3, [r4, #8]
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	3301      	adds	r3, #1
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	607b      	str	r3, [r7, #4]
 800a220:	f340 8084 	ble.w	800a32c <_scanf_float+0x278>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	603b      	str	r3, [r7, #0]
 800a22a:	e766      	b.n	800a0fa <_scanf_float+0x46>
 800a22c:	eb1a 0f05 	cmn.w	sl, r5
 800a230:	f47f af70 	bne.w	800a114 <_scanf_float+0x60>
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a23a:	6022      	str	r2, [r4, #0]
 800a23c:	f806 3b01 	strb.w	r3, [r6], #1
 800a240:	e7e4      	b.n	800a20c <_scanf_float+0x158>
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	0610      	lsls	r0, r2, #24
 800a246:	f57f af65 	bpl.w	800a114 <_scanf_float+0x60>
 800a24a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a24e:	e7f4      	b.n	800a23a <_scanf_float+0x186>
 800a250:	f1ba 0f00 	cmp.w	sl, #0
 800a254:	d10e      	bne.n	800a274 <_scanf_float+0x1c0>
 800a256:	f1b9 0f00 	cmp.w	r9, #0
 800a25a:	d10e      	bne.n	800a27a <_scanf_float+0x1c6>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a262:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a266:	d108      	bne.n	800a27a <_scanf_float+0x1c6>
 800a268:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	f04f 0a01 	mov.w	sl, #1
 800a272:	e7e3      	b.n	800a23c <_scanf_float+0x188>
 800a274:	f1ba 0f02 	cmp.w	sl, #2
 800a278:	d055      	beq.n	800a326 <_scanf_float+0x272>
 800a27a:	2d01      	cmp	r5, #1
 800a27c:	d002      	beq.n	800a284 <_scanf_float+0x1d0>
 800a27e:	2d04      	cmp	r5, #4
 800a280:	f47f af48 	bne.w	800a114 <_scanf_float+0x60>
 800a284:	3501      	adds	r5, #1
 800a286:	b2ed      	uxtb	r5, r5
 800a288:	e7d8      	b.n	800a23c <_scanf_float+0x188>
 800a28a:	f1ba 0f01 	cmp.w	sl, #1
 800a28e:	f47f af41 	bne.w	800a114 <_scanf_float+0x60>
 800a292:	f04f 0a02 	mov.w	sl, #2
 800a296:	e7d1      	b.n	800a23c <_scanf_float+0x188>
 800a298:	b97d      	cbnz	r5, 800a2ba <_scanf_float+0x206>
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	f47f af3c 	bne.w	800a11a <_scanf_float+0x66>
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2ac:	f47f af39 	bne.w	800a122 <_scanf_float+0x6e>
 800a2b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2b4:	6022      	str	r2, [r4, #0]
 800a2b6:	2501      	movs	r5, #1
 800a2b8:	e7c0      	b.n	800a23c <_scanf_float+0x188>
 800a2ba:	2d03      	cmp	r5, #3
 800a2bc:	d0e2      	beq.n	800a284 <_scanf_float+0x1d0>
 800a2be:	2d05      	cmp	r5, #5
 800a2c0:	e7de      	b.n	800a280 <_scanf_float+0x1cc>
 800a2c2:	2d02      	cmp	r5, #2
 800a2c4:	f47f af26 	bne.w	800a114 <_scanf_float+0x60>
 800a2c8:	2503      	movs	r5, #3
 800a2ca:	e7b7      	b.n	800a23c <_scanf_float+0x188>
 800a2cc:	2d06      	cmp	r5, #6
 800a2ce:	f47f af21 	bne.w	800a114 <_scanf_float+0x60>
 800a2d2:	2507      	movs	r5, #7
 800a2d4:	e7b2      	b.n	800a23c <_scanf_float+0x188>
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	0591      	lsls	r1, r2, #22
 800a2da:	f57f af1b 	bpl.w	800a114 <_scanf_float+0x60>
 800a2de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2e2:	6022      	str	r2, [r4, #0]
 800a2e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2e8:	e7a8      	b.n	800a23c <_scanf_float+0x188>
 800a2ea:	6822      	ldr	r2, [r4, #0]
 800a2ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2f4:	d006      	beq.n	800a304 <_scanf_float+0x250>
 800a2f6:	0550      	lsls	r0, r2, #21
 800a2f8:	f57f af0c 	bpl.w	800a114 <_scanf_float+0x60>
 800a2fc:	f1b9 0f00 	cmp.w	r9, #0
 800a300:	f43f af0f 	beq.w	800a122 <_scanf_float+0x6e>
 800a304:	0591      	lsls	r1, r2, #22
 800a306:	bf58      	it	pl
 800a308:	9901      	ldrpl	r1, [sp, #4]
 800a30a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a30e:	bf58      	it	pl
 800a310:	eba9 0101 	subpl.w	r1, r9, r1
 800a314:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a318:	bf58      	it	pl
 800a31a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a31e:	6022      	str	r2, [r4, #0]
 800a320:	f04f 0900 	mov.w	r9, #0
 800a324:	e78a      	b.n	800a23c <_scanf_float+0x188>
 800a326:	f04f 0a03 	mov.w	sl, #3
 800a32a:	e787      	b.n	800a23c <_scanf_float+0x188>
 800a32c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a330:	4639      	mov	r1, r7
 800a332:	4640      	mov	r0, r8
 800a334:	4798      	blx	r3
 800a336:	2800      	cmp	r0, #0
 800a338:	f43f aedf 	beq.w	800a0fa <_scanf_float+0x46>
 800a33c:	e6ea      	b.n	800a114 <_scanf_float+0x60>
 800a33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a346:	463a      	mov	r2, r7
 800a348:	4640      	mov	r0, r8
 800a34a:	4798      	blx	r3
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	3b01      	subs	r3, #1
 800a350:	6123      	str	r3, [r4, #16]
 800a352:	e6ec      	b.n	800a12e <_scanf_float+0x7a>
 800a354:	1e6b      	subs	r3, r5, #1
 800a356:	2b06      	cmp	r3, #6
 800a358:	d825      	bhi.n	800a3a6 <_scanf_float+0x2f2>
 800a35a:	2d02      	cmp	r5, #2
 800a35c:	d836      	bhi.n	800a3cc <_scanf_float+0x318>
 800a35e:	455e      	cmp	r6, fp
 800a360:	f67f aee8 	bls.w	800a134 <_scanf_float+0x80>
 800a364:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a368:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a36c:	463a      	mov	r2, r7
 800a36e:	4640      	mov	r0, r8
 800a370:	4798      	blx	r3
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	3b01      	subs	r3, #1
 800a376:	6123      	str	r3, [r4, #16]
 800a378:	e7f1      	b.n	800a35e <_scanf_float+0x2aa>
 800a37a:	9802      	ldr	r0, [sp, #8]
 800a37c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a380:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a384:	9002      	str	r0, [sp, #8]
 800a386:	463a      	mov	r2, r7
 800a388:	4640      	mov	r0, r8
 800a38a:	4798      	blx	r3
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	3b01      	subs	r3, #1
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a396:	fa5f fa8a 	uxtb.w	sl, sl
 800a39a:	f1ba 0f02 	cmp.w	sl, #2
 800a39e:	d1ec      	bne.n	800a37a <_scanf_float+0x2c6>
 800a3a0:	3d03      	subs	r5, #3
 800a3a2:	b2ed      	uxtb	r5, r5
 800a3a4:	1b76      	subs	r6, r6, r5
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	05da      	lsls	r2, r3, #23
 800a3aa:	d52f      	bpl.n	800a40c <_scanf_float+0x358>
 800a3ac:	055b      	lsls	r3, r3, #21
 800a3ae:	d510      	bpl.n	800a3d2 <_scanf_float+0x31e>
 800a3b0:	455e      	cmp	r6, fp
 800a3b2:	f67f aebf 	bls.w	800a134 <_scanf_float+0x80>
 800a3b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3be:	463a      	mov	r2, r7
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4798      	blx	r3
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	e7f1      	b.n	800a3b0 <_scanf_float+0x2fc>
 800a3cc:	46aa      	mov	sl, r5
 800a3ce:	9602      	str	r6, [sp, #8]
 800a3d0:	e7df      	b.n	800a392 <_scanf_float+0x2de>
 800a3d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	2965      	cmp	r1, #101	; 0x65
 800a3da:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3de:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3e2:	6123      	str	r3, [r4, #16]
 800a3e4:	d00c      	beq.n	800a400 <_scanf_float+0x34c>
 800a3e6:	2945      	cmp	r1, #69	; 0x45
 800a3e8:	d00a      	beq.n	800a400 <_scanf_float+0x34c>
 800a3ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ee:	463a      	mov	r2, r7
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4798      	blx	r3
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	1eb5      	subs	r5, r6, #2
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a404:	463a      	mov	r2, r7
 800a406:	4640      	mov	r0, r8
 800a408:	4798      	blx	r3
 800a40a:	462e      	mov	r6, r5
 800a40c:	6825      	ldr	r5, [r4, #0]
 800a40e:	f015 0510 	ands.w	r5, r5, #16
 800a412:	d159      	bne.n	800a4c8 <_scanf_float+0x414>
 800a414:	7035      	strb	r5, [r6, #0]
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a41c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a420:	d11b      	bne.n	800a45a <_scanf_float+0x3a6>
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	454b      	cmp	r3, r9
 800a426:	eba3 0209 	sub.w	r2, r3, r9
 800a42a:	d123      	bne.n	800a474 <_scanf_float+0x3c0>
 800a42c:	2200      	movs	r2, #0
 800a42e:	4659      	mov	r1, fp
 800a430:	4640      	mov	r0, r8
 800a432:	f000 fe97 	bl	800b164 <_strtod_r>
 800a436:	6822      	ldr	r2, [r4, #0]
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	f012 0f02 	tst.w	r2, #2
 800a43e:	ec57 6b10 	vmov	r6, r7, d0
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	d021      	beq.n	800a48a <_scanf_float+0x3d6>
 800a446:	9903      	ldr	r1, [sp, #12]
 800a448:	1d1a      	adds	r2, r3, #4
 800a44a:	600a      	str	r2, [r1, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	e9c3 6700 	strd	r6, r7, [r3]
 800a452:	68e3      	ldr	r3, [r4, #12]
 800a454:	3301      	adds	r3, #1
 800a456:	60e3      	str	r3, [r4, #12]
 800a458:	e66d      	b.n	800a136 <_scanf_float+0x82>
 800a45a:	9b04      	ldr	r3, [sp, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0e5      	beq.n	800a42c <_scanf_float+0x378>
 800a460:	9905      	ldr	r1, [sp, #20]
 800a462:	230a      	movs	r3, #10
 800a464:	462a      	mov	r2, r5
 800a466:	3101      	adds	r1, #1
 800a468:	4640      	mov	r0, r8
 800a46a:	f000 ff03 	bl	800b274 <_strtol_r>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	9e05      	ldr	r6, [sp, #20]
 800a472:	1ac2      	subs	r2, r0, r3
 800a474:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a478:	429e      	cmp	r6, r3
 800a47a:	bf28      	it	cs
 800a47c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a480:	4912      	ldr	r1, [pc, #72]	; (800a4cc <_scanf_float+0x418>)
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f82c 	bl	800a4e0 <siprintf>
 800a488:	e7d0      	b.n	800a42c <_scanf_float+0x378>
 800a48a:	9903      	ldr	r1, [sp, #12]
 800a48c:	f012 0f04 	tst.w	r2, #4
 800a490:	f103 0204 	add.w	r2, r3, #4
 800a494:	600a      	str	r2, [r1, #0]
 800a496:	d1d9      	bne.n	800a44c <_scanf_float+0x398>
 800a498:	f8d3 8000 	ldr.w	r8, [r3]
 800a49c:	ee10 2a10 	vmov	r2, s0
 800a4a0:	ee10 0a10 	vmov	r0, s0
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	f7f6 fb48 	bl	8000b3c <__aeabi_dcmpun>
 800a4ac:	b128      	cbz	r0, 800a4ba <_scanf_float+0x406>
 800a4ae:	4808      	ldr	r0, [pc, #32]	; (800a4d0 <_scanf_float+0x41c>)
 800a4b0:	f000 f810 	bl	800a4d4 <nanf>
 800a4b4:	ed88 0a00 	vstr	s0, [r8]
 800a4b8:	e7cb      	b.n	800a452 <_scanf_float+0x39e>
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	4639      	mov	r1, r7
 800a4be:	f7f6 fb9b 	bl	8000bf8 <__aeabi_d2f>
 800a4c2:	f8c8 0000 	str.w	r0, [r8]
 800a4c6:	e7c4      	b.n	800a452 <_scanf_float+0x39e>
 800a4c8:	2500      	movs	r5, #0
 800a4ca:	e634      	b.n	800a136 <_scanf_float+0x82>
 800a4cc:	0800e184 	.word	0x0800e184
 800a4d0:	0800e590 	.word	0x0800e590

0800a4d4 <nanf>:
 800a4d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4dc <nanf+0x8>
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	7fc00000 	.word	0x7fc00000

0800a4e0 <siprintf>:
 800a4e0:	b40e      	push	{r1, r2, r3}
 800a4e2:	b500      	push	{lr}
 800a4e4:	b09c      	sub	sp, #112	; 0x70
 800a4e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4e8:	9002      	str	r0, [sp, #8]
 800a4ea:	9006      	str	r0, [sp, #24]
 800a4ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4f0:	4809      	ldr	r0, [pc, #36]	; (800a518 <siprintf+0x38>)
 800a4f2:	9107      	str	r1, [sp, #28]
 800a4f4:	9104      	str	r1, [sp, #16]
 800a4f6:	4909      	ldr	r1, [pc, #36]	; (800a51c <siprintf+0x3c>)
 800a4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fc:	9105      	str	r1, [sp, #20]
 800a4fe:	6800      	ldr	r0, [r0, #0]
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	a902      	add	r1, sp, #8
 800a504:	f002 ff10 	bl	800d328 <_svfiprintf_r>
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
 800a50e:	b01c      	add	sp, #112	; 0x70
 800a510:	f85d eb04 	ldr.w	lr, [sp], #4
 800a514:	b003      	add	sp, #12
 800a516:	4770      	bx	lr
 800a518:	200000fc 	.word	0x200000fc
 800a51c:	ffff0208 	.word	0xffff0208

0800a520 <sulp>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	4604      	mov	r4, r0
 800a524:	460d      	mov	r5, r1
 800a526:	ec45 4b10 	vmov	d0, r4, r5
 800a52a:	4616      	mov	r6, r2
 800a52c:	f002 fc2c 	bl	800cd88 <__ulp>
 800a530:	ec51 0b10 	vmov	r0, r1, d0
 800a534:	b17e      	cbz	r6, 800a556 <sulp+0x36>
 800a536:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a53a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a53e:	2b00      	cmp	r3, #0
 800a540:	dd09      	ble.n	800a556 <sulp+0x36>
 800a542:	051b      	lsls	r3, r3, #20
 800a544:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a548:	2400      	movs	r4, #0
 800a54a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a54e:	4622      	mov	r2, r4
 800a550:	462b      	mov	r3, r5
 800a552:	f7f6 f859 	bl	8000608 <__aeabi_dmul>
 800a556:	bd70      	pop	{r4, r5, r6, pc}

0800a558 <_strtod_l>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	ed2d 8b02 	vpush	{d8}
 800a560:	b09d      	sub	sp, #116	; 0x74
 800a562:	461f      	mov	r7, r3
 800a564:	2300      	movs	r3, #0
 800a566:	9318      	str	r3, [sp, #96]	; 0x60
 800a568:	4ba2      	ldr	r3, [pc, #648]	; (800a7f4 <_strtod_l+0x29c>)
 800a56a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	4604      	mov	r4, r0
 800a572:	4618      	mov	r0, r3
 800a574:	4688      	mov	r8, r1
 800a576:	f7f5 fe33 	bl	80001e0 <strlen>
 800a57a:	f04f 0a00 	mov.w	sl, #0
 800a57e:	4605      	mov	r5, r0
 800a580:	f04f 0b00 	mov.w	fp, #0
 800a584:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	2a2b      	cmp	r2, #43	; 0x2b
 800a58e:	d04e      	beq.n	800a62e <_strtod_l+0xd6>
 800a590:	d83b      	bhi.n	800a60a <_strtod_l+0xb2>
 800a592:	2a0d      	cmp	r2, #13
 800a594:	d834      	bhi.n	800a600 <_strtod_l+0xa8>
 800a596:	2a08      	cmp	r2, #8
 800a598:	d834      	bhi.n	800a604 <_strtod_l+0xac>
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d03e      	beq.n	800a61c <_strtod_l+0xc4>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a5a4:	7833      	ldrb	r3, [r6, #0]
 800a5a6:	2b30      	cmp	r3, #48	; 0x30
 800a5a8:	f040 80b0 	bne.w	800a70c <_strtod_l+0x1b4>
 800a5ac:	7873      	ldrb	r3, [r6, #1]
 800a5ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5b2:	2b58      	cmp	r3, #88	; 0x58
 800a5b4:	d168      	bne.n	800a688 <_strtod_l+0x130>
 800a5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	ab18      	add	r3, sp, #96	; 0x60
 800a5bc:	9702      	str	r7, [sp, #8]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	4a8d      	ldr	r2, [pc, #564]	; (800a7f8 <_strtod_l+0x2a0>)
 800a5c2:	ab19      	add	r3, sp, #100	; 0x64
 800a5c4:	a917      	add	r1, sp, #92	; 0x5c
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f001 fd38 	bl	800c03c <__gethex>
 800a5cc:	f010 0707 	ands.w	r7, r0, #7
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	d005      	beq.n	800a5e0 <_strtod_l+0x88>
 800a5d4:	2f06      	cmp	r7, #6
 800a5d6:	d12c      	bne.n	800a632 <_strtod_l+0xda>
 800a5d8:	3601      	adds	r6, #1
 800a5da:	2300      	movs	r3, #0
 800a5dc:	9617      	str	r6, [sp, #92]	; 0x5c
 800a5de:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 8590 	bne.w	800b108 <_strtod_l+0xbb0>
 800a5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ea:	b1eb      	cbz	r3, 800a628 <_strtod_l+0xd0>
 800a5ec:	4652      	mov	r2, sl
 800a5ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5f2:	ec43 2b10 	vmov	d0, r2, r3
 800a5f6:	b01d      	add	sp, #116	; 0x74
 800a5f8:	ecbd 8b02 	vpop	{d8}
 800a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a600:	2a20      	cmp	r2, #32
 800a602:	d1cc      	bne.n	800a59e <_strtod_l+0x46>
 800a604:	3301      	adds	r3, #1
 800a606:	9317      	str	r3, [sp, #92]	; 0x5c
 800a608:	e7be      	b.n	800a588 <_strtod_l+0x30>
 800a60a:	2a2d      	cmp	r2, #45	; 0x2d
 800a60c:	d1c7      	bne.n	800a59e <_strtod_l+0x46>
 800a60e:	2201      	movs	r2, #1
 800a610:	920a      	str	r2, [sp, #40]	; 0x28
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	9217      	str	r2, [sp, #92]	; 0x5c
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1c2      	bne.n	800a5a2 <_strtod_l+0x4a>
 800a61c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a61e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a622:	2b00      	cmp	r3, #0
 800a624:	f040 856e 	bne.w	800b104 <_strtod_l+0xbac>
 800a628:	4652      	mov	r2, sl
 800a62a:	465b      	mov	r3, fp
 800a62c:	e7e1      	b.n	800a5f2 <_strtod_l+0x9a>
 800a62e:	2200      	movs	r2, #0
 800a630:	e7ee      	b.n	800a610 <_strtod_l+0xb8>
 800a632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a634:	b13a      	cbz	r2, 800a646 <_strtod_l+0xee>
 800a636:	2135      	movs	r1, #53	; 0x35
 800a638:	a81a      	add	r0, sp, #104	; 0x68
 800a63a:	f002 fcb0 	bl	800cf9e <__copybits>
 800a63e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a640:	4620      	mov	r0, r4
 800a642:	f002 f86f 	bl	800c724 <_Bfree>
 800a646:	3f01      	subs	r7, #1
 800a648:	2f04      	cmp	r7, #4
 800a64a:	d806      	bhi.n	800a65a <_strtod_l+0x102>
 800a64c:	e8df f007 	tbb	[pc, r7]
 800a650:	1714030a 	.word	0x1714030a
 800a654:	0a          	.byte	0x0a
 800a655:	00          	.byte	0x00
 800a656:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a65a:	0728      	lsls	r0, r5, #28
 800a65c:	d5c0      	bpl.n	800a5e0 <_strtod_l+0x88>
 800a65e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a662:	e7bd      	b.n	800a5e0 <_strtod_l+0x88>
 800a664:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a668:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a66a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a66e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a672:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a676:	e7f0      	b.n	800a65a <_strtod_l+0x102>
 800a678:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a7fc <_strtod_l+0x2a4>
 800a67c:	e7ed      	b.n	800a65a <_strtod_l+0x102>
 800a67e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a682:	f04f 3aff 	mov.w	sl, #4294967295
 800a686:	e7e8      	b.n	800a65a <_strtod_l+0x102>
 800a688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b30      	cmp	r3, #48	; 0x30
 800a692:	d0f9      	beq.n	800a688 <_strtod_l+0x130>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0a3      	beq.n	800a5e0 <_strtod_l+0x88>
 800a698:	2301      	movs	r3, #1
 800a69a:	f04f 0900 	mov.w	r9, #0
 800a69e:	9304      	str	r3, [sp, #16]
 800a6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6a2:	9308      	str	r3, [sp, #32]
 800a6a4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a6a8:	464f      	mov	r7, r9
 800a6aa:	220a      	movs	r2, #10
 800a6ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a6ae:	7806      	ldrb	r6, [r0, #0]
 800a6b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6b4:	b2d9      	uxtb	r1, r3
 800a6b6:	2909      	cmp	r1, #9
 800a6b8:	d92a      	bls.n	800a710 <_strtod_l+0x1b8>
 800a6ba:	9905      	ldr	r1, [sp, #20]
 800a6bc:	462a      	mov	r2, r5
 800a6be:	f002 ff4b 	bl	800d558 <strncmp>
 800a6c2:	b398      	cbz	r0, 800a72c <_strtod_l+0x1d4>
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	463d      	mov	r5, r7
 800a6ca:	9005      	str	r0, [sp, #20]
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2a65      	cmp	r2, #101	; 0x65
 800a6d0:	d001      	beq.n	800a6d6 <_strtod_l+0x17e>
 800a6d2:	2a45      	cmp	r2, #69	; 0x45
 800a6d4:	d118      	bne.n	800a708 <_strtod_l+0x1b0>
 800a6d6:	b91d      	cbnz	r5, 800a6e0 <_strtod_l+0x188>
 800a6d8:	9a04      	ldr	r2, [sp, #16]
 800a6da:	4302      	orrs	r2, r0
 800a6dc:	d09e      	beq.n	800a61c <_strtod_l+0xc4>
 800a6de:	2500      	movs	r5, #0
 800a6e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a6e4:	f108 0201 	add.w	r2, r8, #1
 800a6e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a6ee:	2a2b      	cmp	r2, #43	; 0x2b
 800a6f0:	d075      	beq.n	800a7de <_strtod_l+0x286>
 800a6f2:	2a2d      	cmp	r2, #45	; 0x2d
 800a6f4:	d07b      	beq.n	800a7ee <_strtod_l+0x296>
 800a6f6:	f04f 0c00 	mov.w	ip, #0
 800a6fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6fe:	2909      	cmp	r1, #9
 800a700:	f240 8082 	bls.w	800a808 <_strtod_l+0x2b0>
 800a704:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a708:	2600      	movs	r6, #0
 800a70a:	e09d      	b.n	800a848 <_strtod_l+0x2f0>
 800a70c:	2300      	movs	r3, #0
 800a70e:	e7c4      	b.n	800a69a <_strtod_l+0x142>
 800a710:	2f08      	cmp	r7, #8
 800a712:	bfd8      	it	le
 800a714:	9907      	ldrle	r1, [sp, #28]
 800a716:	f100 0001 	add.w	r0, r0, #1
 800a71a:	bfda      	itte	le
 800a71c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a720:	9307      	strle	r3, [sp, #28]
 800a722:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a726:	3701      	adds	r7, #1
 800a728:	9017      	str	r0, [sp, #92]	; 0x5c
 800a72a:	e7bf      	b.n	800a6ac <_strtod_l+0x154>
 800a72c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a72e:	195a      	adds	r2, r3, r5
 800a730:	9217      	str	r2, [sp, #92]	; 0x5c
 800a732:	5d5a      	ldrb	r2, [r3, r5]
 800a734:	2f00      	cmp	r7, #0
 800a736:	d037      	beq.n	800a7a8 <_strtod_l+0x250>
 800a738:	9005      	str	r0, [sp, #20]
 800a73a:	463d      	mov	r5, r7
 800a73c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a740:	2b09      	cmp	r3, #9
 800a742:	d912      	bls.n	800a76a <_strtod_l+0x212>
 800a744:	2301      	movs	r3, #1
 800a746:	e7c2      	b.n	800a6ce <_strtod_l+0x176>
 800a748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a74a:	1c5a      	adds	r2, r3, #1
 800a74c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a74e:	785a      	ldrb	r2, [r3, #1]
 800a750:	3001      	adds	r0, #1
 800a752:	2a30      	cmp	r2, #48	; 0x30
 800a754:	d0f8      	beq.n	800a748 <_strtod_l+0x1f0>
 800a756:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a75a:	2b08      	cmp	r3, #8
 800a75c:	f200 84d9 	bhi.w	800b112 <_strtod_l+0xbba>
 800a760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a762:	9005      	str	r0, [sp, #20]
 800a764:	2000      	movs	r0, #0
 800a766:	9308      	str	r3, [sp, #32]
 800a768:	4605      	mov	r5, r0
 800a76a:	3a30      	subs	r2, #48	; 0x30
 800a76c:	f100 0301 	add.w	r3, r0, #1
 800a770:	d014      	beq.n	800a79c <_strtod_l+0x244>
 800a772:	9905      	ldr	r1, [sp, #20]
 800a774:	4419      	add	r1, r3
 800a776:	9105      	str	r1, [sp, #20]
 800a778:	462b      	mov	r3, r5
 800a77a:	eb00 0e05 	add.w	lr, r0, r5
 800a77e:	210a      	movs	r1, #10
 800a780:	4573      	cmp	r3, lr
 800a782:	d113      	bne.n	800a7ac <_strtod_l+0x254>
 800a784:	182b      	adds	r3, r5, r0
 800a786:	2b08      	cmp	r3, #8
 800a788:	f105 0501 	add.w	r5, r5, #1
 800a78c:	4405      	add	r5, r0
 800a78e:	dc1c      	bgt.n	800a7ca <_strtod_l+0x272>
 800a790:	9907      	ldr	r1, [sp, #28]
 800a792:	230a      	movs	r3, #10
 800a794:	fb03 2301 	mla	r3, r3, r1, r2
 800a798:	9307      	str	r3, [sp, #28]
 800a79a:	2300      	movs	r3, #0
 800a79c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a79e:	1c51      	adds	r1, r2, #1
 800a7a0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7a2:	7852      	ldrb	r2, [r2, #1]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	e7c9      	b.n	800a73c <_strtod_l+0x1e4>
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	e7d2      	b.n	800a752 <_strtod_l+0x1fa>
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	dc04      	bgt.n	800a7ba <_strtod_l+0x262>
 800a7b0:	9e07      	ldr	r6, [sp, #28]
 800a7b2:	434e      	muls	r6, r1
 800a7b4:	9607      	str	r6, [sp, #28]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	e7e2      	b.n	800a780 <_strtod_l+0x228>
 800a7ba:	f103 0c01 	add.w	ip, r3, #1
 800a7be:	f1bc 0f10 	cmp.w	ip, #16
 800a7c2:	bfd8      	it	le
 800a7c4:	fb01 f909 	mulle.w	r9, r1, r9
 800a7c8:	e7f5      	b.n	800a7b6 <_strtod_l+0x25e>
 800a7ca:	2d10      	cmp	r5, #16
 800a7cc:	bfdc      	itt	le
 800a7ce:	230a      	movle	r3, #10
 800a7d0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a7d4:	e7e1      	b.n	800a79a <_strtod_l+0x242>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9305      	str	r3, [sp, #20]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e77c      	b.n	800a6d8 <_strtod_l+0x180>
 800a7de:	f04f 0c00 	mov.w	ip, #0
 800a7e2:	f108 0202 	add.w	r2, r8, #2
 800a7e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a7ec:	e785      	b.n	800a6fa <_strtod_l+0x1a2>
 800a7ee:	f04f 0c01 	mov.w	ip, #1
 800a7f2:	e7f6      	b.n	800a7e2 <_strtod_l+0x28a>
 800a7f4:	0800e3d8 	.word	0x0800e3d8
 800a7f8:	0800e18c 	.word	0x0800e18c
 800a7fc:	7ff00000 	.word	0x7ff00000
 800a800:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a802:	1c51      	adds	r1, r2, #1
 800a804:	9117      	str	r1, [sp, #92]	; 0x5c
 800a806:	7852      	ldrb	r2, [r2, #1]
 800a808:	2a30      	cmp	r2, #48	; 0x30
 800a80a:	d0f9      	beq.n	800a800 <_strtod_l+0x2a8>
 800a80c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a810:	2908      	cmp	r1, #8
 800a812:	f63f af79 	bhi.w	800a708 <_strtod_l+0x1b0>
 800a816:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a81a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a81c:	9206      	str	r2, [sp, #24]
 800a81e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a820:	1c51      	adds	r1, r2, #1
 800a822:	9117      	str	r1, [sp, #92]	; 0x5c
 800a824:	7852      	ldrb	r2, [r2, #1]
 800a826:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a82a:	2e09      	cmp	r6, #9
 800a82c:	d937      	bls.n	800a89e <_strtod_l+0x346>
 800a82e:	9e06      	ldr	r6, [sp, #24]
 800a830:	1b89      	subs	r1, r1, r6
 800a832:	2908      	cmp	r1, #8
 800a834:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a838:	dc02      	bgt.n	800a840 <_strtod_l+0x2e8>
 800a83a:	4576      	cmp	r6, lr
 800a83c:	bfa8      	it	ge
 800a83e:	4676      	movge	r6, lr
 800a840:	f1bc 0f00 	cmp.w	ip, #0
 800a844:	d000      	beq.n	800a848 <_strtod_l+0x2f0>
 800a846:	4276      	negs	r6, r6
 800a848:	2d00      	cmp	r5, #0
 800a84a:	d14d      	bne.n	800a8e8 <_strtod_l+0x390>
 800a84c:	9904      	ldr	r1, [sp, #16]
 800a84e:	4301      	orrs	r1, r0
 800a850:	f47f aec6 	bne.w	800a5e0 <_strtod_l+0x88>
 800a854:	2b00      	cmp	r3, #0
 800a856:	f47f aee1 	bne.w	800a61c <_strtod_l+0xc4>
 800a85a:	2a69      	cmp	r2, #105	; 0x69
 800a85c:	d027      	beq.n	800a8ae <_strtod_l+0x356>
 800a85e:	dc24      	bgt.n	800a8aa <_strtod_l+0x352>
 800a860:	2a49      	cmp	r2, #73	; 0x49
 800a862:	d024      	beq.n	800a8ae <_strtod_l+0x356>
 800a864:	2a4e      	cmp	r2, #78	; 0x4e
 800a866:	f47f aed9 	bne.w	800a61c <_strtod_l+0xc4>
 800a86a:	499f      	ldr	r1, [pc, #636]	; (800aae8 <_strtod_l+0x590>)
 800a86c:	a817      	add	r0, sp, #92	; 0x5c
 800a86e:	f001 fe3d 	bl	800c4ec <__match>
 800a872:	2800      	cmp	r0, #0
 800a874:	f43f aed2 	beq.w	800a61c <_strtod_l+0xc4>
 800a878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b28      	cmp	r3, #40	; 0x28
 800a87e:	d12d      	bne.n	800a8dc <_strtod_l+0x384>
 800a880:	499a      	ldr	r1, [pc, #616]	; (800aaec <_strtod_l+0x594>)
 800a882:	aa1a      	add	r2, sp, #104	; 0x68
 800a884:	a817      	add	r0, sp, #92	; 0x5c
 800a886:	f001 fe45 	bl	800c514 <__hexnan>
 800a88a:	2805      	cmp	r0, #5
 800a88c:	d126      	bne.n	800a8dc <_strtod_l+0x384>
 800a88e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a890:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a894:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a898:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a89c:	e6a0      	b.n	800a5e0 <_strtod_l+0x88>
 800a89e:	210a      	movs	r1, #10
 800a8a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a8a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a8a8:	e7b9      	b.n	800a81e <_strtod_l+0x2c6>
 800a8aa:	2a6e      	cmp	r2, #110	; 0x6e
 800a8ac:	e7db      	b.n	800a866 <_strtod_l+0x30e>
 800a8ae:	4990      	ldr	r1, [pc, #576]	; (800aaf0 <_strtod_l+0x598>)
 800a8b0:	a817      	add	r0, sp, #92	; 0x5c
 800a8b2:	f001 fe1b 	bl	800c4ec <__match>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f43f aeb0 	beq.w	800a61c <_strtod_l+0xc4>
 800a8bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8be:	498d      	ldr	r1, [pc, #564]	; (800aaf4 <_strtod_l+0x59c>)
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	a817      	add	r0, sp, #92	; 0x5c
 800a8c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8c6:	f001 fe11 	bl	800c4ec <__match>
 800a8ca:	b910      	cbnz	r0, 800a8d2 <_strtod_l+0x37a>
 800a8cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ab04 <_strtod_l+0x5ac>
 800a8d6:	f04f 0a00 	mov.w	sl, #0
 800a8da:	e681      	b.n	800a5e0 <_strtod_l+0x88>
 800a8dc:	4886      	ldr	r0, [pc, #536]	; (800aaf8 <_strtod_l+0x5a0>)
 800a8de:	f002 fe23 	bl	800d528 <nan>
 800a8e2:	ec5b ab10 	vmov	sl, fp, d0
 800a8e6:	e67b      	b.n	800a5e0 <_strtod_l+0x88>
 800a8e8:	9b05      	ldr	r3, [sp, #20]
 800a8ea:	9807      	ldr	r0, [sp, #28]
 800a8ec:	1af3      	subs	r3, r6, r3
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	bf08      	it	eq
 800a8f2:	462f      	moveq	r7, r5
 800a8f4:	2d10      	cmp	r5, #16
 800a8f6:	9306      	str	r3, [sp, #24]
 800a8f8:	46a8      	mov	r8, r5
 800a8fa:	bfa8      	it	ge
 800a8fc:	f04f 0810 	movge.w	r8, #16
 800a900:	f7f5 fe08 	bl	8000514 <__aeabi_ui2d>
 800a904:	2d09      	cmp	r5, #9
 800a906:	4682      	mov	sl, r0
 800a908:	468b      	mov	fp, r1
 800a90a:	dd13      	ble.n	800a934 <_strtod_l+0x3dc>
 800a90c:	4b7b      	ldr	r3, [pc, #492]	; (800aafc <_strtod_l+0x5a4>)
 800a90e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a912:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a916:	f7f5 fe77 	bl	8000608 <__aeabi_dmul>
 800a91a:	4682      	mov	sl, r0
 800a91c:	4648      	mov	r0, r9
 800a91e:	468b      	mov	fp, r1
 800a920:	f7f5 fdf8 	bl	8000514 <__aeabi_ui2d>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4650      	mov	r0, sl
 800a92a:	4659      	mov	r1, fp
 800a92c:	f7f5 fcb6 	bl	800029c <__adddf3>
 800a930:	4682      	mov	sl, r0
 800a932:	468b      	mov	fp, r1
 800a934:	2d0f      	cmp	r5, #15
 800a936:	dc38      	bgt.n	800a9aa <_strtod_l+0x452>
 800a938:	9b06      	ldr	r3, [sp, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f43f ae50 	beq.w	800a5e0 <_strtod_l+0x88>
 800a940:	dd24      	ble.n	800a98c <_strtod_l+0x434>
 800a942:	2b16      	cmp	r3, #22
 800a944:	dc0b      	bgt.n	800a95e <_strtod_l+0x406>
 800a946:	496d      	ldr	r1, [pc, #436]	; (800aafc <_strtod_l+0x5a4>)
 800a948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a950:	4652      	mov	r2, sl
 800a952:	465b      	mov	r3, fp
 800a954:	f7f5 fe58 	bl	8000608 <__aeabi_dmul>
 800a958:	4682      	mov	sl, r0
 800a95a:	468b      	mov	fp, r1
 800a95c:	e640      	b.n	800a5e0 <_strtod_l+0x88>
 800a95e:	9a06      	ldr	r2, [sp, #24]
 800a960:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a964:	4293      	cmp	r3, r2
 800a966:	db20      	blt.n	800a9aa <_strtod_l+0x452>
 800a968:	4c64      	ldr	r4, [pc, #400]	; (800aafc <_strtod_l+0x5a4>)
 800a96a:	f1c5 050f 	rsb	r5, r5, #15
 800a96e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a972:	4652      	mov	r2, sl
 800a974:	465b      	mov	r3, fp
 800a976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a97a:	f7f5 fe45 	bl	8000608 <__aeabi_dmul>
 800a97e:	9b06      	ldr	r3, [sp, #24]
 800a980:	1b5d      	subs	r5, r3, r5
 800a982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a98a:	e7e3      	b.n	800a954 <_strtod_l+0x3fc>
 800a98c:	9b06      	ldr	r3, [sp, #24]
 800a98e:	3316      	adds	r3, #22
 800a990:	db0b      	blt.n	800a9aa <_strtod_l+0x452>
 800a992:	9b05      	ldr	r3, [sp, #20]
 800a994:	1b9e      	subs	r6, r3, r6
 800a996:	4b59      	ldr	r3, [pc, #356]	; (800aafc <_strtod_l+0x5a4>)
 800a998:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a99c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	f7f5 ff5a 	bl	800085c <__aeabi_ddiv>
 800a9a8:	e7d6      	b.n	800a958 <_strtod_l+0x400>
 800a9aa:	9b06      	ldr	r3, [sp, #24]
 800a9ac:	eba5 0808 	sub.w	r8, r5, r8
 800a9b0:	4498      	add	r8, r3
 800a9b2:	f1b8 0f00 	cmp.w	r8, #0
 800a9b6:	dd74      	ble.n	800aaa2 <_strtod_l+0x54a>
 800a9b8:	f018 030f 	ands.w	r3, r8, #15
 800a9bc:	d00a      	beq.n	800a9d4 <_strtod_l+0x47c>
 800a9be:	494f      	ldr	r1, [pc, #316]	; (800aafc <_strtod_l+0x5a4>)
 800a9c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	465b      	mov	r3, fp
 800a9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9cc:	f7f5 fe1c 	bl	8000608 <__aeabi_dmul>
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	468b      	mov	fp, r1
 800a9d4:	f038 080f 	bics.w	r8, r8, #15
 800a9d8:	d04f      	beq.n	800aa7a <_strtod_l+0x522>
 800a9da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a9de:	dd22      	ble.n	800aa26 <_strtod_l+0x4ce>
 800a9e0:	2500      	movs	r5, #0
 800a9e2:	462e      	mov	r6, r5
 800a9e4:	9507      	str	r5, [sp, #28]
 800a9e6:	9505      	str	r5, [sp, #20]
 800a9e8:	2322      	movs	r3, #34	; 0x22
 800a9ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ab04 <_strtod_l+0x5ac>
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	f04f 0a00 	mov.w	sl, #0
 800a9f4:	9b07      	ldr	r3, [sp, #28]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f43f adf2 	beq.w	800a5e0 <_strtod_l+0x88>
 800a9fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f001 fe90 	bl	800c724 <_Bfree>
 800aa04:	9905      	ldr	r1, [sp, #20]
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 fe8c 	bl	800c724 <_Bfree>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f001 fe88 	bl	800c724 <_Bfree>
 800aa14:	9907      	ldr	r1, [sp, #28]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f001 fe84 	bl	800c724 <_Bfree>
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f001 fe80 	bl	800c724 <_Bfree>
 800aa24:	e5dc      	b.n	800a5e0 <_strtod_l+0x88>
 800aa26:	4b36      	ldr	r3, [pc, #216]	; (800ab00 <_strtod_l+0x5a8>)
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa30:	4650      	mov	r0, sl
 800aa32:	4659      	mov	r1, fp
 800aa34:	4699      	mov	r9, r3
 800aa36:	f1b8 0f01 	cmp.w	r8, #1
 800aa3a:	dc21      	bgt.n	800aa80 <_strtod_l+0x528>
 800aa3c:	b10b      	cbz	r3, 800aa42 <_strtod_l+0x4ea>
 800aa3e:	4682      	mov	sl, r0
 800aa40:	468b      	mov	fp, r1
 800aa42:	4b2f      	ldr	r3, [pc, #188]	; (800ab00 <_strtod_l+0x5a8>)
 800aa44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	465b      	mov	r3, fp
 800aa50:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa54:	f7f5 fdd8 	bl	8000608 <__aeabi_dmul>
 800aa58:	4b2a      	ldr	r3, [pc, #168]	; (800ab04 <_strtod_l+0x5ac>)
 800aa5a:	460a      	mov	r2, r1
 800aa5c:	400b      	ands	r3, r1
 800aa5e:	492a      	ldr	r1, [pc, #168]	; (800ab08 <_strtod_l+0x5b0>)
 800aa60:	428b      	cmp	r3, r1
 800aa62:	4682      	mov	sl, r0
 800aa64:	d8bc      	bhi.n	800a9e0 <_strtod_l+0x488>
 800aa66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa6a:	428b      	cmp	r3, r1
 800aa6c:	bf86      	itte	hi
 800aa6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ab0c <_strtod_l+0x5b4>
 800aa72:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9304      	str	r3, [sp, #16]
 800aa7e:	e084      	b.n	800ab8a <_strtod_l+0x632>
 800aa80:	f018 0f01 	tst.w	r8, #1
 800aa84:	d005      	beq.n	800aa92 <_strtod_l+0x53a>
 800aa86:	9b04      	ldr	r3, [sp, #16]
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	f7f5 fdbc 	bl	8000608 <__aeabi_dmul>
 800aa90:	2301      	movs	r3, #1
 800aa92:	9a04      	ldr	r2, [sp, #16]
 800aa94:	3208      	adds	r2, #8
 800aa96:	f109 0901 	add.w	r9, r9, #1
 800aa9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa9e:	9204      	str	r2, [sp, #16]
 800aaa0:	e7c9      	b.n	800aa36 <_strtod_l+0x4de>
 800aaa2:	d0ea      	beq.n	800aa7a <_strtod_l+0x522>
 800aaa4:	f1c8 0800 	rsb	r8, r8, #0
 800aaa8:	f018 020f 	ands.w	r2, r8, #15
 800aaac:	d00a      	beq.n	800aac4 <_strtod_l+0x56c>
 800aaae:	4b13      	ldr	r3, [pc, #76]	; (800aafc <_strtod_l+0x5a4>)
 800aab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab4:	4650      	mov	r0, sl
 800aab6:	4659      	mov	r1, fp
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fece 	bl	800085c <__aeabi_ddiv>
 800aac0:	4682      	mov	sl, r0
 800aac2:	468b      	mov	fp, r1
 800aac4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aac8:	d0d7      	beq.n	800aa7a <_strtod_l+0x522>
 800aaca:	f1b8 0f1f 	cmp.w	r8, #31
 800aace:	dd1f      	ble.n	800ab10 <_strtod_l+0x5b8>
 800aad0:	2500      	movs	r5, #0
 800aad2:	462e      	mov	r6, r5
 800aad4:	9507      	str	r5, [sp, #28]
 800aad6:	9505      	str	r5, [sp, #20]
 800aad8:	2322      	movs	r3, #34	; 0x22
 800aada:	f04f 0a00 	mov.w	sl, #0
 800aade:	f04f 0b00 	mov.w	fp, #0
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	e786      	b.n	800a9f4 <_strtod_l+0x49c>
 800aae6:	bf00      	nop
 800aae8:	0800e15d 	.word	0x0800e15d
 800aaec:	0800e1a0 	.word	0x0800e1a0
 800aaf0:	0800e155 	.word	0x0800e155
 800aaf4:	0800e2e4 	.word	0x0800e2e4
 800aaf8:	0800e590 	.word	0x0800e590
 800aafc:	0800e470 	.word	0x0800e470
 800ab00:	0800e448 	.word	0x0800e448
 800ab04:	7ff00000 	.word	0x7ff00000
 800ab08:	7ca00000 	.word	0x7ca00000
 800ab0c:	7fefffff 	.word	0x7fefffff
 800ab10:	f018 0310 	ands.w	r3, r8, #16
 800ab14:	bf18      	it	ne
 800ab16:	236a      	movne	r3, #106	; 0x6a
 800ab18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800aec8 <_strtod_l+0x970>
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	4650      	mov	r0, sl
 800ab20:	4659      	mov	r1, fp
 800ab22:	2300      	movs	r3, #0
 800ab24:	f018 0f01 	tst.w	r8, #1
 800ab28:	d004      	beq.n	800ab34 <_strtod_l+0x5dc>
 800ab2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab2e:	f7f5 fd6b 	bl	8000608 <__aeabi_dmul>
 800ab32:	2301      	movs	r3, #1
 800ab34:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab38:	f109 0908 	add.w	r9, r9, #8
 800ab3c:	d1f2      	bne.n	800ab24 <_strtod_l+0x5cc>
 800ab3e:	b10b      	cbz	r3, 800ab44 <_strtod_l+0x5ec>
 800ab40:	4682      	mov	sl, r0
 800ab42:	468b      	mov	fp, r1
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	b1c3      	cbz	r3, 800ab7a <_strtod_l+0x622>
 800ab48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ab4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	4659      	mov	r1, fp
 800ab54:	dd11      	ble.n	800ab7a <_strtod_l+0x622>
 800ab56:	2b1f      	cmp	r3, #31
 800ab58:	f340 8124 	ble.w	800ada4 <_strtod_l+0x84c>
 800ab5c:	2b34      	cmp	r3, #52	; 0x34
 800ab5e:	bfde      	ittt	le
 800ab60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab64:	f04f 33ff 	movle.w	r3, #4294967295
 800ab68:	fa03 f202 	lslle.w	r2, r3, r2
 800ab6c:	f04f 0a00 	mov.w	sl, #0
 800ab70:	bfcc      	ite	gt
 800ab72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab76:	ea02 0b01 	andle.w	fp, r2, r1
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4650      	mov	r0, sl
 800ab80:	4659      	mov	r1, fp
 800ab82:	f7f5 ffa9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d1a2      	bne.n	800aad0 <_strtod_l+0x578>
 800ab8a:	9b07      	ldr	r3, [sp, #28]
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	9908      	ldr	r1, [sp, #32]
 800ab90:	462b      	mov	r3, r5
 800ab92:	463a      	mov	r2, r7
 800ab94:	4620      	mov	r0, r4
 800ab96:	f001 fe2d 	bl	800c7f4 <__s2b>
 800ab9a:	9007      	str	r0, [sp, #28]
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f af1f 	beq.w	800a9e0 <_strtod_l+0x488>
 800aba2:	9b05      	ldr	r3, [sp, #20]
 800aba4:	1b9e      	subs	r6, r3, r6
 800aba6:	9b06      	ldr	r3, [sp, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfb4      	ite	lt
 800abac:	4633      	movlt	r3, r6
 800abae:	2300      	movge	r3, #0
 800abb0:	930c      	str	r3, [sp, #48]	; 0x30
 800abb2:	9b06      	ldr	r3, [sp, #24]
 800abb4:	2500      	movs	r5, #0
 800abb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abba:	9312      	str	r3, [sp, #72]	; 0x48
 800abbc:	462e      	mov	r6, r5
 800abbe:	9b07      	ldr	r3, [sp, #28]
 800abc0:	4620      	mov	r0, r4
 800abc2:	6859      	ldr	r1, [r3, #4]
 800abc4:	f001 fd6e 	bl	800c6a4 <_Balloc>
 800abc8:	9005      	str	r0, [sp, #20]
 800abca:	2800      	cmp	r0, #0
 800abcc:	f43f af0c 	beq.w	800a9e8 <_strtod_l+0x490>
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	3202      	adds	r2, #2
 800abd6:	f103 010c 	add.w	r1, r3, #12
 800abda:	0092      	lsls	r2, r2, #2
 800abdc:	300c      	adds	r0, #12
 800abde:	f001 fd53 	bl	800c688 <memcpy>
 800abe2:	ec4b ab10 	vmov	d0, sl, fp
 800abe6:	aa1a      	add	r2, sp, #104	; 0x68
 800abe8:	a919      	add	r1, sp, #100	; 0x64
 800abea:	4620      	mov	r0, r4
 800abec:	f002 f948 	bl	800ce80 <__d2b>
 800abf0:	ec4b ab18 	vmov	d8, sl, fp
 800abf4:	9018      	str	r0, [sp, #96]	; 0x60
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f43f aef6 	beq.w	800a9e8 <_strtod_l+0x490>
 800abfc:	2101      	movs	r1, #1
 800abfe:	4620      	mov	r0, r4
 800ac00:	f001 fe92 	bl	800c928 <__i2b>
 800ac04:	4606      	mov	r6, r0
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f43f aeee 	beq.w	800a9e8 <_strtod_l+0x490>
 800ac0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac0e:	9904      	ldr	r1, [sp, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfab      	itete	ge
 800ac14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ac16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ac18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ac1e:	bfac      	ite	ge
 800ac20:	eb03 0902 	addge.w	r9, r3, r2
 800ac24:	1ad7      	sublt	r7, r2, r3
 800ac26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac28:	eba3 0801 	sub.w	r8, r3, r1
 800ac2c:	4490      	add	r8, r2
 800ac2e:	4ba1      	ldr	r3, [pc, #644]	; (800aeb4 <_strtod_l+0x95c>)
 800ac30:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac34:	4598      	cmp	r8, r3
 800ac36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac3a:	f280 80c7 	bge.w	800adcc <_strtod_l+0x874>
 800ac3e:	eba3 0308 	sub.w	r3, r3, r8
 800ac42:	2b1f      	cmp	r3, #31
 800ac44:	eba2 0203 	sub.w	r2, r2, r3
 800ac48:	f04f 0101 	mov.w	r1, #1
 800ac4c:	f300 80b1 	bgt.w	800adb2 <_strtod_l+0x85a>
 800ac50:	fa01 f303 	lsl.w	r3, r1, r3
 800ac54:	930d      	str	r3, [sp, #52]	; 0x34
 800ac56:	2300      	movs	r3, #0
 800ac58:	9308      	str	r3, [sp, #32]
 800ac5a:	eb09 0802 	add.w	r8, r9, r2
 800ac5e:	9b04      	ldr	r3, [sp, #16]
 800ac60:	45c1      	cmp	r9, r8
 800ac62:	4417      	add	r7, r2
 800ac64:	441f      	add	r7, r3
 800ac66:	464b      	mov	r3, r9
 800ac68:	bfa8      	it	ge
 800ac6a:	4643      	movge	r3, r8
 800ac6c:	42bb      	cmp	r3, r7
 800ac6e:	bfa8      	it	ge
 800ac70:	463b      	movge	r3, r7
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	bfc2      	ittt	gt
 800ac76:	eba8 0803 	subgt.w	r8, r8, r3
 800ac7a:	1aff      	subgt	r7, r7, r3
 800ac7c:	eba9 0903 	subgt.w	r9, r9, r3
 800ac80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	dd17      	ble.n	800acb6 <_strtod_l+0x75e>
 800ac86:	4631      	mov	r1, r6
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f001 ff0c 	bl	800caa8 <__pow5mult>
 800ac90:	4606      	mov	r6, r0
 800ac92:	2800      	cmp	r0, #0
 800ac94:	f43f aea8 	beq.w	800a9e8 <_strtod_l+0x490>
 800ac98:	4601      	mov	r1, r0
 800ac9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f001 fe59 	bl	800c954 <__multiply>
 800aca2:	900b      	str	r0, [sp, #44]	; 0x2c
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f43f ae9f 	beq.w	800a9e8 <_strtod_l+0x490>
 800acaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acac:	4620      	mov	r0, r4
 800acae:	f001 fd39 	bl	800c724 <_Bfree>
 800acb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acb4:	9318      	str	r3, [sp, #96]	; 0x60
 800acb6:	f1b8 0f00 	cmp.w	r8, #0
 800acba:	f300 808c 	bgt.w	800add6 <_strtod_l+0x87e>
 800acbe:	9b06      	ldr	r3, [sp, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dd08      	ble.n	800acd6 <_strtod_l+0x77e>
 800acc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acc6:	9905      	ldr	r1, [sp, #20]
 800acc8:	4620      	mov	r0, r4
 800acca:	f001 feed 	bl	800caa8 <__pow5mult>
 800acce:	9005      	str	r0, [sp, #20]
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f43f ae89 	beq.w	800a9e8 <_strtod_l+0x490>
 800acd6:	2f00      	cmp	r7, #0
 800acd8:	dd08      	ble.n	800acec <_strtod_l+0x794>
 800acda:	9905      	ldr	r1, [sp, #20]
 800acdc:	463a      	mov	r2, r7
 800acde:	4620      	mov	r0, r4
 800ace0:	f001 ff3c 	bl	800cb5c <__lshift>
 800ace4:	9005      	str	r0, [sp, #20]
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f43f ae7e 	beq.w	800a9e8 <_strtod_l+0x490>
 800acec:	f1b9 0f00 	cmp.w	r9, #0
 800acf0:	dd08      	ble.n	800ad04 <_strtod_l+0x7ac>
 800acf2:	4631      	mov	r1, r6
 800acf4:	464a      	mov	r2, r9
 800acf6:	4620      	mov	r0, r4
 800acf8:	f001 ff30 	bl	800cb5c <__lshift>
 800acfc:	4606      	mov	r6, r0
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f43f ae72 	beq.w	800a9e8 <_strtod_l+0x490>
 800ad04:	9a05      	ldr	r2, [sp, #20]
 800ad06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f001 ffb3 	bl	800cc74 <__mdiff>
 800ad0e:	4605      	mov	r5, r0
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f43f ae69 	beq.w	800a9e8 <_strtod_l+0x490>
 800ad16:	68c3      	ldr	r3, [r0, #12]
 800ad18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	60c3      	str	r3, [r0, #12]
 800ad1e:	4631      	mov	r1, r6
 800ad20:	f001 ff8c 	bl	800cc3c <__mcmp>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	da60      	bge.n	800adea <_strtod_l+0x892>
 800ad28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad2e:	f040 8082 	bne.w	800ae36 <_strtod_l+0x8de>
 800ad32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d17d      	bne.n	800ae36 <_strtod_l+0x8de>
 800ad3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad3e:	0d1b      	lsrs	r3, r3, #20
 800ad40:	051b      	lsls	r3, r3, #20
 800ad42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad46:	d976      	bls.n	800ae36 <_strtod_l+0x8de>
 800ad48:	696b      	ldr	r3, [r5, #20]
 800ad4a:	b913      	cbnz	r3, 800ad52 <_strtod_l+0x7fa>
 800ad4c:	692b      	ldr	r3, [r5, #16]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	dd71      	ble.n	800ae36 <_strtod_l+0x8de>
 800ad52:	4629      	mov	r1, r5
 800ad54:	2201      	movs	r2, #1
 800ad56:	4620      	mov	r0, r4
 800ad58:	f001 ff00 	bl	800cb5c <__lshift>
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4605      	mov	r5, r0
 800ad60:	f001 ff6c 	bl	800cc3c <__mcmp>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	dd66      	ble.n	800ae36 <_strtod_l+0x8de>
 800ad68:	9904      	ldr	r1, [sp, #16]
 800ad6a:	4a53      	ldr	r2, [pc, #332]	; (800aeb8 <_strtod_l+0x960>)
 800ad6c:	465b      	mov	r3, fp
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	f000 8081 	beq.w	800ae76 <_strtod_l+0x91e>
 800ad74:	ea02 010b 	and.w	r1, r2, fp
 800ad78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad7c:	dc7b      	bgt.n	800ae76 <_strtod_l+0x91e>
 800ad7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad82:	f77f aea9 	ble.w	800aad8 <_strtod_l+0x580>
 800ad86:	4b4d      	ldr	r3, [pc, #308]	; (800aebc <_strtod_l+0x964>)
 800ad88:	4650      	mov	r0, sl
 800ad8a:	4659      	mov	r1, fp
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f7f5 fc3b 	bl	8000608 <__aeabi_dmul>
 800ad92:	460b      	mov	r3, r1
 800ad94:	4303      	orrs	r3, r0
 800ad96:	bf08      	it	eq
 800ad98:	2322      	moveq	r3, #34	; 0x22
 800ad9a:	4682      	mov	sl, r0
 800ad9c:	468b      	mov	fp, r1
 800ad9e:	bf08      	it	eq
 800ada0:	6023      	streq	r3, [r4, #0]
 800ada2:	e62b      	b.n	800a9fc <_strtod_l+0x4a4>
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	fa02 f303 	lsl.w	r3, r2, r3
 800adac:	ea03 0a0a 	and.w	sl, r3, sl
 800adb0:	e6e3      	b.n	800ab7a <_strtod_l+0x622>
 800adb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800adb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800adba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800adbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800adc2:	fa01 f308 	lsl.w	r3, r1, r8
 800adc6:	9308      	str	r3, [sp, #32]
 800adc8:	910d      	str	r1, [sp, #52]	; 0x34
 800adca:	e746      	b.n	800ac5a <_strtod_l+0x702>
 800adcc:	2300      	movs	r3, #0
 800adce:	9308      	str	r3, [sp, #32]
 800add0:	2301      	movs	r3, #1
 800add2:	930d      	str	r3, [sp, #52]	; 0x34
 800add4:	e741      	b.n	800ac5a <_strtod_l+0x702>
 800add6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800add8:	4642      	mov	r2, r8
 800adda:	4620      	mov	r0, r4
 800addc:	f001 febe 	bl	800cb5c <__lshift>
 800ade0:	9018      	str	r0, [sp, #96]	; 0x60
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f47f af6b 	bne.w	800acbe <_strtod_l+0x766>
 800ade8:	e5fe      	b.n	800a9e8 <_strtod_l+0x490>
 800adea:	465f      	mov	r7, fp
 800adec:	d16e      	bne.n	800aecc <_strtod_l+0x974>
 800adee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adf0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adf4:	b342      	cbz	r2, 800ae48 <_strtod_l+0x8f0>
 800adf6:	4a32      	ldr	r2, [pc, #200]	; (800aec0 <_strtod_l+0x968>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d128      	bne.n	800ae4e <_strtod_l+0x8f6>
 800adfc:	9b04      	ldr	r3, [sp, #16]
 800adfe:	4651      	mov	r1, sl
 800ae00:	b1eb      	cbz	r3, 800ae3e <_strtod_l+0x8e6>
 800ae02:	4b2d      	ldr	r3, [pc, #180]	; (800aeb8 <_strtod_l+0x960>)
 800ae04:	403b      	ands	r3, r7
 800ae06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0e:	d819      	bhi.n	800ae44 <_strtod_l+0x8ec>
 800ae10:	0d1b      	lsrs	r3, r3, #20
 800ae12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae16:	fa02 f303 	lsl.w	r3, r2, r3
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	d117      	bne.n	800ae4e <_strtod_l+0x8f6>
 800ae1e:	4b29      	ldr	r3, [pc, #164]	; (800aec4 <_strtod_l+0x96c>)
 800ae20:	429f      	cmp	r7, r3
 800ae22:	d102      	bne.n	800ae2a <_strtod_l+0x8d2>
 800ae24:	3101      	adds	r1, #1
 800ae26:	f43f addf 	beq.w	800a9e8 <_strtod_l+0x490>
 800ae2a:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <_strtod_l+0x960>)
 800ae2c:	403b      	ands	r3, r7
 800ae2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae32:	f04f 0a00 	mov.w	sl, #0
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1a4      	bne.n	800ad86 <_strtod_l+0x82e>
 800ae3c:	e5de      	b.n	800a9fc <_strtod_l+0x4a4>
 800ae3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae42:	e7ea      	b.n	800ae1a <_strtod_l+0x8c2>
 800ae44:	4613      	mov	r3, r2
 800ae46:	e7e8      	b.n	800ae1a <_strtod_l+0x8c2>
 800ae48:	ea53 030a 	orrs.w	r3, r3, sl
 800ae4c:	d08c      	beq.n	800ad68 <_strtod_l+0x810>
 800ae4e:	9b08      	ldr	r3, [sp, #32]
 800ae50:	b1db      	cbz	r3, 800ae8a <_strtod_l+0x932>
 800ae52:	423b      	tst	r3, r7
 800ae54:	d0ef      	beq.n	800ae36 <_strtod_l+0x8de>
 800ae56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae58:	9a04      	ldr	r2, [sp, #16]
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	b1c3      	cbz	r3, 800ae92 <_strtod_l+0x93a>
 800ae60:	f7ff fb5e 	bl	800a520 <sulp>
 800ae64:	4602      	mov	r2, r0
 800ae66:	460b      	mov	r3, r1
 800ae68:	ec51 0b18 	vmov	r0, r1, d8
 800ae6c:	f7f5 fa16 	bl	800029c <__adddf3>
 800ae70:	4682      	mov	sl, r0
 800ae72:	468b      	mov	fp, r1
 800ae74:	e7df      	b.n	800ae36 <_strtod_l+0x8de>
 800ae76:	4013      	ands	r3, r2
 800ae78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae84:	f04f 3aff 	mov.w	sl, #4294967295
 800ae88:	e7d5      	b.n	800ae36 <_strtod_l+0x8de>
 800ae8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae8c:	ea13 0f0a 	tst.w	r3, sl
 800ae90:	e7e0      	b.n	800ae54 <_strtod_l+0x8fc>
 800ae92:	f7ff fb45 	bl	800a520 <sulp>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	ec51 0b18 	vmov	r0, r1, d8
 800ae9e:	f7f5 f9fb 	bl	8000298 <__aeabi_dsub>
 800aea2:	2200      	movs	r2, #0
 800aea4:	2300      	movs	r3, #0
 800aea6:	4682      	mov	sl, r0
 800aea8:	468b      	mov	fp, r1
 800aeaa:	f7f5 fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d0c1      	beq.n	800ae36 <_strtod_l+0x8de>
 800aeb2:	e611      	b.n	800aad8 <_strtod_l+0x580>
 800aeb4:	fffffc02 	.word	0xfffffc02
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	39500000 	.word	0x39500000
 800aec0:	000fffff 	.word	0x000fffff
 800aec4:	7fefffff 	.word	0x7fefffff
 800aec8:	0800e1b8 	.word	0x0800e1b8
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	f002 f832 	bl	800cf38 <__ratio>
 800aed4:	ec59 8b10 	vmov	r8, r9, d0
 800aed8:	ee10 0a10 	vmov	r0, s0
 800aedc:	2200      	movs	r2, #0
 800aede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 fe0c 	bl	8000b00 <__aeabi_dcmple>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d07a      	beq.n	800afe2 <_strtod_l+0xa8a>
 800aeec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d04a      	beq.n	800af88 <_strtod_l+0xa30>
 800aef2:	4b95      	ldr	r3, [pc, #596]	; (800b148 <_strtod_l+0xbf0>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aefa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b148 <_strtod_l+0xbf0>
 800aefe:	f04f 0800 	mov.w	r8, #0
 800af02:	4b92      	ldr	r3, [pc, #584]	; (800b14c <_strtod_l+0xbf4>)
 800af04:	403b      	ands	r3, r7
 800af06:	930d      	str	r3, [sp, #52]	; 0x34
 800af08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af0a:	4b91      	ldr	r3, [pc, #580]	; (800b150 <_strtod_l+0xbf8>)
 800af0c:	429a      	cmp	r2, r3
 800af0e:	f040 80b0 	bne.w	800b072 <_strtod_l+0xb1a>
 800af12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af16:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af1a:	ec4b ab10 	vmov	d0, sl, fp
 800af1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af22:	f001 ff31 	bl	800cd88 <__ulp>
 800af26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af2a:	ec53 2b10 	vmov	r2, r3, d0
 800af2e:	f7f5 fb6b 	bl	8000608 <__aeabi_dmul>
 800af32:	4652      	mov	r2, sl
 800af34:	465b      	mov	r3, fp
 800af36:	f7f5 f9b1 	bl	800029c <__adddf3>
 800af3a:	460b      	mov	r3, r1
 800af3c:	4983      	ldr	r1, [pc, #524]	; (800b14c <_strtod_l+0xbf4>)
 800af3e:	4a85      	ldr	r2, [pc, #532]	; (800b154 <_strtod_l+0xbfc>)
 800af40:	4019      	ands	r1, r3
 800af42:	4291      	cmp	r1, r2
 800af44:	4682      	mov	sl, r0
 800af46:	d960      	bls.n	800b00a <_strtod_l+0xab2>
 800af48:	ee18 3a90 	vmov	r3, s17
 800af4c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af50:	4293      	cmp	r3, r2
 800af52:	d104      	bne.n	800af5e <_strtod_l+0xa06>
 800af54:	ee18 3a10 	vmov	r3, s16
 800af58:	3301      	adds	r3, #1
 800af5a:	f43f ad45 	beq.w	800a9e8 <_strtod_l+0x490>
 800af5e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b160 <_strtod_l+0xc08>
 800af62:	f04f 3aff 	mov.w	sl, #4294967295
 800af66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af68:	4620      	mov	r0, r4
 800af6a:	f001 fbdb 	bl	800c724 <_Bfree>
 800af6e:	9905      	ldr	r1, [sp, #20]
 800af70:	4620      	mov	r0, r4
 800af72:	f001 fbd7 	bl	800c724 <_Bfree>
 800af76:	4631      	mov	r1, r6
 800af78:	4620      	mov	r0, r4
 800af7a:	f001 fbd3 	bl	800c724 <_Bfree>
 800af7e:	4629      	mov	r1, r5
 800af80:	4620      	mov	r0, r4
 800af82:	f001 fbcf 	bl	800c724 <_Bfree>
 800af86:	e61a      	b.n	800abbe <_strtod_l+0x666>
 800af88:	f1ba 0f00 	cmp.w	sl, #0
 800af8c:	d11b      	bne.n	800afc6 <_strtod_l+0xa6e>
 800af8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af92:	b9f3      	cbnz	r3, 800afd2 <_strtod_l+0xa7a>
 800af94:	4b6c      	ldr	r3, [pc, #432]	; (800b148 <_strtod_l+0xbf0>)
 800af96:	2200      	movs	r2, #0
 800af98:	4640      	mov	r0, r8
 800af9a:	4649      	mov	r1, r9
 800af9c:	f7f5 fda6 	bl	8000aec <__aeabi_dcmplt>
 800afa0:	b9d0      	cbnz	r0, 800afd8 <_strtod_l+0xa80>
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	4b6c      	ldr	r3, [pc, #432]	; (800b158 <_strtod_l+0xc00>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	f7f5 fb2d 	bl	8000608 <__aeabi_dmul>
 800afae:	4680      	mov	r8, r0
 800afb0:	4689      	mov	r9, r1
 800afb2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800afba:	9315      	str	r3, [sp, #84]	; 0x54
 800afbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800afc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800afc4:	e79d      	b.n	800af02 <_strtod_l+0x9aa>
 800afc6:	f1ba 0f01 	cmp.w	sl, #1
 800afca:	d102      	bne.n	800afd2 <_strtod_l+0xa7a>
 800afcc:	2f00      	cmp	r7, #0
 800afce:	f43f ad83 	beq.w	800aad8 <_strtod_l+0x580>
 800afd2:	4b62      	ldr	r3, [pc, #392]	; (800b15c <_strtod_l+0xc04>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	e78e      	b.n	800aef6 <_strtod_l+0x99e>
 800afd8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b158 <_strtod_l+0xc00>
 800afdc:	f04f 0800 	mov.w	r8, #0
 800afe0:	e7e7      	b.n	800afb2 <_strtod_l+0xa5a>
 800afe2:	4b5d      	ldr	r3, [pc, #372]	; (800b158 <_strtod_l+0xc00>)
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	2200      	movs	r2, #0
 800afea:	f7f5 fb0d 	bl	8000608 <__aeabi_dmul>
 800afee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff0:	4680      	mov	r8, r0
 800aff2:	4689      	mov	r9, r1
 800aff4:	b933      	cbnz	r3, 800b004 <_strtod_l+0xaac>
 800aff6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800affa:	900e      	str	r0, [sp, #56]	; 0x38
 800affc:	930f      	str	r3, [sp, #60]	; 0x3c
 800affe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b002:	e7dd      	b.n	800afc0 <_strtod_l+0xa68>
 800b004:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b008:	e7f9      	b.n	800affe <_strtod_l+0xaa6>
 800b00a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1a8      	bne.n	800af66 <_strtod_l+0xa0e>
 800b014:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b01a:	0d1b      	lsrs	r3, r3, #20
 800b01c:	051b      	lsls	r3, r3, #20
 800b01e:	429a      	cmp	r2, r3
 800b020:	d1a1      	bne.n	800af66 <_strtod_l+0xa0e>
 800b022:	4640      	mov	r0, r8
 800b024:	4649      	mov	r1, r9
 800b026:	f7f5 fe4f 	bl	8000cc8 <__aeabi_d2lz>
 800b02a:	f7f5 fabf 	bl	80005ac <__aeabi_l2d>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4640      	mov	r0, r8
 800b034:	4649      	mov	r1, r9
 800b036:	f7f5 f92f 	bl	8000298 <__aeabi_dsub>
 800b03a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b03c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b040:	ea43 030a 	orr.w	r3, r3, sl
 800b044:	4313      	orrs	r3, r2
 800b046:	4680      	mov	r8, r0
 800b048:	4689      	mov	r9, r1
 800b04a:	d055      	beq.n	800b0f8 <_strtod_l+0xba0>
 800b04c:	a336      	add	r3, pc, #216	; (adr r3, 800b128 <_strtod_l+0xbd0>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800b056:	2800      	cmp	r0, #0
 800b058:	f47f acd0 	bne.w	800a9fc <_strtod_l+0x4a4>
 800b05c:	a334      	add	r3, pc, #208	; (adr r3, 800b130 <_strtod_l+0xbd8>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	4640      	mov	r0, r8
 800b064:	4649      	mov	r1, r9
 800b066:	f7f5 fd5f 	bl	8000b28 <__aeabi_dcmpgt>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	f43f af7b 	beq.w	800af66 <_strtod_l+0xa0e>
 800b070:	e4c4      	b.n	800a9fc <_strtod_l+0x4a4>
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	b333      	cbz	r3, 800b0c4 <_strtod_l+0xb6c>
 800b076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b078:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b07c:	d822      	bhi.n	800b0c4 <_strtod_l+0xb6c>
 800b07e:	a32e      	add	r3, pc, #184	; (adr r3, 800b138 <_strtod_l+0xbe0>)
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	4640      	mov	r0, r8
 800b086:	4649      	mov	r1, r9
 800b088:	f7f5 fd3a 	bl	8000b00 <__aeabi_dcmple>
 800b08c:	b1a0      	cbz	r0, 800b0b8 <_strtod_l+0xb60>
 800b08e:	4649      	mov	r1, r9
 800b090:	4640      	mov	r0, r8
 800b092:	f7f5 fd91 	bl	8000bb8 <__aeabi_d2uiz>
 800b096:	2801      	cmp	r0, #1
 800b098:	bf38      	it	cc
 800b09a:	2001      	movcc	r0, #1
 800b09c:	f7f5 fa3a 	bl	8000514 <__aeabi_ui2d>
 800b0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	4689      	mov	r9, r1
 800b0a6:	bb23      	cbnz	r3, 800b0f2 <_strtod_l+0xb9a>
 800b0a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0ac:	9010      	str	r0, [sp, #64]	; 0x40
 800b0ae:	9311      	str	r3, [sp, #68]	; 0x44
 800b0b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b0c0:	1a9b      	subs	r3, r3, r2
 800b0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b0cc:	eef0 0a68 	vmov.f32	s1, s17
 800b0d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b0d4:	f001 fe58 	bl	800cd88 <__ulp>
 800b0d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0dc:	ec53 2b10 	vmov	r2, r3, d0
 800b0e0:	f7f5 fa92 	bl	8000608 <__aeabi_dmul>
 800b0e4:	ec53 2b18 	vmov	r2, r3, d8
 800b0e8:	f7f5 f8d8 	bl	800029c <__adddf3>
 800b0ec:	4682      	mov	sl, r0
 800b0ee:	468b      	mov	fp, r1
 800b0f0:	e78d      	b.n	800b00e <_strtod_l+0xab6>
 800b0f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b0f6:	e7db      	b.n	800b0b0 <_strtod_l+0xb58>
 800b0f8:	a311      	add	r3, pc, #68	; (adr r3, 800b140 <_strtod_l+0xbe8>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f7f5 fcf5 	bl	8000aec <__aeabi_dcmplt>
 800b102:	e7b2      	b.n	800b06a <_strtod_l+0xb12>
 800b104:	2300      	movs	r3, #0
 800b106:	930a      	str	r3, [sp, #40]	; 0x28
 800b108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b10a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	f7ff ba6b 	b.w	800a5e8 <_strtod_l+0x90>
 800b112:	2a65      	cmp	r2, #101	; 0x65
 800b114:	f43f ab5f 	beq.w	800a7d6 <_strtod_l+0x27e>
 800b118:	2a45      	cmp	r2, #69	; 0x45
 800b11a:	f43f ab5c 	beq.w	800a7d6 <_strtod_l+0x27e>
 800b11e:	2301      	movs	r3, #1
 800b120:	f7ff bb94 	b.w	800a84c <_strtod_l+0x2f4>
 800b124:	f3af 8000 	nop.w
 800b128:	94a03595 	.word	0x94a03595
 800b12c:	3fdfffff 	.word	0x3fdfffff
 800b130:	35afe535 	.word	0x35afe535
 800b134:	3fe00000 	.word	0x3fe00000
 800b138:	ffc00000 	.word	0xffc00000
 800b13c:	41dfffff 	.word	0x41dfffff
 800b140:	94a03595 	.word	0x94a03595
 800b144:	3fcfffff 	.word	0x3fcfffff
 800b148:	3ff00000 	.word	0x3ff00000
 800b14c:	7ff00000 	.word	0x7ff00000
 800b150:	7fe00000 	.word	0x7fe00000
 800b154:	7c9fffff 	.word	0x7c9fffff
 800b158:	3fe00000 	.word	0x3fe00000
 800b15c:	bff00000 	.word	0xbff00000
 800b160:	7fefffff 	.word	0x7fefffff

0800b164 <_strtod_r>:
 800b164:	4b01      	ldr	r3, [pc, #4]	; (800b16c <_strtod_r+0x8>)
 800b166:	f7ff b9f7 	b.w	800a558 <_strtod_l>
 800b16a:	bf00      	nop
 800b16c:	20000164 	.word	0x20000164

0800b170 <_strtol_l.constprop.0>:
 800b170:	2b01      	cmp	r3, #1
 800b172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b176:	d001      	beq.n	800b17c <_strtol_l.constprop.0+0xc>
 800b178:	2b24      	cmp	r3, #36	; 0x24
 800b17a:	d906      	bls.n	800b18a <_strtol_l.constprop.0+0x1a>
 800b17c:	f7fe fafe 	bl	800977c <__errno>
 800b180:	2316      	movs	r3, #22
 800b182:	6003      	str	r3, [r0, #0]
 800b184:	2000      	movs	r0, #0
 800b186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b270 <_strtol_l.constprop.0+0x100>
 800b18e:	460d      	mov	r5, r1
 800b190:	462e      	mov	r6, r5
 800b192:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b196:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b19a:	f017 0708 	ands.w	r7, r7, #8
 800b19e:	d1f7      	bne.n	800b190 <_strtol_l.constprop.0+0x20>
 800b1a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b1a2:	d132      	bne.n	800b20a <_strtol_l.constprop.0+0x9a>
 800b1a4:	782c      	ldrb	r4, [r5, #0]
 800b1a6:	2701      	movs	r7, #1
 800b1a8:	1cb5      	adds	r5, r6, #2
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d05b      	beq.n	800b266 <_strtol_l.constprop.0+0xf6>
 800b1ae:	2b10      	cmp	r3, #16
 800b1b0:	d109      	bne.n	800b1c6 <_strtol_l.constprop.0+0x56>
 800b1b2:	2c30      	cmp	r4, #48	; 0x30
 800b1b4:	d107      	bne.n	800b1c6 <_strtol_l.constprop.0+0x56>
 800b1b6:	782c      	ldrb	r4, [r5, #0]
 800b1b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b1bc:	2c58      	cmp	r4, #88	; 0x58
 800b1be:	d14d      	bne.n	800b25c <_strtol_l.constprop.0+0xec>
 800b1c0:	786c      	ldrb	r4, [r5, #1]
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	3502      	adds	r5, #2
 800b1c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b1ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1ce:	f04f 0c00 	mov.w	ip, #0
 800b1d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b1d6:	4666      	mov	r6, ip
 800b1d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b1dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b1e0:	f1be 0f09 	cmp.w	lr, #9
 800b1e4:	d816      	bhi.n	800b214 <_strtol_l.constprop.0+0xa4>
 800b1e6:	4674      	mov	r4, lr
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	dd24      	ble.n	800b236 <_strtol_l.constprop.0+0xc6>
 800b1ec:	f1bc 0f00 	cmp.w	ip, #0
 800b1f0:	db1e      	blt.n	800b230 <_strtol_l.constprop.0+0xc0>
 800b1f2:	45b1      	cmp	r9, r6
 800b1f4:	d31c      	bcc.n	800b230 <_strtol_l.constprop.0+0xc0>
 800b1f6:	d101      	bne.n	800b1fc <_strtol_l.constprop.0+0x8c>
 800b1f8:	45a2      	cmp	sl, r4
 800b1fa:	db19      	blt.n	800b230 <_strtol_l.constprop.0+0xc0>
 800b1fc:	fb06 4603 	mla	r6, r6, r3, r4
 800b200:	f04f 0c01 	mov.w	ip, #1
 800b204:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b208:	e7e8      	b.n	800b1dc <_strtol_l.constprop.0+0x6c>
 800b20a:	2c2b      	cmp	r4, #43	; 0x2b
 800b20c:	bf04      	itt	eq
 800b20e:	782c      	ldrbeq	r4, [r5, #0]
 800b210:	1cb5      	addeq	r5, r6, #2
 800b212:	e7ca      	b.n	800b1aa <_strtol_l.constprop.0+0x3a>
 800b214:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b218:	f1be 0f19 	cmp.w	lr, #25
 800b21c:	d801      	bhi.n	800b222 <_strtol_l.constprop.0+0xb2>
 800b21e:	3c37      	subs	r4, #55	; 0x37
 800b220:	e7e2      	b.n	800b1e8 <_strtol_l.constprop.0+0x78>
 800b222:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b226:	f1be 0f19 	cmp.w	lr, #25
 800b22a:	d804      	bhi.n	800b236 <_strtol_l.constprop.0+0xc6>
 800b22c:	3c57      	subs	r4, #87	; 0x57
 800b22e:	e7db      	b.n	800b1e8 <_strtol_l.constprop.0+0x78>
 800b230:	f04f 3cff 	mov.w	ip, #4294967295
 800b234:	e7e6      	b.n	800b204 <_strtol_l.constprop.0+0x94>
 800b236:	f1bc 0f00 	cmp.w	ip, #0
 800b23a:	da05      	bge.n	800b248 <_strtol_l.constprop.0+0xd8>
 800b23c:	2322      	movs	r3, #34	; 0x22
 800b23e:	6003      	str	r3, [r0, #0]
 800b240:	4646      	mov	r6, r8
 800b242:	b942      	cbnz	r2, 800b256 <_strtol_l.constprop.0+0xe6>
 800b244:	4630      	mov	r0, r6
 800b246:	e79e      	b.n	800b186 <_strtol_l.constprop.0+0x16>
 800b248:	b107      	cbz	r7, 800b24c <_strtol_l.constprop.0+0xdc>
 800b24a:	4276      	negs	r6, r6
 800b24c:	2a00      	cmp	r2, #0
 800b24e:	d0f9      	beq.n	800b244 <_strtol_l.constprop.0+0xd4>
 800b250:	f1bc 0f00 	cmp.w	ip, #0
 800b254:	d000      	beq.n	800b258 <_strtol_l.constprop.0+0xe8>
 800b256:	1e69      	subs	r1, r5, #1
 800b258:	6011      	str	r1, [r2, #0]
 800b25a:	e7f3      	b.n	800b244 <_strtol_l.constprop.0+0xd4>
 800b25c:	2430      	movs	r4, #48	; 0x30
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1b1      	bne.n	800b1c6 <_strtol_l.constprop.0+0x56>
 800b262:	2308      	movs	r3, #8
 800b264:	e7af      	b.n	800b1c6 <_strtol_l.constprop.0+0x56>
 800b266:	2c30      	cmp	r4, #48	; 0x30
 800b268:	d0a5      	beq.n	800b1b6 <_strtol_l.constprop.0+0x46>
 800b26a:	230a      	movs	r3, #10
 800b26c:	e7ab      	b.n	800b1c6 <_strtol_l.constprop.0+0x56>
 800b26e:	bf00      	nop
 800b270:	0800e1e1 	.word	0x0800e1e1

0800b274 <_strtol_r>:
 800b274:	f7ff bf7c 	b.w	800b170 <_strtol_l.constprop.0>

0800b278 <quorem>:
 800b278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	6903      	ldr	r3, [r0, #16]
 800b27e:	690c      	ldr	r4, [r1, #16]
 800b280:	42a3      	cmp	r3, r4
 800b282:	4607      	mov	r7, r0
 800b284:	f2c0 8081 	blt.w	800b38a <quorem+0x112>
 800b288:	3c01      	subs	r4, #1
 800b28a:	f101 0814 	add.w	r8, r1, #20
 800b28e:	f100 0514 	add.w	r5, r0, #20
 800b292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b29c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2b0:	d331      	bcc.n	800b316 <quorem+0x9e>
 800b2b2:	f04f 0e00 	mov.w	lr, #0
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	46ac      	mov	ip, r5
 800b2ba:	46f2      	mov	sl, lr
 800b2bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2c0:	b293      	uxth	r3, r2
 800b2c2:	fb06 e303 	mla	r3, r6, r3, lr
 800b2c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	ebaa 0303 	sub.w	r3, sl, r3
 800b2d0:	f8dc a000 	ldr.w	sl, [ip]
 800b2d4:	0c12      	lsrs	r2, r2, #16
 800b2d6:	fa13 f38a 	uxtah	r3, r3, sl
 800b2da:	fb06 e202 	mla	r2, r6, r2, lr
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	9b00      	ldr	r3, [sp, #0]
 800b2e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b2e6:	b292      	uxth	r2, r2
 800b2e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b2ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b2f4:	4581      	cmp	r9, r0
 800b2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2fa:	f84c 3b04 	str.w	r3, [ip], #4
 800b2fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b302:	d2db      	bcs.n	800b2bc <quorem+0x44>
 800b304:	f855 300b 	ldr.w	r3, [r5, fp]
 800b308:	b92b      	cbnz	r3, 800b316 <quorem+0x9e>
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	3b04      	subs	r3, #4
 800b30e:	429d      	cmp	r5, r3
 800b310:	461a      	mov	r2, r3
 800b312:	d32e      	bcc.n	800b372 <quorem+0xfa>
 800b314:	613c      	str	r4, [r7, #16]
 800b316:	4638      	mov	r0, r7
 800b318:	f001 fc90 	bl	800cc3c <__mcmp>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	db24      	blt.n	800b36a <quorem+0xf2>
 800b320:	3601      	adds	r6, #1
 800b322:	4628      	mov	r0, r5
 800b324:	f04f 0c00 	mov.w	ip, #0
 800b328:	f858 2b04 	ldr.w	r2, [r8], #4
 800b32c:	f8d0 e000 	ldr.w	lr, [r0]
 800b330:	b293      	uxth	r3, r2
 800b332:	ebac 0303 	sub.w	r3, ip, r3
 800b336:	0c12      	lsrs	r2, r2, #16
 800b338:	fa13 f38e 	uxtah	r3, r3, lr
 800b33c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b344:	b29b      	uxth	r3, r3
 800b346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b34a:	45c1      	cmp	r9, r8
 800b34c:	f840 3b04 	str.w	r3, [r0], #4
 800b350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b354:	d2e8      	bcs.n	800b328 <quorem+0xb0>
 800b356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b35a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b35e:	b922      	cbnz	r2, 800b36a <quorem+0xf2>
 800b360:	3b04      	subs	r3, #4
 800b362:	429d      	cmp	r5, r3
 800b364:	461a      	mov	r2, r3
 800b366:	d30a      	bcc.n	800b37e <quorem+0x106>
 800b368:	613c      	str	r4, [r7, #16]
 800b36a:	4630      	mov	r0, r6
 800b36c:	b003      	add	sp, #12
 800b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b372:	6812      	ldr	r2, [r2, #0]
 800b374:	3b04      	subs	r3, #4
 800b376:	2a00      	cmp	r2, #0
 800b378:	d1cc      	bne.n	800b314 <quorem+0x9c>
 800b37a:	3c01      	subs	r4, #1
 800b37c:	e7c7      	b.n	800b30e <quorem+0x96>
 800b37e:	6812      	ldr	r2, [r2, #0]
 800b380:	3b04      	subs	r3, #4
 800b382:	2a00      	cmp	r2, #0
 800b384:	d1f0      	bne.n	800b368 <quorem+0xf0>
 800b386:	3c01      	subs	r4, #1
 800b388:	e7eb      	b.n	800b362 <quorem+0xea>
 800b38a:	2000      	movs	r0, #0
 800b38c:	e7ee      	b.n	800b36c <quorem+0xf4>
	...

0800b390 <_dtoa_r>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	ed2d 8b04 	vpush	{d8-d9}
 800b398:	ec57 6b10 	vmov	r6, r7, d0
 800b39c:	b093      	sub	sp, #76	; 0x4c
 800b39e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3a4:	9106      	str	r1, [sp, #24]
 800b3a6:	ee10 aa10 	vmov	sl, s0
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b3b0:	46bb      	mov	fp, r7
 800b3b2:	b975      	cbnz	r5, 800b3d2 <_dtoa_r+0x42>
 800b3b4:	2010      	movs	r0, #16
 800b3b6:	f001 f94d 	bl	800c654 <malloc>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	6260      	str	r0, [r4, #36]	; 0x24
 800b3be:	b920      	cbnz	r0, 800b3ca <_dtoa_r+0x3a>
 800b3c0:	4ba7      	ldr	r3, [pc, #668]	; (800b660 <_dtoa_r+0x2d0>)
 800b3c2:	21ea      	movs	r1, #234	; 0xea
 800b3c4:	48a7      	ldr	r0, [pc, #668]	; (800b664 <_dtoa_r+0x2d4>)
 800b3c6:	f002 f8e9 	bl	800d59c <__assert_func>
 800b3ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3ce:	6005      	str	r5, [r0, #0]
 800b3d0:	60c5      	str	r5, [r0, #12]
 800b3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3d4:	6819      	ldr	r1, [r3, #0]
 800b3d6:	b151      	cbz	r1, 800b3ee <_dtoa_r+0x5e>
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	604a      	str	r2, [r1, #4]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	4093      	lsls	r3, r2
 800b3e0:	608b      	str	r3, [r1, #8]
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f001 f99e 	bl	800c724 <_Bfree>
 800b3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	1e3b      	subs	r3, r7, #0
 800b3f0:	bfaa      	itet	ge
 800b3f2:	2300      	movge	r3, #0
 800b3f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b3f8:	f8c8 3000 	strge.w	r3, [r8]
 800b3fc:	4b9a      	ldr	r3, [pc, #616]	; (800b668 <_dtoa_r+0x2d8>)
 800b3fe:	bfbc      	itt	lt
 800b400:	2201      	movlt	r2, #1
 800b402:	f8c8 2000 	strlt.w	r2, [r8]
 800b406:	ea33 030b 	bics.w	r3, r3, fp
 800b40a:	d11b      	bne.n	800b444 <_dtoa_r+0xb4>
 800b40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b40e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b418:	4333      	orrs	r3, r6
 800b41a:	f000 8592 	beq.w	800bf42 <_dtoa_r+0xbb2>
 800b41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b420:	b963      	cbnz	r3, 800b43c <_dtoa_r+0xac>
 800b422:	4b92      	ldr	r3, [pc, #584]	; (800b66c <_dtoa_r+0x2dc>)
 800b424:	e022      	b.n	800b46c <_dtoa_r+0xdc>
 800b426:	4b92      	ldr	r3, [pc, #584]	; (800b670 <_dtoa_r+0x2e0>)
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	3308      	adds	r3, #8
 800b42c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b42e:	6013      	str	r3, [r2, #0]
 800b430:	9801      	ldr	r0, [sp, #4]
 800b432:	b013      	add	sp, #76	; 0x4c
 800b434:	ecbd 8b04 	vpop	{d8-d9}
 800b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43c:	4b8b      	ldr	r3, [pc, #556]	; (800b66c <_dtoa_r+0x2dc>)
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	3303      	adds	r3, #3
 800b442:	e7f3      	b.n	800b42c <_dtoa_r+0x9c>
 800b444:	2200      	movs	r2, #0
 800b446:	2300      	movs	r3, #0
 800b448:	4650      	mov	r0, sl
 800b44a:	4659      	mov	r1, fp
 800b44c:	f7f5 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 800b450:	ec4b ab19 	vmov	d9, sl, fp
 800b454:	4680      	mov	r8, r0
 800b456:	b158      	cbz	r0, 800b470 <_dtoa_r+0xe0>
 800b458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b45a:	2301      	movs	r3, #1
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 856b 	beq.w	800bf3c <_dtoa_r+0xbac>
 800b466:	4883      	ldr	r0, [pc, #524]	; (800b674 <_dtoa_r+0x2e4>)
 800b468:	6018      	str	r0, [r3, #0]
 800b46a:	1e43      	subs	r3, r0, #1
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	e7df      	b.n	800b430 <_dtoa_r+0xa0>
 800b470:	ec4b ab10 	vmov	d0, sl, fp
 800b474:	aa10      	add	r2, sp, #64	; 0x40
 800b476:	a911      	add	r1, sp, #68	; 0x44
 800b478:	4620      	mov	r0, r4
 800b47a:	f001 fd01 	bl	800ce80 <__d2b>
 800b47e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b482:	ee08 0a10 	vmov	s16, r0
 800b486:	2d00      	cmp	r5, #0
 800b488:	f000 8084 	beq.w	800b594 <_dtoa_r+0x204>
 800b48c:	ee19 3a90 	vmov	r3, s19
 800b490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b494:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b498:	4656      	mov	r6, sl
 800b49a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b49e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b4a6:	4b74      	ldr	r3, [pc, #464]	; (800b678 <_dtoa_r+0x2e8>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	f7f4 fef3 	bl	8000298 <__aeabi_dsub>
 800b4b2:	a365      	add	r3, pc, #404	; (adr r3, 800b648 <_dtoa_r+0x2b8>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f7f5 f8a6 	bl	8000608 <__aeabi_dmul>
 800b4bc:	a364      	add	r3, pc, #400	; (adr r3, 800b650 <_dtoa_r+0x2c0>)
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f7f4 feeb 	bl	800029c <__adddf3>
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	460f      	mov	r7, r1
 800b4cc:	f7f5 f832 	bl	8000534 <__aeabi_i2d>
 800b4d0:	a361      	add	r3, pc, #388	; (adr r3, 800b658 <_dtoa_r+0x2c8>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f5 f897 	bl	8000608 <__aeabi_dmul>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f4 fedb 	bl	800029c <__adddf3>
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	f7f5 fb3d 	bl	8000b68 <__aeabi_d2iz>
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	9000      	str	r0, [sp, #0]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	f7f5 faf8 	bl	8000aec <__aeabi_dcmplt>
 800b4fc:	b150      	cbz	r0, 800b514 <_dtoa_r+0x184>
 800b4fe:	9800      	ldr	r0, [sp, #0]
 800b500:	f7f5 f818 	bl	8000534 <__aeabi_i2d>
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	f7f5 fae6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b50c:	b910      	cbnz	r0, 800b514 <_dtoa_r+0x184>
 800b50e:	9b00      	ldr	r3, [sp, #0]
 800b510:	3b01      	subs	r3, #1
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	9b00      	ldr	r3, [sp, #0]
 800b516:	2b16      	cmp	r3, #22
 800b518:	d85a      	bhi.n	800b5d0 <_dtoa_r+0x240>
 800b51a:	9a00      	ldr	r2, [sp, #0]
 800b51c:	4b57      	ldr	r3, [pc, #348]	; (800b67c <_dtoa_r+0x2ec>)
 800b51e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b526:	ec51 0b19 	vmov	r0, r1, d9
 800b52a:	f7f5 fadf 	bl	8000aec <__aeabi_dcmplt>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d050      	beq.n	800b5d4 <_dtoa_r+0x244>
 800b532:	9b00      	ldr	r3, [sp, #0]
 800b534:	3b01      	subs	r3, #1
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	2300      	movs	r3, #0
 800b53a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b53e:	1b5d      	subs	r5, r3, r5
 800b540:	1e6b      	subs	r3, r5, #1
 800b542:	9305      	str	r3, [sp, #20]
 800b544:	bf45      	ittet	mi
 800b546:	f1c5 0301 	rsbmi	r3, r5, #1
 800b54a:	9304      	strmi	r3, [sp, #16]
 800b54c:	2300      	movpl	r3, #0
 800b54e:	2300      	movmi	r3, #0
 800b550:	bf4c      	ite	mi
 800b552:	9305      	strmi	r3, [sp, #20]
 800b554:	9304      	strpl	r3, [sp, #16]
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	db3d      	blt.n	800b5d8 <_dtoa_r+0x248>
 800b55c:	9b05      	ldr	r3, [sp, #20]
 800b55e:	9a00      	ldr	r2, [sp, #0]
 800b560:	920a      	str	r2, [sp, #40]	; 0x28
 800b562:	4413      	add	r3, r2
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	2300      	movs	r3, #0
 800b568:	9307      	str	r3, [sp, #28]
 800b56a:	9b06      	ldr	r3, [sp, #24]
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	f200 8089 	bhi.w	800b684 <_dtoa_r+0x2f4>
 800b572:	2b05      	cmp	r3, #5
 800b574:	bfc4      	itt	gt
 800b576:	3b04      	subgt	r3, #4
 800b578:	9306      	strgt	r3, [sp, #24]
 800b57a:	9b06      	ldr	r3, [sp, #24]
 800b57c:	f1a3 0302 	sub.w	r3, r3, #2
 800b580:	bfcc      	ite	gt
 800b582:	2500      	movgt	r5, #0
 800b584:	2501      	movle	r5, #1
 800b586:	2b03      	cmp	r3, #3
 800b588:	f200 8087 	bhi.w	800b69a <_dtoa_r+0x30a>
 800b58c:	e8df f003 	tbb	[pc, r3]
 800b590:	59383a2d 	.word	0x59383a2d
 800b594:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b598:	441d      	add	r5, r3
 800b59a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	bfc1      	itttt	gt
 800b5a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b5aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b5ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b5b2:	bfda      	itte	le
 800b5b4:	f1c3 0320 	rsble	r3, r3, #32
 800b5b8:	fa06 f003 	lslle.w	r0, r6, r3
 800b5bc:	4318      	orrgt	r0, r3
 800b5be:	f7f4 ffa9 	bl	8000514 <__aeabi_ui2d>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b5ca:	3d01      	subs	r5, #1
 800b5cc:	930e      	str	r3, [sp, #56]	; 0x38
 800b5ce:	e76a      	b.n	800b4a6 <_dtoa_r+0x116>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e7b2      	b.n	800b53a <_dtoa_r+0x1aa>
 800b5d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b5d6:	e7b1      	b.n	800b53c <_dtoa_r+0x1ac>
 800b5d8:	9b04      	ldr	r3, [sp, #16]
 800b5da:	9a00      	ldr	r2, [sp, #0]
 800b5dc:	1a9b      	subs	r3, r3, r2
 800b5de:	9304      	str	r3, [sp, #16]
 800b5e0:	4253      	negs	r3, r2
 800b5e2:	9307      	str	r3, [sp, #28]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b5e8:	e7bf      	b.n	800b56a <_dtoa_r+0x1da>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9308      	str	r3, [sp, #32]
 800b5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dc55      	bgt.n	800b6a0 <_dtoa_r+0x310>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b5fe:	e00c      	b.n	800b61a <_dtoa_r+0x28a>
 800b600:	2301      	movs	r3, #1
 800b602:	e7f3      	b.n	800b5ec <_dtoa_r+0x25c>
 800b604:	2300      	movs	r3, #0
 800b606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b608:	9308      	str	r3, [sp, #32]
 800b60a:	9b00      	ldr	r3, [sp, #0]
 800b60c:	4413      	add	r3, r2
 800b60e:	9302      	str	r3, [sp, #8]
 800b610:	3301      	adds	r3, #1
 800b612:	2b01      	cmp	r3, #1
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	bfb8      	it	lt
 800b618:	2301      	movlt	r3, #1
 800b61a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b61c:	2200      	movs	r2, #0
 800b61e:	6042      	str	r2, [r0, #4]
 800b620:	2204      	movs	r2, #4
 800b622:	f102 0614 	add.w	r6, r2, #20
 800b626:	429e      	cmp	r6, r3
 800b628:	6841      	ldr	r1, [r0, #4]
 800b62a:	d93d      	bls.n	800b6a8 <_dtoa_r+0x318>
 800b62c:	4620      	mov	r0, r4
 800b62e:	f001 f839 	bl	800c6a4 <_Balloc>
 800b632:	9001      	str	r0, [sp, #4]
 800b634:	2800      	cmp	r0, #0
 800b636:	d13b      	bne.n	800b6b0 <_dtoa_r+0x320>
 800b638:	4b11      	ldr	r3, [pc, #68]	; (800b680 <_dtoa_r+0x2f0>)
 800b63a:	4602      	mov	r2, r0
 800b63c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b640:	e6c0      	b.n	800b3c4 <_dtoa_r+0x34>
 800b642:	2301      	movs	r3, #1
 800b644:	e7df      	b.n	800b606 <_dtoa_r+0x276>
 800b646:	bf00      	nop
 800b648:	636f4361 	.word	0x636f4361
 800b64c:	3fd287a7 	.word	0x3fd287a7
 800b650:	8b60c8b3 	.word	0x8b60c8b3
 800b654:	3fc68a28 	.word	0x3fc68a28
 800b658:	509f79fb 	.word	0x509f79fb
 800b65c:	3fd34413 	.word	0x3fd34413
 800b660:	0800e2ee 	.word	0x0800e2ee
 800b664:	0800e305 	.word	0x0800e305
 800b668:	7ff00000 	.word	0x7ff00000
 800b66c:	0800e2ea 	.word	0x0800e2ea
 800b670:	0800e2e1 	.word	0x0800e2e1
 800b674:	0800e161 	.word	0x0800e161
 800b678:	3ff80000 	.word	0x3ff80000
 800b67c:	0800e470 	.word	0x0800e470
 800b680:	0800e360 	.word	0x0800e360
 800b684:	2501      	movs	r5, #1
 800b686:	2300      	movs	r3, #0
 800b688:	9306      	str	r3, [sp, #24]
 800b68a:	9508      	str	r5, [sp, #32]
 800b68c:	f04f 33ff 	mov.w	r3, #4294967295
 800b690:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b694:	2200      	movs	r2, #0
 800b696:	2312      	movs	r3, #18
 800b698:	e7b0      	b.n	800b5fc <_dtoa_r+0x26c>
 800b69a:	2301      	movs	r3, #1
 800b69c:	9308      	str	r3, [sp, #32]
 800b69e:	e7f5      	b.n	800b68c <_dtoa_r+0x2fc>
 800b6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b6a6:	e7b8      	b.n	800b61a <_dtoa_r+0x28a>
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	6041      	str	r1, [r0, #4]
 800b6ac:	0052      	lsls	r2, r2, #1
 800b6ae:	e7b8      	b.n	800b622 <_dtoa_r+0x292>
 800b6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6b2:	9a01      	ldr	r2, [sp, #4]
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	9b03      	ldr	r3, [sp, #12]
 800b6b8:	2b0e      	cmp	r3, #14
 800b6ba:	f200 809d 	bhi.w	800b7f8 <_dtoa_r+0x468>
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	f000 809a 	beq.w	800b7f8 <_dtoa_r+0x468>
 800b6c4:	9b00      	ldr	r3, [sp, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	dd32      	ble.n	800b730 <_dtoa_r+0x3a0>
 800b6ca:	4ab7      	ldr	r2, [pc, #732]	; (800b9a8 <_dtoa_r+0x618>)
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6d8:	9b00      	ldr	r3, [sp, #0]
 800b6da:	05d8      	lsls	r0, r3, #23
 800b6dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b6e0:	d516      	bpl.n	800b710 <_dtoa_r+0x380>
 800b6e2:	4bb2      	ldr	r3, [pc, #712]	; (800b9ac <_dtoa_r+0x61c>)
 800b6e4:	ec51 0b19 	vmov	r0, r1, d9
 800b6e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6ec:	f7f5 f8b6 	bl	800085c <__aeabi_ddiv>
 800b6f0:	f007 070f 	and.w	r7, r7, #15
 800b6f4:	4682      	mov	sl, r0
 800b6f6:	468b      	mov	fp, r1
 800b6f8:	2503      	movs	r5, #3
 800b6fa:	4eac      	ldr	r6, [pc, #688]	; (800b9ac <_dtoa_r+0x61c>)
 800b6fc:	b957      	cbnz	r7, 800b714 <_dtoa_r+0x384>
 800b6fe:	4642      	mov	r2, r8
 800b700:	464b      	mov	r3, r9
 800b702:	4650      	mov	r0, sl
 800b704:	4659      	mov	r1, fp
 800b706:	f7f5 f8a9 	bl	800085c <__aeabi_ddiv>
 800b70a:	4682      	mov	sl, r0
 800b70c:	468b      	mov	fp, r1
 800b70e:	e028      	b.n	800b762 <_dtoa_r+0x3d2>
 800b710:	2502      	movs	r5, #2
 800b712:	e7f2      	b.n	800b6fa <_dtoa_r+0x36a>
 800b714:	07f9      	lsls	r1, r7, #31
 800b716:	d508      	bpl.n	800b72a <_dtoa_r+0x39a>
 800b718:	4640      	mov	r0, r8
 800b71a:	4649      	mov	r1, r9
 800b71c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b720:	f7f4 ff72 	bl	8000608 <__aeabi_dmul>
 800b724:	3501      	adds	r5, #1
 800b726:	4680      	mov	r8, r0
 800b728:	4689      	mov	r9, r1
 800b72a:	107f      	asrs	r7, r7, #1
 800b72c:	3608      	adds	r6, #8
 800b72e:	e7e5      	b.n	800b6fc <_dtoa_r+0x36c>
 800b730:	f000 809b 	beq.w	800b86a <_dtoa_r+0x4da>
 800b734:	9b00      	ldr	r3, [sp, #0]
 800b736:	4f9d      	ldr	r7, [pc, #628]	; (800b9ac <_dtoa_r+0x61c>)
 800b738:	425e      	negs	r6, r3
 800b73a:	4b9b      	ldr	r3, [pc, #620]	; (800b9a8 <_dtoa_r+0x618>)
 800b73c:	f006 020f 	and.w	r2, r6, #15
 800b740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	ec51 0b19 	vmov	r0, r1, d9
 800b74c:	f7f4 ff5c 	bl	8000608 <__aeabi_dmul>
 800b750:	1136      	asrs	r6, r6, #4
 800b752:	4682      	mov	sl, r0
 800b754:	468b      	mov	fp, r1
 800b756:	2300      	movs	r3, #0
 800b758:	2502      	movs	r5, #2
 800b75a:	2e00      	cmp	r6, #0
 800b75c:	d17a      	bne.n	800b854 <_dtoa_r+0x4c4>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1d3      	bne.n	800b70a <_dtoa_r+0x37a>
 800b762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 8082 	beq.w	800b86e <_dtoa_r+0x4de>
 800b76a:	4b91      	ldr	r3, [pc, #580]	; (800b9b0 <_dtoa_r+0x620>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	4650      	mov	r0, sl
 800b770:	4659      	mov	r1, fp
 800b772:	f7f5 f9bb 	bl	8000aec <__aeabi_dcmplt>
 800b776:	2800      	cmp	r0, #0
 800b778:	d079      	beq.n	800b86e <_dtoa_r+0x4de>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d076      	beq.n	800b86e <_dtoa_r+0x4de>
 800b780:	9b02      	ldr	r3, [sp, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	dd36      	ble.n	800b7f4 <_dtoa_r+0x464>
 800b786:	9b00      	ldr	r3, [sp, #0]
 800b788:	4650      	mov	r0, sl
 800b78a:	4659      	mov	r1, fp
 800b78c:	1e5f      	subs	r7, r3, #1
 800b78e:	2200      	movs	r2, #0
 800b790:	4b88      	ldr	r3, [pc, #544]	; (800b9b4 <_dtoa_r+0x624>)
 800b792:	f7f4 ff39 	bl	8000608 <__aeabi_dmul>
 800b796:	9e02      	ldr	r6, [sp, #8]
 800b798:	4682      	mov	sl, r0
 800b79a:	468b      	mov	fp, r1
 800b79c:	3501      	adds	r5, #1
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7f4 fec8 	bl	8000534 <__aeabi_i2d>
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	f7f4 ff2e 	bl	8000608 <__aeabi_dmul>
 800b7ac:	4b82      	ldr	r3, [pc, #520]	; (800b9b8 <_dtoa_r+0x628>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f7f4 fd74 	bl	800029c <__adddf3>
 800b7b4:	46d0      	mov	r8, sl
 800b7b6:	46d9      	mov	r9, fp
 800b7b8:	4682      	mov	sl, r0
 800b7ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b7be:	2e00      	cmp	r6, #0
 800b7c0:	d158      	bne.n	800b874 <_dtoa_r+0x4e4>
 800b7c2:	4b7e      	ldr	r3, [pc, #504]	; (800b9bc <_dtoa_r+0x62c>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 fd65 	bl	8000298 <__aeabi_dsub>
 800b7ce:	4652      	mov	r2, sl
 800b7d0:	465b      	mov	r3, fp
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	4689      	mov	r9, r1
 800b7d6:	f7f5 f9a7 	bl	8000b28 <__aeabi_dcmpgt>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	f040 8295 	bne.w	800bd0a <_dtoa_r+0x97a>
 800b7e0:	4652      	mov	r2, sl
 800b7e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	f7f5 f97f 	bl	8000aec <__aeabi_dcmplt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f040 8289 	bne.w	800bd06 <_dtoa_r+0x976>
 800b7f4:	ec5b ab19 	vmov	sl, fp, d9
 800b7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f2c0 8148 	blt.w	800ba90 <_dtoa_r+0x700>
 800b800:	9a00      	ldr	r2, [sp, #0]
 800b802:	2a0e      	cmp	r2, #14
 800b804:	f300 8144 	bgt.w	800ba90 <_dtoa_r+0x700>
 800b808:	4b67      	ldr	r3, [pc, #412]	; (800b9a8 <_dtoa_r+0x618>)
 800b80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b80e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	f280 80d5 	bge.w	800b9c4 <_dtoa_r+0x634>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f300 80d1 	bgt.w	800b9c4 <_dtoa_r+0x634>
 800b822:	f040 826f 	bne.w	800bd04 <_dtoa_r+0x974>
 800b826:	4b65      	ldr	r3, [pc, #404]	; (800b9bc <_dtoa_r+0x62c>)
 800b828:	2200      	movs	r2, #0
 800b82a:	4640      	mov	r0, r8
 800b82c:	4649      	mov	r1, r9
 800b82e:	f7f4 feeb 	bl	8000608 <__aeabi_dmul>
 800b832:	4652      	mov	r2, sl
 800b834:	465b      	mov	r3, fp
 800b836:	f7f5 f96d 	bl	8000b14 <__aeabi_dcmpge>
 800b83a:	9e03      	ldr	r6, [sp, #12]
 800b83c:	4637      	mov	r7, r6
 800b83e:	2800      	cmp	r0, #0
 800b840:	f040 8245 	bne.w	800bcce <_dtoa_r+0x93e>
 800b844:	9d01      	ldr	r5, [sp, #4]
 800b846:	2331      	movs	r3, #49	; 0x31
 800b848:	f805 3b01 	strb.w	r3, [r5], #1
 800b84c:	9b00      	ldr	r3, [sp, #0]
 800b84e:	3301      	adds	r3, #1
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	e240      	b.n	800bcd6 <_dtoa_r+0x946>
 800b854:	07f2      	lsls	r2, r6, #31
 800b856:	d505      	bpl.n	800b864 <_dtoa_r+0x4d4>
 800b858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b85c:	f7f4 fed4 	bl	8000608 <__aeabi_dmul>
 800b860:	3501      	adds	r5, #1
 800b862:	2301      	movs	r3, #1
 800b864:	1076      	asrs	r6, r6, #1
 800b866:	3708      	adds	r7, #8
 800b868:	e777      	b.n	800b75a <_dtoa_r+0x3ca>
 800b86a:	2502      	movs	r5, #2
 800b86c:	e779      	b.n	800b762 <_dtoa_r+0x3d2>
 800b86e:	9f00      	ldr	r7, [sp, #0]
 800b870:	9e03      	ldr	r6, [sp, #12]
 800b872:	e794      	b.n	800b79e <_dtoa_r+0x40e>
 800b874:	9901      	ldr	r1, [sp, #4]
 800b876:	4b4c      	ldr	r3, [pc, #304]	; (800b9a8 <_dtoa_r+0x618>)
 800b878:	4431      	add	r1, r6
 800b87a:	910d      	str	r1, [sp, #52]	; 0x34
 800b87c:	9908      	ldr	r1, [sp, #32]
 800b87e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b886:	2900      	cmp	r1, #0
 800b888:	d043      	beq.n	800b912 <_dtoa_r+0x582>
 800b88a:	494d      	ldr	r1, [pc, #308]	; (800b9c0 <_dtoa_r+0x630>)
 800b88c:	2000      	movs	r0, #0
 800b88e:	f7f4 ffe5 	bl	800085c <__aeabi_ddiv>
 800b892:	4652      	mov	r2, sl
 800b894:	465b      	mov	r3, fp
 800b896:	f7f4 fcff 	bl	8000298 <__aeabi_dsub>
 800b89a:	9d01      	ldr	r5, [sp, #4]
 800b89c:	4682      	mov	sl, r0
 800b89e:	468b      	mov	fp, r1
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	f7f5 f960 	bl	8000b68 <__aeabi_d2iz>
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	f7f4 fe43 	bl	8000534 <__aeabi_i2d>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4640      	mov	r0, r8
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	f7f4 fcef 	bl	8000298 <__aeabi_dsub>
 800b8ba:	3630      	adds	r6, #48	; 0x30
 800b8bc:	f805 6b01 	strb.w	r6, [r5], #1
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	465b      	mov	r3, fp
 800b8c4:	4680      	mov	r8, r0
 800b8c6:	4689      	mov	r9, r1
 800b8c8:	f7f5 f910 	bl	8000aec <__aeabi_dcmplt>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d163      	bne.n	800b998 <_dtoa_r+0x608>
 800b8d0:	4642      	mov	r2, r8
 800b8d2:	464b      	mov	r3, r9
 800b8d4:	4936      	ldr	r1, [pc, #216]	; (800b9b0 <_dtoa_r+0x620>)
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	f7f4 fcde 	bl	8000298 <__aeabi_dsub>
 800b8dc:	4652      	mov	r2, sl
 800b8de:	465b      	mov	r3, fp
 800b8e0:	f7f5 f904 	bl	8000aec <__aeabi_dcmplt>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	f040 80b5 	bne.w	800ba54 <_dtoa_r+0x6c4>
 800b8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	d081      	beq.n	800b7f4 <_dtoa_r+0x464>
 800b8f0:	4b30      	ldr	r3, [pc, #192]	; (800b9b4 <_dtoa_r+0x624>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	4650      	mov	r0, sl
 800b8f6:	4659      	mov	r1, fp
 800b8f8:	f7f4 fe86 	bl	8000608 <__aeabi_dmul>
 800b8fc:	4b2d      	ldr	r3, [pc, #180]	; (800b9b4 <_dtoa_r+0x624>)
 800b8fe:	4682      	mov	sl, r0
 800b900:	468b      	mov	fp, r1
 800b902:	4640      	mov	r0, r8
 800b904:	4649      	mov	r1, r9
 800b906:	2200      	movs	r2, #0
 800b908:	f7f4 fe7e 	bl	8000608 <__aeabi_dmul>
 800b90c:	4680      	mov	r8, r0
 800b90e:	4689      	mov	r9, r1
 800b910:	e7c6      	b.n	800b8a0 <_dtoa_r+0x510>
 800b912:	4650      	mov	r0, sl
 800b914:	4659      	mov	r1, fp
 800b916:	f7f4 fe77 	bl	8000608 <__aeabi_dmul>
 800b91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b91c:	9d01      	ldr	r5, [sp, #4]
 800b91e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b920:	4682      	mov	sl, r0
 800b922:	468b      	mov	fp, r1
 800b924:	4649      	mov	r1, r9
 800b926:	4640      	mov	r0, r8
 800b928:	f7f5 f91e 	bl	8000b68 <__aeabi_d2iz>
 800b92c:	4606      	mov	r6, r0
 800b92e:	f7f4 fe01 	bl	8000534 <__aeabi_i2d>
 800b932:	3630      	adds	r6, #48	; 0x30
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	f7f4 fcac 	bl	8000298 <__aeabi_dsub>
 800b940:	f805 6b01 	strb.w	r6, [r5], #1
 800b944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b946:	429d      	cmp	r5, r3
 800b948:	4680      	mov	r8, r0
 800b94a:	4689      	mov	r9, r1
 800b94c:	f04f 0200 	mov.w	r2, #0
 800b950:	d124      	bne.n	800b99c <_dtoa_r+0x60c>
 800b952:	4b1b      	ldr	r3, [pc, #108]	; (800b9c0 <_dtoa_r+0x630>)
 800b954:	4650      	mov	r0, sl
 800b956:	4659      	mov	r1, fp
 800b958:	f7f4 fca0 	bl	800029c <__adddf3>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4640      	mov	r0, r8
 800b962:	4649      	mov	r1, r9
 800b964:	f7f5 f8e0 	bl	8000b28 <__aeabi_dcmpgt>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d173      	bne.n	800ba54 <_dtoa_r+0x6c4>
 800b96c:	4652      	mov	r2, sl
 800b96e:	465b      	mov	r3, fp
 800b970:	4913      	ldr	r1, [pc, #76]	; (800b9c0 <_dtoa_r+0x630>)
 800b972:	2000      	movs	r0, #0
 800b974:	f7f4 fc90 	bl	8000298 <__aeabi_dsub>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	f7f5 f8b4 	bl	8000aec <__aeabi_dcmplt>
 800b984:	2800      	cmp	r0, #0
 800b986:	f43f af35 	beq.w	800b7f4 <_dtoa_r+0x464>
 800b98a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b98c:	1e6b      	subs	r3, r5, #1
 800b98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b990:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b994:	2b30      	cmp	r3, #48	; 0x30
 800b996:	d0f8      	beq.n	800b98a <_dtoa_r+0x5fa>
 800b998:	9700      	str	r7, [sp, #0]
 800b99a:	e049      	b.n	800ba30 <_dtoa_r+0x6a0>
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <_dtoa_r+0x624>)
 800b99e:	f7f4 fe33 	bl	8000608 <__aeabi_dmul>
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	4689      	mov	r9, r1
 800b9a6:	e7bd      	b.n	800b924 <_dtoa_r+0x594>
 800b9a8:	0800e470 	.word	0x0800e470
 800b9ac:	0800e448 	.word	0x0800e448
 800b9b0:	3ff00000 	.word	0x3ff00000
 800b9b4:	40240000 	.word	0x40240000
 800b9b8:	401c0000 	.word	0x401c0000
 800b9bc:	40140000 	.word	0x40140000
 800b9c0:	3fe00000 	.word	0x3fe00000
 800b9c4:	9d01      	ldr	r5, [sp, #4]
 800b9c6:	4656      	mov	r6, sl
 800b9c8:	465f      	mov	r7, fp
 800b9ca:	4642      	mov	r2, r8
 800b9cc:	464b      	mov	r3, r9
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	4639      	mov	r1, r7
 800b9d2:	f7f4 ff43 	bl	800085c <__aeabi_ddiv>
 800b9d6:	f7f5 f8c7 	bl	8000b68 <__aeabi_d2iz>
 800b9da:	4682      	mov	sl, r0
 800b9dc:	f7f4 fdaa 	bl	8000534 <__aeabi_i2d>
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	f7f4 fe10 	bl	8000608 <__aeabi_dmul>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4630      	mov	r0, r6
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b9f4:	f7f4 fc50 	bl	8000298 <__aeabi_dsub>
 800b9f8:	f805 6b01 	strb.w	r6, [r5], #1
 800b9fc:	9e01      	ldr	r6, [sp, #4]
 800b9fe:	9f03      	ldr	r7, [sp, #12]
 800ba00:	1bae      	subs	r6, r5, r6
 800ba02:	42b7      	cmp	r7, r6
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	d135      	bne.n	800ba76 <_dtoa_r+0x6e6>
 800ba0a:	f7f4 fc47 	bl	800029c <__adddf3>
 800ba0e:	4642      	mov	r2, r8
 800ba10:	464b      	mov	r3, r9
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	f7f5 f887 	bl	8000b28 <__aeabi_dcmpgt>
 800ba1a:	b9d0      	cbnz	r0, 800ba52 <_dtoa_r+0x6c2>
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	464b      	mov	r3, r9
 800ba20:	4630      	mov	r0, r6
 800ba22:	4639      	mov	r1, r7
 800ba24:	f7f5 f858 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba28:	b110      	cbz	r0, 800ba30 <_dtoa_r+0x6a0>
 800ba2a:	f01a 0f01 	tst.w	sl, #1
 800ba2e:	d110      	bne.n	800ba52 <_dtoa_r+0x6c2>
 800ba30:	4620      	mov	r0, r4
 800ba32:	ee18 1a10 	vmov	r1, s16
 800ba36:	f000 fe75 	bl	800c724 <_Bfree>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	9800      	ldr	r0, [sp, #0]
 800ba3e:	702b      	strb	r3, [r5, #0]
 800ba40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba42:	3001      	adds	r0, #1
 800ba44:	6018      	str	r0, [r3, #0]
 800ba46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f43f acf1 	beq.w	800b430 <_dtoa_r+0xa0>
 800ba4e:	601d      	str	r5, [r3, #0]
 800ba50:	e4ee      	b.n	800b430 <_dtoa_r+0xa0>
 800ba52:	9f00      	ldr	r7, [sp, #0]
 800ba54:	462b      	mov	r3, r5
 800ba56:	461d      	mov	r5, r3
 800ba58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba5c:	2a39      	cmp	r2, #57	; 0x39
 800ba5e:	d106      	bne.n	800ba6e <_dtoa_r+0x6de>
 800ba60:	9a01      	ldr	r2, [sp, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d1f7      	bne.n	800ba56 <_dtoa_r+0x6c6>
 800ba66:	9901      	ldr	r1, [sp, #4]
 800ba68:	2230      	movs	r2, #48	; 0x30
 800ba6a:	3701      	adds	r7, #1
 800ba6c:	700a      	strb	r2, [r1, #0]
 800ba6e:	781a      	ldrb	r2, [r3, #0]
 800ba70:	3201      	adds	r2, #1
 800ba72:	701a      	strb	r2, [r3, #0]
 800ba74:	e790      	b.n	800b998 <_dtoa_r+0x608>
 800ba76:	4ba6      	ldr	r3, [pc, #664]	; (800bd10 <_dtoa_r+0x980>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f7f4 fdc5 	bl	8000608 <__aeabi_dmul>
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2300      	movs	r3, #0
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	f7f5 f827 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d09d      	beq.n	800b9ca <_dtoa_r+0x63a>
 800ba8e:	e7cf      	b.n	800ba30 <_dtoa_r+0x6a0>
 800ba90:	9a08      	ldr	r2, [sp, #32]
 800ba92:	2a00      	cmp	r2, #0
 800ba94:	f000 80d7 	beq.w	800bc46 <_dtoa_r+0x8b6>
 800ba98:	9a06      	ldr	r2, [sp, #24]
 800ba9a:	2a01      	cmp	r2, #1
 800ba9c:	f300 80ba 	bgt.w	800bc14 <_dtoa_r+0x884>
 800baa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800baa2:	2a00      	cmp	r2, #0
 800baa4:	f000 80b2 	beq.w	800bc0c <_dtoa_r+0x87c>
 800baa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800baac:	9e07      	ldr	r6, [sp, #28]
 800baae:	9d04      	ldr	r5, [sp, #16]
 800bab0:	9a04      	ldr	r2, [sp, #16]
 800bab2:	441a      	add	r2, r3
 800bab4:	9204      	str	r2, [sp, #16]
 800bab6:	9a05      	ldr	r2, [sp, #20]
 800bab8:	2101      	movs	r1, #1
 800baba:	441a      	add	r2, r3
 800babc:	4620      	mov	r0, r4
 800babe:	9205      	str	r2, [sp, #20]
 800bac0:	f000 ff32 	bl	800c928 <__i2b>
 800bac4:	4607      	mov	r7, r0
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	dd0c      	ble.n	800bae4 <_dtoa_r+0x754>
 800baca:	9b05      	ldr	r3, [sp, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dd09      	ble.n	800bae4 <_dtoa_r+0x754>
 800bad0:	42ab      	cmp	r3, r5
 800bad2:	9a04      	ldr	r2, [sp, #16]
 800bad4:	bfa8      	it	ge
 800bad6:	462b      	movge	r3, r5
 800bad8:	1ad2      	subs	r2, r2, r3
 800bada:	9204      	str	r2, [sp, #16]
 800badc:	9a05      	ldr	r2, [sp, #20]
 800bade:	1aed      	subs	r5, r5, r3
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	9305      	str	r3, [sp, #20]
 800bae4:	9b07      	ldr	r3, [sp, #28]
 800bae6:	b31b      	cbz	r3, 800bb30 <_dtoa_r+0x7a0>
 800bae8:	9b08      	ldr	r3, [sp, #32]
 800baea:	2b00      	cmp	r3, #0
 800baec:	f000 80af 	beq.w	800bc4e <_dtoa_r+0x8be>
 800baf0:	2e00      	cmp	r6, #0
 800baf2:	dd13      	ble.n	800bb1c <_dtoa_r+0x78c>
 800baf4:	4639      	mov	r1, r7
 800baf6:	4632      	mov	r2, r6
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 ffd5 	bl	800caa8 <__pow5mult>
 800bafe:	ee18 2a10 	vmov	r2, s16
 800bb02:	4601      	mov	r1, r0
 800bb04:	4607      	mov	r7, r0
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 ff24 	bl	800c954 <__multiply>
 800bb0c:	ee18 1a10 	vmov	r1, s16
 800bb10:	4680      	mov	r8, r0
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 fe06 	bl	800c724 <_Bfree>
 800bb18:	ee08 8a10 	vmov	s16, r8
 800bb1c:	9b07      	ldr	r3, [sp, #28]
 800bb1e:	1b9a      	subs	r2, r3, r6
 800bb20:	d006      	beq.n	800bb30 <_dtoa_r+0x7a0>
 800bb22:	ee18 1a10 	vmov	r1, s16
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 ffbe 	bl	800caa8 <__pow5mult>
 800bb2c:	ee08 0a10 	vmov	s16, r0
 800bb30:	2101      	movs	r1, #1
 800bb32:	4620      	mov	r0, r4
 800bb34:	f000 fef8 	bl	800c928 <__i2b>
 800bb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	f340 8088 	ble.w	800bc52 <_dtoa_r+0x8c2>
 800bb42:	461a      	mov	r2, r3
 800bb44:	4601      	mov	r1, r0
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 ffae 	bl	800caa8 <__pow5mult>
 800bb4c:	9b06      	ldr	r3, [sp, #24]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	4606      	mov	r6, r0
 800bb52:	f340 8081 	ble.w	800bc58 <_dtoa_r+0x8c8>
 800bb56:	f04f 0800 	mov.w	r8, #0
 800bb5a:	6933      	ldr	r3, [r6, #16]
 800bb5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bb60:	6918      	ldr	r0, [r3, #16]
 800bb62:	f000 fe91 	bl	800c888 <__hi0bits>
 800bb66:	f1c0 0020 	rsb	r0, r0, #32
 800bb6a:	9b05      	ldr	r3, [sp, #20]
 800bb6c:	4418      	add	r0, r3
 800bb6e:	f010 001f 	ands.w	r0, r0, #31
 800bb72:	f000 8092 	beq.w	800bc9a <_dtoa_r+0x90a>
 800bb76:	f1c0 0320 	rsb	r3, r0, #32
 800bb7a:	2b04      	cmp	r3, #4
 800bb7c:	f340 808a 	ble.w	800bc94 <_dtoa_r+0x904>
 800bb80:	f1c0 001c 	rsb	r0, r0, #28
 800bb84:	9b04      	ldr	r3, [sp, #16]
 800bb86:	4403      	add	r3, r0
 800bb88:	9304      	str	r3, [sp, #16]
 800bb8a:	9b05      	ldr	r3, [sp, #20]
 800bb8c:	4403      	add	r3, r0
 800bb8e:	4405      	add	r5, r0
 800bb90:	9305      	str	r3, [sp, #20]
 800bb92:	9b04      	ldr	r3, [sp, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dd07      	ble.n	800bba8 <_dtoa_r+0x818>
 800bb98:	ee18 1a10 	vmov	r1, s16
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 ffdc 	bl	800cb5c <__lshift>
 800bba4:	ee08 0a10 	vmov	s16, r0
 800bba8:	9b05      	ldr	r3, [sp, #20]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	dd05      	ble.n	800bbba <_dtoa_r+0x82a>
 800bbae:	4631      	mov	r1, r6
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 ffd2 	bl	800cb5c <__lshift>
 800bbb8:	4606      	mov	r6, r0
 800bbba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d06e      	beq.n	800bc9e <_dtoa_r+0x90e>
 800bbc0:	ee18 0a10 	vmov	r0, s16
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	f001 f839 	bl	800cc3c <__mcmp>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	da67      	bge.n	800bc9e <_dtoa_r+0x90e>
 800bbce:	9b00      	ldr	r3, [sp, #0]
 800bbd0:	3b01      	subs	r3, #1
 800bbd2:	ee18 1a10 	vmov	r1, s16
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	220a      	movs	r2, #10
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 fdc3 	bl	800c768 <__multadd>
 800bbe2:	9b08      	ldr	r3, [sp, #32]
 800bbe4:	ee08 0a10 	vmov	s16, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 81b1 	beq.w	800bf50 <_dtoa_r+0xbc0>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	220a      	movs	r2, #10
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 fdb7 	bl	800c768 <__multadd>
 800bbfa:	9b02      	ldr	r3, [sp, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	4607      	mov	r7, r0
 800bc00:	f300 808e 	bgt.w	800bd20 <_dtoa_r+0x990>
 800bc04:	9b06      	ldr	r3, [sp, #24]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	dc51      	bgt.n	800bcae <_dtoa_r+0x91e>
 800bc0a:	e089      	b.n	800bd20 <_dtoa_r+0x990>
 800bc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc12:	e74b      	b.n	800baac <_dtoa_r+0x71c>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	1e5e      	subs	r6, r3, #1
 800bc18:	9b07      	ldr	r3, [sp, #28]
 800bc1a:	42b3      	cmp	r3, r6
 800bc1c:	bfbf      	itttt	lt
 800bc1e:	9b07      	ldrlt	r3, [sp, #28]
 800bc20:	9607      	strlt	r6, [sp, #28]
 800bc22:	1af2      	sublt	r2, r6, r3
 800bc24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bc26:	bfb6      	itet	lt
 800bc28:	189b      	addlt	r3, r3, r2
 800bc2a:	1b9e      	subge	r6, r3, r6
 800bc2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	bfb8      	it	lt
 800bc32:	2600      	movlt	r6, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	bfb7      	itett	lt
 800bc38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bc3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bc40:	1a9d      	sublt	r5, r3, r2
 800bc42:	2300      	movlt	r3, #0
 800bc44:	e734      	b.n	800bab0 <_dtoa_r+0x720>
 800bc46:	9e07      	ldr	r6, [sp, #28]
 800bc48:	9d04      	ldr	r5, [sp, #16]
 800bc4a:	9f08      	ldr	r7, [sp, #32]
 800bc4c:	e73b      	b.n	800bac6 <_dtoa_r+0x736>
 800bc4e:	9a07      	ldr	r2, [sp, #28]
 800bc50:	e767      	b.n	800bb22 <_dtoa_r+0x792>
 800bc52:	9b06      	ldr	r3, [sp, #24]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	dc18      	bgt.n	800bc8a <_dtoa_r+0x8fa>
 800bc58:	f1ba 0f00 	cmp.w	sl, #0
 800bc5c:	d115      	bne.n	800bc8a <_dtoa_r+0x8fa>
 800bc5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc62:	b993      	cbnz	r3, 800bc8a <_dtoa_r+0x8fa>
 800bc64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc68:	0d1b      	lsrs	r3, r3, #20
 800bc6a:	051b      	lsls	r3, r3, #20
 800bc6c:	b183      	cbz	r3, 800bc90 <_dtoa_r+0x900>
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	3301      	adds	r3, #1
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	9b05      	ldr	r3, [sp, #20]
 800bc76:	3301      	adds	r3, #1
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	f04f 0801 	mov.w	r8, #1
 800bc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f47f af6a 	bne.w	800bb5a <_dtoa_r+0x7ca>
 800bc86:	2001      	movs	r0, #1
 800bc88:	e76f      	b.n	800bb6a <_dtoa_r+0x7da>
 800bc8a:	f04f 0800 	mov.w	r8, #0
 800bc8e:	e7f6      	b.n	800bc7e <_dtoa_r+0x8ee>
 800bc90:	4698      	mov	r8, r3
 800bc92:	e7f4      	b.n	800bc7e <_dtoa_r+0x8ee>
 800bc94:	f43f af7d 	beq.w	800bb92 <_dtoa_r+0x802>
 800bc98:	4618      	mov	r0, r3
 800bc9a:	301c      	adds	r0, #28
 800bc9c:	e772      	b.n	800bb84 <_dtoa_r+0x7f4>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dc37      	bgt.n	800bd14 <_dtoa_r+0x984>
 800bca4:	9b06      	ldr	r3, [sp, #24]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	dd34      	ble.n	800bd14 <_dtoa_r+0x984>
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	9302      	str	r3, [sp, #8]
 800bcae:	9b02      	ldr	r3, [sp, #8]
 800bcb0:	b96b      	cbnz	r3, 800bcce <_dtoa_r+0x93e>
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	2205      	movs	r2, #5
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 fd56 	bl	800c768 <__multadd>
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	ee18 0a10 	vmov	r0, s16
 800bcc4:	f000 ffba 	bl	800cc3c <__mcmp>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	f73f adbb 	bgt.w	800b844 <_dtoa_r+0x4b4>
 800bcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd0:	9d01      	ldr	r5, [sp, #4]
 800bcd2:	43db      	mvns	r3, r3
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	f04f 0800 	mov.w	r8, #0
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fd21 	bl	800c724 <_Bfree>
 800bce2:	2f00      	cmp	r7, #0
 800bce4:	f43f aea4 	beq.w	800ba30 <_dtoa_r+0x6a0>
 800bce8:	f1b8 0f00 	cmp.w	r8, #0
 800bcec:	d005      	beq.n	800bcfa <_dtoa_r+0x96a>
 800bcee:	45b8      	cmp	r8, r7
 800bcf0:	d003      	beq.n	800bcfa <_dtoa_r+0x96a>
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f000 fd15 	bl	800c724 <_Bfree>
 800bcfa:	4639      	mov	r1, r7
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f000 fd11 	bl	800c724 <_Bfree>
 800bd02:	e695      	b.n	800ba30 <_dtoa_r+0x6a0>
 800bd04:	2600      	movs	r6, #0
 800bd06:	4637      	mov	r7, r6
 800bd08:	e7e1      	b.n	800bcce <_dtoa_r+0x93e>
 800bd0a:	9700      	str	r7, [sp, #0]
 800bd0c:	4637      	mov	r7, r6
 800bd0e:	e599      	b.n	800b844 <_dtoa_r+0x4b4>
 800bd10:	40240000 	.word	0x40240000
 800bd14:	9b08      	ldr	r3, [sp, #32]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 80ca 	beq.w	800beb0 <_dtoa_r+0xb20>
 800bd1c:	9b03      	ldr	r3, [sp, #12]
 800bd1e:	9302      	str	r3, [sp, #8]
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	dd05      	ble.n	800bd30 <_dtoa_r+0x9a0>
 800bd24:	4639      	mov	r1, r7
 800bd26:	462a      	mov	r2, r5
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f000 ff17 	bl	800cb5c <__lshift>
 800bd2e:	4607      	mov	r7, r0
 800bd30:	f1b8 0f00 	cmp.w	r8, #0
 800bd34:	d05b      	beq.n	800bdee <_dtoa_r+0xa5e>
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fcb3 	bl	800c6a4 <_Balloc>
 800bd3e:	4605      	mov	r5, r0
 800bd40:	b928      	cbnz	r0, 800bd4e <_dtoa_r+0x9be>
 800bd42:	4b87      	ldr	r3, [pc, #540]	; (800bf60 <_dtoa_r+0xbd0>)
 800bd44:	4602      	mov	r2, r0
 800bd46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bd4a:	f7ff bb3b 	b.w	800b3c4 <_dtoa_r+0x34>
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	3202      	adds	r2, #2
 800bd52:	0092      	lsls	r2, r2, #2
 800bd54:	f107 010c 	add.w	r1, r7, #12
 800bd58:	300c      	adds	r0, #12
 800bd5a:	f000 fc95 	bl	800c688 <memcpy>
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4629      	mov	r1, r5
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 fefa 	bl	800cb5c <__lshift>
 800bd68:	9b01      	ldr	r3, [sp, #4]
 800bd6a:	f103 0901 	add.w	r9, r3, #1
 800bd6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bd72:	4413      	add	r3, r2
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	f00a 0301 	and.w	r3, sl, #1
 800bd7a:	46b8      	mov	r8, r7
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	4607      	mov	r7, r0
 800bd80:	4631      	mov	r1, r6
 800bd82:	ee18 0a10 	vmov	r0, s16
 800bd86:	f7ff fa77 	bl	800b278 <quorem>
 800bd8a:	4641      	mov	r1, r8
 800bd8c:	9002      	str	r0, [sp, #8]
 800bd8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd92:	ee18 0a10 	vmov	r0, s16
 800bd96:	f000 ff51 	bl	800cc3c <__mcmp>
 800bd9a:	463a      	mov	r2, r7
 800bd9c:	9003      	str	r0, [sp, #12]
 800bd9e:	4631      	mov	r1, r6
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 ff67 	bl	800cc74 <__mdiff>
 800bda6:	68c2      	ldr	r2, [r0, #12]
 800bda8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bdac:	4605      	mov	r5, r0
 800bdae:	bb02      	cbnz	r2, 800bdf2 <_dtoa_r+0xa62>
 800bdb0:	4601      	mov	r1, r0
 800bdb2:	ee18 0a10 	vmov	r0, s16
 800bdb6:	f000 ff41 	bl	800cc3c <__mcmp>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	9207      	str	r2, [sp, #28]
 800bdc2:	f000 fcaf 	bl	800c724 <_Bfree>
 800bdc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bdca:	ea43 0102 	orr.w	r1, r3, r2
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	430b      	orrs	r3, r1
 800bdd2:	464d      	mov	r5, r9
 800bdd4:	d10f      	bne.n	800bdf6 <_dtoa_r+0xa66>
 800bdd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdda:	d02a      	beq.n	800be32 <_dtoa_r+0xaa2>
 800bddc:	9b03      	ldr	r3, [sp, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	dd02      	ble.n	800bde8 <_dtoa_r+0xa58>
 800bde2:	9b02      	ldr	r3, [sp, #8]
 800bde4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bde8:	f88b a000 	strb.w	sl, [fp]
 800bdec:	e775      	b.n	800bcda <_dtoa_r+0x94a>
 800bdee:	4638      	mov	r0, r7
 800bdf0:	e7ba      	b.n	800bd68 <_dtoa_r+0x9d8>
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	e7e2      	b.n	800bdbc <_dtoa_r+0xa2c>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	db04      	blt.n	800be06 <_dtoa_r+0xa76>
 800bdfc:	9906      	ldr	r1, [sp, #24]
 800bdfe:	430b      	orrs	r3, r1
 800be00:	9904      	ldr	r1, [sp, #16]
 800be02:	430b      	orrs	r3, r1
 800be04:	d122      	bne.n	800be4c <_dtoa_r+0xabc>
 800be06:	2a00      	cmp	r2, #0
 800be08:	ddee      	ble.n	800bde8 <_dtoa_r+0xa58>
 800be0a:	ee18 1a10 	vmov	r1, s16
 800be0e:	2201      	movs	r2, #1
 800be10:	4620      	mov	r0, r4
 800be12:	f000 fea3 	bl	800cb5c <__lshift>
 800be16:	4631      	mov	r1, r6
 800be18:	ee08 0a10 	vmov	s16, r0
 800be1c:	f000 ff0e 	bl	800cc3c <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	dc03      	bgt.n	800be2c <_dtoa_r+0xa9c>
 800be24:	d1e0      	bne.n	800bde8 <_dtoa_r+0xa58>
 800be26:	f01a 0f01 	tst.w	sl, #1
 800be2a:	d0dd      	beq.n	800bde8 <_dtoa_r+0xa58>
 800be2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be30:	d1d7      	bne.n	800bde2 <_dtoa_r+0xa52>
 800be32:	2339      	movs	r3, #57	; 0x39
 800be34:	f88b 3000 	strb.w	r3, [fp]
 800be38:	462b      	mov	r3, r5
 800be3a:	461d      	mov	r5, r3
 800be3c:	3b01      	subs	r3, #1
 800be3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be42:	2a39      	cmp	r2, #57	; 0x39
 800be44:	d071      	beq.n	800bf2a <_dtoa_r+0xb9a>
 800be46:	3201      	adds	r2, #1
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	e746      	b.n	800bcda <_dtoa_r+0x94a>
 800be4c:	2a00      	cmp	r2, #0
 800be4e:	dd07      	ble.n	800be60 <_dtoa_r+0xad0>
 800be50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be54:	d0ed      	beq.n	800be32 <_dtoa_r+0xaa2>
 800be56:	f10a 0301 	add.w	r3, sl, #1
 800be5a:	f88b 3000 	strb.w	r3, [fp]
 800be5e:	e73c      	b.n	800bcda <_dtoa_r+0x94a>
 800be60:	9b05      	ldr	r3, [sp, #20]
 800be62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800be66:	4599      	cmp	r9, r3
 800be68:	d047      	beq.n	800befa <_dtoa_r+0xb6a>
 800be6a:	ee18 1a10 	vmov	r1, s16
 800be6e:	2300      	movs	r3, #0
 800be70:	220a      	movs	r2, #10
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fc78 	bl	800c768 <__multadd>
 800be78:	45b8      	cmp	r8, r7
 800be7a:	ee08 0a10 	vmov	s16, r0
 800be7e:	f04f 0300 	mov.w	r3, #0
 800be82:	f04f 020a 	mov.w	r2, #10
 800be86:	4641      	mov	r1, r8
 800be88:	4620      	mov	r0, r4
 800be8a:	d106      	bne.n	800be9a <_dtoa_r+0xb0a>
 800be8c:	f000 fc6c 	bl	800c768 <__multadd>
 800be90:	4680      	mov	r8, r0
 800be92:	4607      	mov	r7, r0
 800be94:	f109 0901 	add.w	r9, r9, #1
 800be98:	e772      	b.n	800bd80 <_dtoa_r+0x9f0>
 800be9a:	f000 fc65 	bl	800c768 <__multadd>
 800be9e:	4639      	mov	r1, r7
 800bea0:	4680      	mov	r8, r0
 800bea2:	2300      	movs	r3, #0
 800bea4:	220a      	movs	r2, #10
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 fc5e 	bl	800c768 <__multadd>
 800beac:	4607      	mov	r7, r0
 800beae:	e7f1      	b.n	800be94 <_dtoa_r+0xb04>
 800beb0:	9b03      	ldr	r3, [sp, #12]
 800beb2:	9302      	str	r3, [sp, #8]
 800beb4:	9d01      	ldr	r5, [sp, #4]
 800beb6:	ee18 0a10 	vmov	r0, s16
 800beba:	4631      	mov	r1, r6
 800bebc:	f7ff f9dc 	bl	800b278 <quorem>
 800bec0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bec4:	9b01      	ldr	r3, [sp, #4]
 800bec6:	f805 ab01 	strb.w	sl, [r5], #1
 800beca:	1aea      	subs	r2, r5, r3
 800becc:	9b02      	ldr	r3, [sp, #8]
 800bece:	4293      	cmp	r3, r2
 800bed0:	dd09      	ble.n	800bee6 <_dtoa_r+0xb56>
 800bed2:	ee18 1a10 	vmov	r1, s16
 800bed6:	2300      	movs	r3, #0
 800bed8:	220a      	movs	r2, #10
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fc44 	bl	800c768 <__multadd>
 800bee0:	ee08 0a10 	vmov	s16, r0
 800bee4:	e7e7      	b.n	800beb6 <_dtoa_r+0xb26>
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	bfc8      	it	gt
 800beec:	461d      	movgt	r5, r3
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	bfd8      	it	le
 800bef2:	2501      	movle	r5, #1
 800bef4:	441d      	add	r5, r3
 800bef6:	f04f 0800 	mov.w	r8, #0
 800befa:	ee18 1a10 	vmov	r1, s16
 800befe:	2201      	movs	r2, #1
 800bf00:	4620      	mov	r0, r4
 800bf02:	f000 fe2b 	bl	800cb5c <__lshift>
 800bf06:	4631      	mov	r1, r6
 800bf08:	ee08 0a10 	vmov	s16, r0
 800bf0c:	f000 fe96 	bl	800cc3c <__mcmp>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	dc91      	bgt.n	800be38 <_dtoa_r+0xaa8>
 800bf14:	d102      	bne.n	800bf1c <_dtoa_r+0xb8c>
 800bf16:	f01a 0f01 	tst.w	sl, #1
 800bf1a:	d18d      	bne.n	800be38 <_dtoa_r+0xaa8>
 800bf1c:	462b      	mov	r3, r5
 800bf1e:	461d      	mov	r5, r3
 800bf20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf24:	2a30      	cmp	r2, #48	; 0x30
 800bf26:	d0fa      	beq.n	800bf1e <_dtoa_r+0xb8e>
 800bf28:	e6d7      	b.n	800bcda <_dtoa_r+0x94a>
 800bf2a:	9a01      	ldr	r2, [sp, #4]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d184      	bne.n	800be3a <_dtoa_r+0xaaa>
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	3301      	adds	r3, #1
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	2331      	movs	r3, #49	; 0x31
 800bf38:	7013      	strb	r3, [r2, #0]
 800bf3a:	e6ce      	b.n	800bcda <_dtoa_r+0x94a>
 800bf3c:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <_dtoa_r+0xbd4>)
 800bf3e:	f7ff ba95 	b.w	800b46c <_dtoa_r+0xdc>
 800bf42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f47f aa6e 	bne.w	800b426 <_dtoa_r+0x96>
 800bf4a:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <_dtoa_r+0xbd8>)
 800bf4c:	f7ff ba8e 	b.w	800b46c <_dtoa_r+0xdc>
 800bf50:	9b02      	ldr	r3, [sp, #8]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	dcae      	bgt.n	800beb4 <_dtoa_r+0xb24>
 800bf56:	9b06      	ldr	r3, [sp, #24]
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	f73f aea8 	bgt.w	800bcae <_dtoa_r+0x91e>
 800bf5e:	e7a9      	b.n	800beb4 <_dtoa_r+0xb24>
 800bf60:	0800e360 	.word	0x0800e360
 800bf64:	0800e160 	.word	0x0800e160
 800bf68:	0800e2e1 	.word	0x0800e2e1

0800bf6c <rshift>:
 800bf6c:	6903      	ldr	r3, [r0, #16]
 800bf6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf7a:	f100 0414 	add.w	r4, r0, #20
 800bf7e:	dd45      	ble.n	800c00c <rshift+0xa0>
 800bf80:	f011 011f 	ands.w	r1, r1, #31
 800bf84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf8c:	d10c      	bne.n	800bfa8 <rshift+0x3c>
 800bf8e:	f100 0710 	add.w	r7, r0, #16
 800bf92:	4629      	mov	r1, r5
 800bf94:	42b1      	cmp	r1, r6
 800bf96:	d334      	bcc.n	800c002 <rshift+0x96>
 800bf98:	1a9b      	subs	r3, r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	1eea      	subs	r2, r5, #3
 800bf9e:	4296      	cmp	r6, r2
 800bfa0:	bf38      	it	cc
 800bfa2:	2300      	movcc	r3, #0
 800bfa4:	4423      	add	r3, r4
 800bfa6:	e015      	b.n	800bfd4 <rshift+0x68>
 800bfa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bfac:	f1c1 0820 	rsb	r8, r1, #32
 800bfb0:	40cf      	lsrs	r7, r1
 800bfb2:	f105 0e04 	add.w	lr, r5, #4
 800bfb6:	46a1      	mov	r9, r4
 800bfb8:	4576      	cmp	r6, lr
 800bfba:	46f4      	mov	ip, lr
 800bfbc:	d815      	bhi.n	800bfea <rshift+0x7e>
 800bfbe:	1a9a      	subs	r2, r3, r2
 800bfc0:	0092      	lsls	r2, r2, #2
 800bfc2:	3a04      	subs	r2, #4
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	42ae      	cmp	r6, r5
 800bfc8:	bf38      	it	cc
 800bfca:	2200      	movcc	r2, #0
 800bfcc:	18a3      	adds	r3, r4, r2
 800bfce:	50a7      	str	r7, [r4, r2]
 800bfd0:	b107      	cbz	r7, 800bfd4 <rshift+0x68>
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	1b1a      	subs	r2, r3, r4
 800bfd6:	42a3      	cmp	r3, r4
 800bfd8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bfdc:	bf08      	it	eq
 800bfde:	2300      	moveq	r3, #0
 800bfe0:	6102      	str	r2, [r0, #16]
 800bfe2:	bf08      	it	eq
 800bfe4:	6143      	streq	r3, [r0, #20]
 800bfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfea:	f8dc c000 	ldr.w	ip, [ip]
 800bfee:	fa0c fc08 	lsl.w	ip, ip, r8
 800bff2:	ea4c 0707 	orr.w	r7, ip, r7
 800bff6:	f849 7b04 	str.w	r7, [r9], #4
 800bffa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bffe:	40cf      	lsrs	r7, r1
 800c000:	e7da      	b.n	800bfb8 <rshift+0x4c>
 800c002:	f851 cb04 	ldr.w	ip, [r1], #4
 800c006:	f847 cf04 	str.w	ip, [r7, #4]!
 800c00a:	e7c3      	b.n	800bf94 <rshift+0x28>
 800c00c:	4623      	mov	r3, r4
 800c00e:	e7e1      	b.n	800bfd4 <rshift+0x68>

0800c010 <__hexdig_fun>:
 800c010:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c014:	2b09      	cmp	r3, #9
 800c016:	d802      	bhi.n	800c01e <__hexdig_fun+0xe>
 800c018:	3820      	subs	r0, #32
 800c01a:	b2c0      	uxtb	r0, r0
 800c01c:	4770      	bx	lr
 800c01e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c022:	2b05      	cmp	r3, #5
 800c024:	d801      	bhi.n	800c02a <__hexdig_fun+0x1a>
 800c026:	3847      	subs	r0, #71	; 0x47
 800c028:	e7f7      	b.n	800c01a <__hexdig_fun+0xa>
 800c02a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c02e:	2b05      	cmp	r3, #5
 800c030:	d801      	bhi.n	800c036 <__hexdig_fun+0x26>
 800c032:	3827      	subs	r0, #39	; 0x27
 800c034:	e7f1      	b.n	800c01a <__hexdig_fun+0xa>
 800c036:	2000      	movs	r0, #0
 800c038:	4770      	bx	lr
	...

0800c03c <__gethex>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	ed2d 8b02 	vpush	{d8}
 800c044:	b089      	sub	sp, #36	; 0x24
 800c046:	ee08 0a10 	vmov	s16, r0
 800c04a:	9304      	str	r3, [sp, #16]
 800c04c:	4bb4      	ldr	r3, [pc, #720]	; (800c320 <__gethex+0x2e4>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	4618      	mov	r0, r3
 800c054:	468b      	mov	fp, r1
 800c056:	4690      	mov	r8, r2
 800c058:	f7f4 f8c2 	bl	80001e0 <strlen>
 800c05c:	9b01      	ldr	r3, [sp, #4]
 800c05e:	f8db 2000 	ldr.w	r2, [fp]
 800c062:	4403      	add	r3, r0
 800c064:	4682      	mov	sl, r0
 800c066:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c06a:	9305      	str	r3, [sp, #20]
 800c06c:	1c93      	adds	r3, r2, #2
 800c06e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c072:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c076:	32fe      	adds	r2, #254	; 0xfe
 800c078:	18d1      	adds	r1, r2, r3
 800c07a:	461f      	mov	r7, r3
 800c07c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c080:	9100      	str	r1, [sp, #0]
 800c082:	2830      	cmp	r0, #48	; 0x30
 800c084:	d0f8      	beq.n	800c078 <__gethex+0x3c>
 800c086:	f7ff ffc3 	bl	800c010 <__hexdig_fun>
 800c08a:	4604      	mov	r4, r0
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d13a      	bne.n	800c106 <__gethex+0xca>
 800c090:	9901      	ldr	r1, [sp, #4]
 800c092:	4652      	mov	r2, sl
 800c094:	4638      	mov	r0, r7
 800c096:	f001 fa5f 	bl	800d558 <strncmp>
 800c09a:	4605      	mov	r5, r0
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d168      	bne.n	800c172 <__gethex+0x136>
 800c0a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c0a4:	eb07 060a 	add.w	r6, r7, sl
 800c0a8:	f7ff ffb2 	bl	800c010 <__hexdig_fun>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d062      	beq.n	800c176 <__gethex+0x13a>
 800c0b0:	4633      	mov	r3, r6
 800c0b2:	7818      	ldrb	r0, [r3, #0]
 800c0b4:	2830      	cmp	r0, #48	; 0x30
 800c0b6:	461f      	mov	r7, r3
 800c0b8:	f103 0301 	add.w	r3, r3, #1
 800c0bc:	d0f9      	beq.n	800c0b2 <__gethex+0x76>
 800c0be:	f7ff ffa7 	bl	800c010 <__hexdig_fun>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	fab0 f480 	clz	r4, r0
 800c0c8:	0964      	lsrs	r4, r4, #5
 800c0ca:	4635      	mov	r5, r6
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	463a      	mov	r2, r7
 800c0d0:	4616      	mov	r6, r2
 800c0d2:	3201      	adds	r2, #1
 800c0d4:	7830      	ldrb	r0, [r6, #0]
 800c0d6:	f7ff ff9b 	bl	800c010 <__hexdig_fun>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d1f8      	bne.n	800c0d0 <__gethex+0x94>
 800c0de:	9901      	ldr	r1, [sp, #4]
 800c0e0:	4652      	mov	r2, sl
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f001 fa38 	bl	800d558 <strncmp>
 800c0e8:	b980      	cbnz	r0, 800c10c <__gethex+0xd0>
 800c0ea:	b94d      	cbnz	r5, 800c100 <__gethex+0xc4>
 800c0ec:	eb06 050a 	add.w	r5, r6, sl
 800c0f0:	462a      	mov	r2, r5
 800c0f2:	4616      	mov	r6, r2
 800c0f4:	3201      	adds	r2, #1
 800c0f6:	7830      	ldrb	r0, [r6, #0]
 800c0f8:	f7ff ff8a 	bl	800c010 <__hexdig_fun>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d1f8      	bne.n	800c0f2 <__gethex+0xb6>
 800c100:	1bad      	subs	r5, r5, r6
 800c102:	00ad      	lsls	r5, r5, #2
 800c104:	e004      	b.n	800c110 <__gethex+0xd4>
 800c106:	2400      	movs	r4, #0
 800c108:	4625      	mov	r5, r4
 800c10a:	e7e0      	b.n	800c0ce <__gethex+0x92>
 800c10c:	2d00      	cmp	r5, #0
 800c10e:	d1f7      	bne.n	800c100 <__gethex+0xc4>
 800c110:	7833      	ldrb	r3, [r6, #0]
 800c112:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c116:	2b50      	cmp	r3, #80	; 0x50
 800c118:	d13b      	bne.n	800c192 <__gethex+0x156>
 800c11a:	7873      	ldrb	r3, [r6, #1]
 800c11c:	2b2b      	cmp	r3, #43	; 0x2b
 800c11e:	d02c      	beq.n	800c17a <__gethex+0x13e>
 800c120:	2b2d      	cmp	r3, #45	; 0x2d
 800c122:	d02e      	beq.n	800c182 <__gethex+0x146>
 800c124:	1c71      	adds	r1, r6, #1
 800c126:	f04f 0900 	mov.w	r9, #0
 800c12a:	7808      	ldrb	r0, [r1, #0]
 800c12c:	f7ff ff70 	bl	800c010 <__hexdig_fun>
 800c130:	1e43      	subs	r3, r0, #1
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b18      	cmp	r3, #24
 800c136:	d82c      	bhi.n	800c192 <__gethex+0x156>
 800c138:	f1a0 0210 	sub.w	r2, r0, #16
 800c13c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c140:	f7ff ff66 	bl	800c010 <__hexdig_fun>
 800c144:	1e43      	subs	r3, r0, #1
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b18      	cmp	r3, #24
 800c14a:	d91d      	bls.n	800c188 <__gethex+0x14c>
 800c14c:	f1b9 0f00 	cmp.w	r9, #0
 800c150:	d000      	beq.n	800c154 <__gethex+0x118>
 800c152:	4252      	negs	r2, r2
 800c154:	4415      	add	r5, r2
 800c156:	f8cb 1000 	str.w	r1, [fp]
 800c15a:	b1e4      	cbz	r4, 800c196 <__gethex+0x15a>
 800c15c:	9b00      	ldr	r3, [sp, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bf14      	ite	ne
 800c162:	2700      	movne	r7, #0
 800c164:	2706      	moveq	r7, #6
 800c166:	4638      	mov	r0, r7
 800c168:	b009      	add	sp, #36	; 0x24
 800c16a:	ecbd 8b02 	vpop	{d8}
 800c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c172:	463e      	mov	r6, r7
 800c174:	4625      	mov	r5, r4
 800c176:	2401      	movs	r4, #1
 800c178:	e7ca      	b.n	800c110 <__gethex+0xd4>
 800c17a:	f04f 0900 	mov.w	r9, #0
 800c17e:	1cb1      	adds	r1, r6, #2
 800c180:	e7d3      	b.n	800c12a <__gethex+0xee>
 800c182:	f04f 0901 	mov.w	r9, #1
 800c186:	e7fa      	b.n	800c17e <__gethex+0x142>
 800c188:	230a      	movs	r3, #10
 800c18a:	fb03 0202 	mla	r2, r3, r2, r0
 800c18e:	3a10      	subs	r2, #16
 800c190:	e7d4      	b.n	800c13c <__gethex+0x100>
 800c192:	4631      	mov	r1, r6
 800c194:	e7df      	b.n	800c156 <__gethex+0x11a>
 800c196:	1bf3      	subs	r3, r6, r7
 800c198:	3b01      	subs	r3, #1
 800c19a:	4621      	mov	r1, r4
 800c19c:	2b07      	cmp	r3, #7
 800c19e:	dc0b      	bgt.n	800c1b8 <__gethex+0x17c>
 800c1a0:	ee18 0a10 	vmov	r0, s16
 800c1a4:	f000 fa7e 	bl	800c6a4 <_Balloc>
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	b940      	cbnz	r0, 800c1be <__gethex+0x182>
 800c1ac:	4b5d      	ldr	r3, [pc, #372]	; (800c324 <__gethex+0x2e8>)
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	21de      	movs	r1, #222	; 0xde
 800c1b2:	485d      	ldr	r0, [pc, #372]	; (800c328 <__gethex+0x2ec>)
 800c1b4:	f001 f9f2 	bl	800d59c <__assert_func>
 800c1b8:	3101      	adds	r1, #1
 800c1ba:	105b      	asrs	r3, r3, #1
 800c1bc:	e7ee      	b.n	800c19c <__gethex+0x160>
 800c1be:	f100 0914 	add.w	r9, r0, #20
 800c1c2:	f04f 0b00 	mov.w	fp, #0
 800c1c6:	f1ca 0301 	rsb	r3, sl, #1
 800c1ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1ce:	f8cd b000 	str.w	fp, [sp]
 800c1d2:	9306      	str	r3, [sp, #24]
 800c1d4:	42b7      	cmp	r7, r6
 800c1d6:	d340      	bcc.n	800c25a <__gethex+0x21e>
 800c1d8:	9802      	ldr	r0, [sp, #8]
 800c1da:	9b00      	ldr	r3, [sp, #0]
 800c1dc:	f840 3b04 	str.w	r3, [r0], #4
 800c1e0:	eba0 0009 	sub.w	r0, r0, r9
 800c1e4:	1080      	asrs	r0, r0, #2
 800c1e6:	0146      	lsls	r6, r0, #5
 800c1e8:	6120      	str	r0, [r4, #16]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fb4c 	bl	800c888 <__hi0bits>
 800c1f0:	1a30      	subs	r0, r6, r0
 800c1f2:	f8d8 6000 	ldr.w	r6, [r8]
 800c1f6:	42b0      	cmp	r0, r6
 800c1f8:	dd63      	ble.n	800c2c2 <__gethex+0x286>
 800c1fa:	1b87      	subs	r7, r0, r6
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	4620      	mov	r0, r4
 800c200:	f000 fef0 	bl	800cfe4 <__any_on>
 800c204:	4682      	mov	sl, r0
 800c206:	b1a8      	cbz	r0, 800c234 <__gethex+0x1f8>
 800c208:	1e7b      	subs	r3, r7, #1
 800c20a:	1159      	asrs	r1, r3, #5
 800c20c:	f003 021f 	and.w	r2, r3, #31
 800c210:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c214:	f04f 0a01 	mov.w	sl, #1
 800c218:	fa0a f202 	lsl.w	r2, sl, r2
 800c21c:	420a      	tst	r2, r1
 800c21e:	d009      	beq.n	800c234 <__gethex+0x1f8>
 800c220:	4553      	cmp	r3, sl
 800c222:	dd05      	ble.n	800c230 <__gethex+0x1f4>
 800c224:	1eb9      	subs	r1, r7, #2
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fedc 	bl	800cfe4 <__any_on>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d145      	bne.n	800c2bc <__gethex+0x280>
 800c230:	f04f 0a02 	mov.w	sl, #2
 800c234:	4639      	mov	r1, r7
 800c236:	4620      	mov	r0, r4
 800c238:	f7ff fe98 	bl	800bf6c <rshift>
 800c23c:	443d      	add	r5, r7
 800c23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c242:	42ab      	cmp	r3, r5
 800c244:	da4c      	bge.n	800c2e0 <__gethex+0x2a4>
 800c246:	ee18 0a10 	vmov	r0, s16
 800c24a:	4621      	mov	r1, r4
 800c24c:	f000 fa6a 	bl	800c724 <_Bfree>
 800c250:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c252:	2300      	movs	r3, #0
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	27a3      	movs	r7, #163	; 0xa3
 800c258:	e785      	b.n	800c166 <__gethex+0x12a>
 800c25a:	1e73      	subs	r3, r6, #1
 800c25c:	9a05      	ldr	r2, [sp, #20]
 800c25e:	9303      	str	r3, [sp, #12]
 800c260:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c264:	4293      	cmp	r3, r2
 800c266:	d019      	beq.n	800c29c <__gethex+0x260>
 800c268:	f1bb 0f20 	cmp.w	fp, #32
 800c26c:	d107      	bne.n	800c27e <__gethex+0x242>
 800c26e:	9b02      	ldr	r3, [sp, #8]
 800c270:	9a00      	ldr	r2, [sp, #0]
 800c272:	f843 2b04 	str.w	r2, [r3], #4
 800c276:	9302      	str	r3, [sp, #8]
 800c278:	2300      	movs	r3, #0
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	469b      	mov	fp, r3
 800c27e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c282:	f7ff fec5 	bl	800c010 <__hexdig_fun>
 800c286:	9b00      	ldr	r3, [sp, #0]
 800c288:	f000 000f 	and.w	r0, r0, #15
 800c28c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c290:	4303      	orrs	r3, r0
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	f10b 0b04 	add.w	fp, fp, #4
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	e00d      	b.n	800c2b8 <__gethex+0x27c>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	9a06      	ldr	r2, [sp, #24]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	42bb      	cmp	r3, r7
 800c2a4:	d3e0      	bcc.n	800c268 <__gethex+0x22c>
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	9901      	ldr	r1, [sp, #4]
 800c2aa:	9307      	str	r3, [sp, #28]
 800c2ac:	4652      	mov	r2, sl
 800c2ae:	f001 f953 	bl	800d558 <strncmp>
 800c2b2:	9b07      	ldr	r3, [sp, #28]
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d1d7      	bne.n	800c268 <__gethex+0x22c>
 800c2b8:	461e      	mov	r6, r3
 800c2ba:	e78b      	b.n	800c1d4 <__gethex+0x198>
 800c2bc:	f04f 0a03 	mov.w	sl, #3
 800c2c0:	e7b8      	b.n	800c234 <__gethex+0x1f8>
 800c2c2:	da0a      	bge.n	800c2da <__gethex+0x29e>
 800c2c4:	1a37      	subs	r7, r6, r0
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	ee18 0a10 	vmov	r0, s16
 800c2cc:	463a      	mov	r2, r7
 800c2ce:	f000 fc45 	bl	800cb5c <__lshift>
 800c2d2:	1bed      	subs	r5, r5, r7
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	f100 0914 	add.w	r9, r0, #20
 800c2da:	f04f 0a00 	mov.w	sl, #0
 800c2de:	e7ae      	b.n	800c23e <__gethex+0x202>
 800c2e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c2e4:	42a8      	cmp	r0, r5
 800c2e6:	dd72      	ble.n	800c3ce <__gethex+0x392>
 800c2e8:	1b45      	subs	r5, r0, r5
 800c2ea:	42ae      	cmp	r6, r5
 800c2ec:	dc36      	bgt.n	800c35c <__gethex+0x320>
 800c2ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d02a      	beq.n	800c34c <__gethex+0x310>
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	d02c      	beq.n	800c354 <__gethex+0x318>
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d11c      	bne.n	800c338 <__gethex+0x2fc>
 800c2fe:	42ae      	cmp	r6, r5
 800c300:	d11a      	bne.n	800c338 <__gethex+0x2fc>
 800c302:	2e01      	cmp	r6, #1
 800c304:	d112      	bne.n	800c32c <__gethex+0x2f0>
 800c306:	9a04      	ldr	r2, [sp, #16]
 800c308:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c30c:	6013      	str	r3, [r2, #0]
 800c30e:	2301      	movs	r3, #1
 800c310:	6123      	str	r3, [r4, #16]
 800c312:	f8c9 3000 	str.w	r3, [r9]
 800c316:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c318:	2762      	movs	r7, #98	; 0x62
 800c31a:	601c      	str	r4, [r3, #0]
 800c31c:	e723      	b.n	800c166 <__gethex+0x12a>
 800c31e:	bf00      	nop
 800c320:	0800e3d8 	.word	0x0800e3d8
 800c324:	0800e360 	.word	0x0800e360
 800c328:	0800e371 	.word	0x0800e371
 800c32c:	1e71      	subs	r1, r6, #1
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 fe58 	bl	800cfe4 <__any_on>
 800c334:	2800      	cmp	r0, #0
 800c336:	d1e6      	bne.n	800c306 <__gethex+0x2ca>
 800c338:	ee18 0a10 	vmov	r0, s16
 800c33c:	4621      	mov	r1, r4
 800c33e:	f000 f9f1 	bl	800c724 <_Bfree>
 800c342:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c344:	2300      	movs	r3, #0
 800c346:	6013      	str	r3, [r2, #0]
 800c348:	2750      	movs	r7, #80	; 0x50
 800c34a:	e70c      	b.n	800c166 <__gethex+0x12a>
 800c34c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1f2      	bne.n	800c338 <__gethex+0x2fc>
 800c352:	e7d8      	b.n	800c306 <__gethex+0x2ca>
 800c354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1d5      	bne.n	800c306 <__gethex+0x2ca>
 800c35a:	e7ed      	b.n	800c338 <__gethex+0x2fc>
 800c35c:	1e6f      	subs	r7, r5, #1
 800c35e:	f1ba 0f00 	cmp.w	sl, #0
 800c362:	d131      	bne.n	800c3c8 <__gethex+0x38c>
 800c364:	b127      	cbz	r7, 800c370 <__gethex+0x334>
 800c366:	4639      	mov	r1, r7
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 fe3b 	bl	800cfe4 <__any_on>
 800c36e:	4682      	mov	sl, r0
 800c370:	117b      	asrs	r3, r7, #5
 800c372:	2101      	movs	r1, #1
 800c374:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c378:	f007 071f 	and.w	r7, r7, #31
 800c37c:	fa01 f707 	lsl.w	r7, r1, r7
 800c380:	421f      	tst	r7, r3
 800c382:	4629      	mov	r1, r5
 800c384:	4620      	mov	r0, r4
 800c386:	bf18      	it	ne
 800c388:	f04a 0a02 	orrne.w	sl, sl, #2
 800c38c:	1b76      	subs	r6, r6, r5
 800c38e:	f7ff fded 	bl	800bf6c <rshift>
 800c392:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c396:	2702      	movs	r7, #2
 800c398:	f1ba 0f00 	cmp.w	sl, #0
 800c39c:	d048      	beq.n	800c430 <__gethex+0x3f4>
 800c39e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d015      	beq.n	800c3d2 <__gethex+0x396>
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	d017      	beq.n	800c3da <__gethex+0x39e>
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d109      	bne.n	800c3c2 <__gethex+0x386>
 800c3ae:	f01a 0f02 	tst.w	sl, #2
 800c3b2:	d006      	beq.n	800c3c2 <__gethex+0x386>
 800c3b4:	f8d9 0000 	ldr.w	r0, [r9]
 800c3b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800c3bc:	f01a 0f01 	tst.w	sl, #1
 800c3c0:	d10e      	bne.n	800c3e0 <__gethex+0x3a4>
 800c3c2:	f047 0710 	orr.w	r7, r7, #16
 800c3c6:	e033      	b.n	800c430 <__gethex+0x3f4>
 800c3c8:	f04f 0a01 	mov.w	sl, #1
 800c3cc:	e7d0      	b.n	800c370 <__gethex+0x334>
 800c3ce:	2701      	movs	r7, #1
 800c3d0:	e7e2      	b.n	800c398 <__gethex+0x35c>
 800c3d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3d4:	f1c3 0301 	rsb	r3, r3, #1
 800c3d8:	9315      	str	r3, [sp, #84]	; 0x54
 800c3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0f0      	beq.n	800c3c2 <__gethex+0x386>
 800c3e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3e4:	f104 0314 	add.w	r3, r4, #20
 800c3e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c3ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c3f0:	f04f 0c00 	mov.w	ip, #0
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c3fe:	d01c      	beq.n	800c43a <__gethex+0x3fe>
 800c400:	3201      	adds	r2, #1
 800c402:	6002      	str	r2, [r0, #0]
 800c404:	2f02      	cmp	r7, #2
 800c406:	f104 0314 	add.w	r3, r4, #20
 800c40a:	d13f      	bne.n	800c48c <__gethex+0x450>
 800c40c:	f8d8 2000 	ldr.w	r2, [r8]
 800c410:	3a01      	subs	r2, #1
 800c412:	42b2      	cmp	r2, r6
 800c414:	d10a      	bne.n	800c42c <__gethex+0x3f0>
 800c416:	1171      	asrs	r1, r6, #5
 800c418:	2201      	movs	r2, #1
 800c41a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c41e:	f006 061f 	and.w	r6, r6, #31
 800c422:	fa02 f606 	lsl.w	r6, r2, r6
 800c426:	421e      	tst	r6, r3
 800c428:	bf18      	it	ne
 800c42a:	4617      	movne	r7, r2
 800c42c:	f047 0720 	orr.w	r7, r7, #32
 800c430:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c432:	601c      	str	r4, [r3, #0]
 800c434:	9b04      	ldr	r3, [sp, #16]
 800c436:	601d      	str	r5, [r3, #0]
 800c438:	e695      	b.n	800c166 <__gethex+0x12a>
 800c43a:	4299      	cmp	r1, r3
 800c43c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c440:	d8d8      	bhi.n	800c3f4 <__gethex+0x3b8>
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	459b      	cmp	fp, r3
 800c446:	db19      	blt.n	800c47c <__gethex+0x440>
 800c448:	6861      	ldr	r1, [r4, #4]
 800c44a:	ee18 0a10 	vmov	r0, s16
 800c44e:	3101      	adds	r1, #1
 800c450:	f000 f928 	bl	800c6a4 <_Balloc>
 800c454:	4681      	mov	r9, r0
 800c456:	b918      	cbnz	r0, 800c460 <__gethex+0x424>
 800c458:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <__gethex+0x488>)
 800c45a:	4602      	mov	r2, r0
 800c45c:	2184      	movs	r1, #132	; 0x84
 800c45e:	e6a8      	b.n	800c1b2 <__gethex+0x176>
 800c460:	6922      	ldr	r2, [r4, #16]
 800c462:	3202      	adds	r2, #2
 800c464:	f104 010c 	add.w	r1, r4, #12
 800c468:	0092      	lsls	r2, r2, #2
 800c46a:	300c      	adds	r0, #12
 800c46c:	f000 f90c 	bl	800c688 <memcpy>
 800c470:	4621      	mov	r1, r4
 800c472:	ee18 0a10 	vmov	r0, s16
 800c476:	f000 f955 	bl	800c724 <_Bfree>
 800c47a:	464c      	mov	r4, r9
 800c47c:	6923      	ldr	r3, [r4, #16]
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c484:	6122      	str	r2, [r4, #16]
 800c486:	2201      	movs	r2, #1
 800c488:	615a      	str	r2, [r3, #20]
 800c48a:	e7bb      	b.n	800c404 <__gethex+0x3c8>
 800c48c:	6922      	ldr	r2, [r4, #16]
 800c48e:	455a      	cmp	r2, fp
 800c490:	dd0b      	ble.n	800c4aa <__gethex+0x46e>
 800c492:	2101      	movs	r1, #1
 800c494:	4620      	mov	r0, r4
 800c496:	f7ff fd69 	bl	800bf6c <rshift>
 800c49a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c49e:	3501      	adds	r5, #1
 800c4a0:	42ab      	cmp	r3, r5
 800c4a2:	f6ff aed0 	blt.w	800c246 <__gethex+0x20a>
 800c4a6:	2701      	movs	r7, #1
 800c4a8:	e7c0      	b.n	800c42c <__gethex+0x3f0>
 800c4aa:	f016 061f 	ands.w	r6, r6, #31
 800c4ae:	d0fa      	beq.n	800c4a6 <__gethex+0x46a>
 800c4b0:	4453      	add	r3, sl
 800c4b2:	f1c6 0620 	rsb	r6, r6, #32
 800c4b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c4ba:	f000 f9e5 	bl	800c888 <__hi0bits>
 800c4be:	42b0      	cmp	r0, r6
 800c4c0:	dbe7      	blt.n	800c492 <__gethex+0x456>
 800c4c2:	e7f0      	b.n	800c4a6 <__gethex+0x46a>
 800c4c4:	0800e360 	.word	0x0800e360

0800c4c8 <L_shift>:
 800c4c8:	f1c2 0208 	rsb	r2, r2, #8
 800c4cc:	0092      	lsls	r2, r2, #2
 800c4ce:	b570      	push	{r4, r5, r6, lr}
 800c4d0:	f1c2 0620 	rsb	r6, r2, #32
 800c4d4:	6843      	ldr	r3, [r0, #4]
 800c4d6:	6804      	ldr	r4, [r0, #0]
 800c4d8:	fa03 f506 	lsl.w	r5, r3, r6
 800c4dc:	432c      	orrs	r4, r5
 800c4de:	40d3      	lsrs	r3, r2
 800c4e0:	6004      	str	r4, [r0, #0]
 800c4e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4e6:	4288      	cmp	r0, r1
 800c4e8:	d3f4      	bcc.n	800c4d4 <L_shift+0xc>
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}

0800c4ec <__match>:
 800c4ec:	b530      	push	{r4, r5, lr}
 800c4ee:	6803      	ldr	r3, [r0, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4f6:	b914      	cbnz	r4, 800c4fe <__match+0x12>
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	bd30      	pop	{r4, r5, pc}
 800c4fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c502:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c506:	2d19      	cmp	r5, #25
 800c508:	bf98      	it	ls
 800c50a:	3220      	addls	r2, #32
 800c50c:	42a2      	cmp	r2, r4
 800c50e:	d0f0      	beq.n	800c4f2 <__match+0x6>
 800c510:	2000      	movs	r0, #0
 800c512:	e7f3      	b.n	800c4fc <__match+0x10>

0800c514 <__hexnan>:
 800c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c518:	680b      	ldr	r3, [r1, #0]
 800c51a:	115e      	asrs	r6, r3, #5
 800c51c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c520:	f013 031f 	ands.w	r3, r3, #31
 800c524:	b087      	sub	sp, #28
 800c526:	bf18      	it	ne
 800c528:	3604      	addne	r6, #4
 800c52a:	2500      	movs	r5, #0
 800c52c:	1f37      	subs	r7, r6, #4
 800c52e:	4690      	mov	r8, r2
 800c530:	6802      	ldr	r2, [r0, #0]
 800c532:	9301      	str	r3, [sp, #4]
 800c534:	4682      	mov	sl, r0
 800c536:	f846 5c04 	str.w	r5, [r6, #-4]
 800c53a:	46b9      	mov	r9, r7
 800c53c:	463c      	mov	r4, r7
 800c53e:	9502      	str	r5, [sp, #8]
 800c540:	46ab      	mov	fp, r5
 800c542:	7851      	ldrb	r1, [r2, #1]
 800c544:	1c53      	adds	r3, r2, #1
 800c546:	9303      	str	r3, [sp, #12]
 800c548:	b341      	cbz	r1, 800c59c <__hexnan+0x88>
 800c54a:	4608      	mov	r0, r1
 800c54c:	9205      	str	r2, [sp, #20]
 800c54e:	9104      	str	r1, [sp, #16]
 800c550:	f7ff fd5e 	bl	800c010 <__hexdig_fun>
 800c554:	2800      	cmp	r0, #0
 800c556:	d14f      	bne.n	800c5f8 <__hexnan+0xe4>
 800c558:	9904      	ldr	r1, [sp, #16]
 800c55a:	9a05      	ldr	r2, [sp, #20]
 800c55c:	2920      	cmp	r1, #32
 800c55e:	d818      	bhi.n	800c592 <__hexnan+0x7e>
 800c560:	9b02      	ldr	r3, [sp, #8]
 800c562:	459b      	cmp	fp, r3
 800c564:	dd13      	ble.n	800c58e <__hexnan+0x7a>
 800c566:	454c      	cmp	r4, r9
 800c568:	d206      	bcs.n	800c578 <__hexnan+0x64>
 800c56a:	2d07      	cmp	r5, #7
 800c56c:	dc04      	bgt.n	800c578 <__hexnan+0x64>
 800c56e:	462a      	mov	r2, r5
 800c570:	4649      	mov	r1, r9
 800c572:	4620      	mov	r0, r4
 800c574:	f7ff ffa8 	bl	800c4c8 <L_shift>
 800c578:	4544      	cmp	r4, r8
 800c57a:	d950      	bls.n	800c61e <__hexnan+0x10a>
 800c57c:	2300      	movs	r3, #0
 800c57e:	f1a4 0904 	sub.w	r9, r4, #4
 800c582:	f844 3c04 	str.w	r3, [r4, #-4]
 800c586:	f8cd b008 	str.w	fp, [sp, #8]
 800c58a:	464c      	mov	r4, r9
 800c58c:	461d      	mov	r5, r3
 800c58e:	9a03      	ldr	r2, [sp, #12]
 800c590:	e7d7      	b.n	800c542 <__hexnan+0x2e>
 800c592:	2929      	cmp	r1, #41	; 0x29
 800c594:	d156      	bne.n	800c644 <__hexnan+0x130>
 800c596:	3202      	adds	r2, #2
 800c598:	f8ca 2000 	str.w	r2, [sl]
 800c59c:	f1bb 0f00 	cmp.w	fp, #0
 800c5a0:	d050      	beq.n	800c644 <__hexnan+0x130>
 800c5a2:	454c      	cmp	r4, r9
 800c5a4:	d206      	bcs.n	800c5b4 <__hexnan+0xa0>
 800c5a6:	2d07      	cmp	r5, #7
 800c5a8:	dc04      	bgt.n	800c5b4 <__hexnan+0xa0>
 800c5aa:	462a      	mov	r2, r5
 800c5ac:	4649      	mov	r1, r9
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f7ff ff8a 	bl	800c4c8 <L_shift>
 800c5b4:	4544      	cmp	r4, r8
 800c5b6:	d934      	bls.n	800c622 <__hexnan+0x10e>
 800c5b8:	f1a8 0204 	sub.w	r2, r8, #4
 800c5bc:	4623      	mov	r3, r4
 800c5be:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5c6:	429f      	cmp	r7, r3
 800c5c8:	d2f9      	bcs.n	800c5be <__hexnan+0xaa>
 800c5ca:	1b3b      	subs	r3, r7, r4
 800c5cc:	f023 0303 	bic.w	r3, r3, #3
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	3e03      	subs	r6, #3
 800c5d6:	42b4      	cmp	r4, r6
 800c5d8:	bf88      	it	hi
 800c5da:	2304      	movhi	r3, #4
 800c5dc:	4443      	add	r3, r8
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f843 2b04 	str.w	r2, [r3], #4
 800c5e4:	429f      	cmp	r7, r3
 800c5e6:	d2fb      	bcs.n	800c5e0 <__hexnan+0xcc>
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	b91b      	cbnz	r3, 800c5f4 <__hexnan+0xe0>
 800c5ec:	4547      	cmp	r7, r8
 800c5ee:	d127      	bne.n	800c640 <__hexnan+0x12c>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	603b      	str	r3, [r7, #0]
 800c5f4:	2005      	movs	r0, #5
 800c5f6:	e026      	b.n	800c646 <__hexnan+0x132>
 800c5f8:	3501      	adds	r5, #1
 800c5fa:	2d08      	cmp	r5, #8
 800c5fc:	f10b 0b01 	add.w	fp, fp, #1
 800c600:	dd06      	ble.n	800c610 <__hexnan+0xfc>
 800c602:	4544      	cmp	r4, r8
 800c604:	d9c3      	bls.n	800c58e <__hexnan+0x7a>
 800c606:	2300      	movs	r3, #0
 800c608:	f844 3c04 	str.w	r3, [r4, #-4]
 800c60c:	2501      	movs	r5, #1
 800c60e:	3c04      	subs	r4, #4
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	f000 000f 	and.w	r0, r0, #15
 800c616:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c61a:	6022      	str	r2, [r4, #0]
 800c61c:	e7b7      	b.n	800c58e <__hexnan+0x7a>
 800c61e:	2508      	movs	r5, #8
 800c620:	e7b5      	b.n	800c58e <__hexnan+0x7a>
 800c622:	9b01      	ldr	r3, [sp, #4]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0df      	beq.n	800c5e8 <__hexnan+0xd4>
 800c628:	f04f 32ff 	mov.w	r2, #4294967295
 800c62c:	f1c3 0320 	rsb	r3, r3, #32
 800c630:	fa22 f303 	lsr.w	r3, r2, r3
 800c634:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c638:	401a      	ands	r2, r3
 800c63a:	f846 2c04 	str.w	r2, [r6, #-4]
 800c63e:	e7d3      	b.n	800c5e8 <__hexnan+0xd4>
 800c640:	3f04      	subs	r7, #4
 800c642:	e7d1      	b.n	800c5e8 <__hexnan+0xd4>
 800c644:	2004      	movs	r0, #4
 800c646:	b007      	add	sp, #28
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c64c <_localeconv_r>:
 800c64c:	4800      	ldr	r0, [pc, #0]	; (800c650 <_localeconv_r+0x4>)
 800c64e:	4770      	bx	lr
 800c650:	20000254 	.word	0x20000254

0800c654 <malloc>:
 800c654:	4b02      	ldr	r3, [pc, #8]	; (800c660 <malloc+0xc>)
 800c656:	4601      	mov	r1, r0
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	f000 bd67 	b.w	800d12c <_malloc_r>
 800c65e:	bf00      	nop
 800c660:	200000fc 	.word	0x200000fc

0800c664 <__ascii_mbtowc>:
 800c664:	b082      	sub	sp, #8
 800c666:	b901      	cbnz	r1, 800c66a <__ascii_mbtowc+0x6>
 800c668:	a901      	add	r1, sp, #4
 800c66a:	b142      	cbz	r2, 800c67e <__ascii_mbtowc+0x1a>
 800c66c:	b14b      	cbz	r3, 800c682 <__ascii_mbtowc+0x1e>
 800c66e:	7813      	ldrb	r3, [r2, #0]
 800c670:	600b      	str	r3, [r1, #0]
 800c672:	7812      	ldrb	r2, [r2, #0]
 800c674:	1e10      	subs	r0, r2, #0
 800c676:	bf18      	it	ne
 800c678:	2001      	movne	r0, #1
 800c67a:	b002      	add	sp, #8
 800c67c:	4770      	bx	lr
 800c67e:	4610      	mov	r0, r2
 800c680:	e7fb      	b.n	800c67a <__ascii_mbtowc+0x16>
 800c682:	f06f 0001 	mvn.w	r0, #1
 800c686:	e7f8      	b.n	800c67a <__ascii_mbtowc+0x16>

0800c688 <memcpy>:
 800c688:	440a      	add	r2, r1
 800c68a:	4291      	cmp	r1, r2
 800c68c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c690:	d100      	bne.n	800c694 <memcpy+0xc>
 800c692:	4770      	bx	lr
 800c694:	b510      	push	{r4, lr}
 800c696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c69a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c69e:	4291      	cmp	r1, r2
 800c6a0:	d1f9      	bne.n	800c696 <memcpy+0xe>
 800c6a2:	bd10      	pop	{r4, pc}

0800c6a4 <_Balloc>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	460d      	mov	r5, r1
 800c6ac:	b976      	cbnz	r6, 800c6cc <_Balloc+0x28>
 800c6ae:	2010      	movs	r0, #16
 800c6b0:	f7ff ffd0 	bl	800c654 <malloc>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	6260      	str	r0, [r4, #36]	; 0x24
 800c6b8:	b920      	cbnz	r0, 800c6c4 <_Balloc+0x20>
 800c6ba:	4b18      	ldr	r3, [pc, #96]	; (800c71c <_Balloc+0x78>)
 800c6bc:	4818      	ldr	r0, [pc, #96]	; (800c720 <_Balloc+0x7c>)
 800c6be:	2166      	movs	r1, #102	; 0x66
 800c6c0:	f000 ff6c 	bl	800d59c <__assert_func>
 800c6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6c8:	6006      	str	r6, [r0, #0]
 800c6ca:	60c6      	str	r6, [r0, #12]
 800c6cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c6ce:	68f3      	ldr	r3, [r6, #12]
 800c6d0:	b183      	cbz	r3, 800c6f4 <_Balloc+0x50>
 800c6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6da:	b9b8      	cbnz	r0, 800c70c <_Balloc+0x68>
 800c6dc:	2101      	movs	r1, #1
 800c6de:	fa01 f605 	lsl.w	r6, r1, r5
 800c6e2:	1d72      	adds	r2, r6, #5
 800c6e4:	0092      	lsls	r2, r2, #2
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fc9d 	bl	800d026 <_calloc_r>
 800c6ec:	b160      	cbz	r0, 800c708 <_Balloc+0x64>
 800c6ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6f2:	e00e      	b.n	800c712 <_Balloc+0x6e>
 800c6f4:	2221      	movs	r2, #33	; 0x21
 800c6f6:	2104      	movs	r1, #4
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 fc94 	bl	800d026 <_calloc_r>
 800c6fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c700:	60f0      	str	r0, [r6, #12]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1e4      	bne.n	800c6d2 <_Balloc+0x2e>
 800c708:	2000      	movs	r0, #0
 800c70a:	bd70      	pop	{r4, r5, r6, pc}
 800c70c:	6802      	ldr	r2, [r0, #0]
 800c70e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c712:	2300      	movs	r3, #0
 800c714:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c718:	e7f7      	b.n	800c70a <_Balloc+0x66>
 800c71a:	bf00      	nop
 800c71c:	0800e2ee 	.word	0x0800e2ee
 800c720:	0800e3ec 	.word	0x0800e3ec

0800c724 <_Bfree>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c728:	4605      	mov	r5, r0
 800c72a:	460c      	mov	r4, r1
 800c72c:	b976      	cbnz	r6, 800c74c <_Bfree+0x28>
 800c72e:	2010      	movs	r0, #16
 800c730:	f7ff ff90 	bl	800c654 <malloc>
 800c734:	4602      	mov	r2, r0
 800c736:	6268      	str	r0, [r5, #36]	; 0x24
 800c738:	b920      	cbnz	r0, 800c744 <_Bfree+0x20>
 800c73a:	4b09      	ldr	r3, [pc, #36]	; (800c760 <_Bfree+0x3c>)
 800c73c:	4809      	ldr	r0, [pc, #36]	; (800c764 <_Bfree+0x40>)
 800c73e:	218a      	movs	r1, #138	; 0x8a
 800c740:	f000 ff2c 	bl	800d59c <__assert_func>
 800c744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c748:	6006      	str	r6, [r0, #0]
 800c74a:	60c6      	str	r6, [r0, #12]
 800c74c:	b13c      	cbz	r4, 800c75e <_Bfree+0x3a>
 800c74e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c750:	6862      	ldr	r2, [r4, #4]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c758:	6021      	str	r1, [r4, #0]
 800c75a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c75e:	bd70      	pop	{r4, r5, r6, pc}
 800c760:	0800e2ee 	.word	0x0800e2ee
 800c764:	0800e3ec 	.word	0x0800e3ec

0800c768 <__multadd>:
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	690d      	ldr	r5, [r1, #16]
 800c76e:	4607      	mov	r7, r0
 800c770:	460c      	mov	r4, r1
 800c772:	461e      	mov	r6, r3
 800c774:	f101 0c14 	add.w	ip, r1, #20
 800c778:	2000      	movs	r0, #0
 800c77a:	f8dc 3000 	ldr.w	r3, [ip]
 800c77e:	b299      	uxth	r1, r3
 800c780:	fb02 6101 	mla	r1, r2, r1, r6
 800c784:	0c1e      	lsrs	r6, r3, #16
 800c786:	0c0b      	lsrs	r3, r1, #16
 800c788:	fb02 3306 	mla	r3, r2, r6, r3
 800c78c:	b289      	uxth	r1, r1
 800c78e:	3001      	adds	r0, #1
 800c790:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c794:	4285      	cmp	r5, r0
 800c796:	f84c 1b04 	str.w	r1, [ip], #4
 800c79a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c79e:	dcec      	bgt.n	800c77a <__multadd+0x12>
 800c7a0:	b30e      	cbz	r6, 800c7e6 <__multadd+0x7e>
 800c7a2:	68a3      	ldr	r3, [r4, #8]
 800c7a4:	42ab      	cmp	r3, r5
 800c7a6:	dc19      	bgt.n	800c7dc <__multadd+0x74>
 800c7a8:	6861      	ldr	r1, [r4, #4]
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	3101      	adds	r1, #1
 800c7ae:	f7ff ff79 	bl	800c6a4 <_Balloc>
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	b928      	cbnz	r0, 800c7c2 <__multadd+0x5a>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <__multadd+0x84>)
 800c7ba:	480d      	ldr	r0, [pc, #52]	; (800c7f0 <__multadd+0x88>)
 800c7bc:	21b5      	movs	r1, #181	; 0xb5
 800c7be:	f000 feed 	bl	800d59c <__assert_func>
 800c7c2:	6922      	ldr	r2, [r4, #16]
 800c7c4:	3202      	adds	r2, #2
 800c7c6:	f104 010c 	add.w	r1, r4, #12
 800c7ca:	0092      	lsls	r2, r2, #2
 800c7cc:	300c      	adds	r0, #12
 800c7ce:	f7ff ff5b 	bl	800c688 <memcpy>
 800c7d2:	4621      	mov	r1, r4
 800c7d4:	4638      	mov	r0, r7
 800c7d6:	f7ff ffa5 	bl	800c724 <_Bfree>
 800c7da:	4644      	mov	r4, r8
 800c7dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7e0:	3501      	adds	r5, #1
 800c7e2:	615e      	str	r6, [r3, #20]
 800c7e4:	6125      	str	r5, [r4, #16]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ec:	0800e360 	.word	0x0800e360
 800c7f0:	0800e3ec 	.word	0x0800e3ec

0800c7f4 <__s2b>:
 800c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	4615      	mov	r5, r2
 800c7fc:	461f      	mov	r7, r3
 800c7fe:	2209      	movs	r2, #9
 800c800:	3308      	adds	r3, #8
 800c802:	4606      	mov	r6, r0
 800c804:	fb93 f3f2 	sdiv	r3, r3, r2
 800c808:	2100      	movs	r1, #0
 800c80a:	2201      	movs	r2, #1
 800c80c:	429a      	cmp	r2, r3
 800c80e:	db09      	blt.n	800c824 <__s2b+0x30>
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff ff47 	bl	800c6a4 <_Balloc>
 800c816:	b940      	cbnz	r0, 800c82a <__s2b+0x36>
 800c818:	4602      	mov	r2, r0
 800c81a:	4b19      	ldr	r3, [pc, #100]	; (800c880 <__s2b+0x8c>)
 800c81c:	4819      	ldr	r0, [pc, #100]	; (800c884 <__s2b+0x90>)
 800c81e:	21ce      	movs	r1, #206	; 0xce
 800c820:	f000 febc 	bl	800d59c <__assert_func>
 800c824:	0052      	lsls	r2, r2, #1
 800c826:	3101      	adds	r1, #1
 800c828:	e7f0      	b.n	800c80c <__s2b+0x18>
 800c82a:	9b08      	ldr	r3, [sp, #32]
 800c82c:	6143      	str	r3, [r0, #20]
 800c82e:	2d09      	cmp	r5, #9
 800c830:	f04f 0301 	mov.w	r3, #1
 800c834:	6103      	str	r3, [r0, #16]
 800c836:	dd16      	ble.n	800c866 <__s2b+0x72>
 800c838:	f104 0909 	add.w	r9, r4, #9
 800c83c:	46c8      	mov	r8, r9
 800c83e:	442c      	add	r4, r5
 800c840:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c844:	4601      	mov	r1, r0
 800c846:	3b30      	subs	r3, #48	; 0x30
 800c848:	220a      	movs	r2, #10
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff ff8c 	bl	800c768 <__multadd>
 800c850:	45a0      	cmp	r8, r4
 800c852:	d1f5      	bne.n	800c840 <__s2b+0x4c>
 800c854:	f1a5 0408 	sub.w	r4, r5, #8
 800c858:	444c      	add	r4, r9
 800c85a:	1b2d      	subs	r5, r5, r4
 800c85c:	1963      	adds	r3, r4, r5
 800c85e:	42bb      	cmp	r3, r7
 800c860:	db04      	blt.n	800c86c <__s2b+0x78>
 800c862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c866:	340a      	adds	r4, #10
 800c868:	2509      	movs	r5, #9
 800c86a:	e7f6      	b.n	800c85a <__s2b+0x66>
 800c86c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c870:	4601      	mov	r1, r0
 800c872:	3b30      	subs	r3, #48	; 0x30
 800c874:	220a      	movs	r2, #10
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff ff76 	bl	800c768 <__multadd>
 800c87c:	e7ee      	b.n	800c85c <__s2b+0x68>
 800c87e:	bf00      	nop
 800c880:	0800e360 	.word	0x0800e360
 800c884:	0800e3ec 	.word	0x0800e3ec

0800c888 <__hi0bits>:
 800c888:	0c03      	lsrs	r3, r0, #16
 800c88a:	041b      	lsls	r3, r3, #16
 800c88c:	b9d3      	cbnz	r3, 800c8c4 <__hi0bits+0x3c>
 800c88e:	0400      	lsls	r0, r0, #16
 800c890:	2310      	movs	r3, #16
 800c892:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c896:	bf04      	itt	eq
 800c898:	0200      	lsleq	r0, r0, #8
 800c89a:	3308      	addeq	r3, #8
 800c89c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8a0:	bf04      	itt	eq
 800c8a2:	0100      	lsleq	r0, r0, #4
 800c8a4:	3304      	addeq	r3, #4
 800c8a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8aa:	bf04      	itt	eq
 800c8ac:	0080      	lsleq	r0, r0, #2
 800c8ae:	3302      	addeq	r3, #2
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	db05      	blt.n	800c8c0 <__hi0bits+0x38>
 800c8b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c8b8:	f103 0301 	add.w	r3, r3, #1
 800c8bc:	bf08      	it	eq
 800c8be:	2320      	moveq	r3, #32
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	4770      	bx	lr
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	e7e4      	b.n	800c892 <__hi0bits+0xa>

0800c8c8 <__lo0bits>:
 800c8c8:	6803      	ldr	r3, [r0, #0]
 800c8ca:	f013 0207 	ands.w	r2, r3, #7
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	d00b      	beq.n	800c8ea <__lo0bits+0x22>
 800c8d2:	07da      	lsls	r2, r3, #31
 800c8d4:	d423      	bmi.n	800c91e <__lo0bits+0x56>
 800c8d6:	0798      	lsls	r0, r3, #30
 800c8d8:	bf49      	itett	mi
 800c8da:	085b      	lsrmi	r3, r3, #1
 800c8dc:	089b      	lsrpl	r3, r3, #2
 800c8de:	2001      	movmi	r0, #1
 800c8e0:	600b      	strmi	r3, [r1, #0]
 800c8e2:	bf5c      	itt	pl
 800c8e4:	600b      	strpl	r3, [r1, #0]
 800c8e6:	2002      	movpl	r0, #2
 800c8e8:	4770      	bx	lr
 800c8ea:	b298      	uxth	r0, r3
 800c8ec:	b9a8      	cbnz	r0, 800c91a <__lo0bits+0x52>
 800c8ee:	0c1b      	lsrs	r3, r3, #16
 800c8f0:	2010      	movs	r0, #16
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	b90a      	cbnz	r2, 800c8fa <__lo0bits+0x32>
 800c8f6:	3008      	adds	r0, #8
 800c8f8:	0a1b      	lsrs	r3, r3, #8
 800c8fa:	071a      	lsls	r2, r3, #28
 800c8fc:	bf04      	itt	eq
 800c8fe:	091b      	lsreq	r3, r3, #4
 800c900:	3004      	addeq	r0, #4
 800c902:	079a      	lsls	r2, r3, #30
 800c904:	bf04      	itt	eq
 800c906:	089b      	lsreq	r3, r3, #2
 800c908:	3002      	addeq	r0, #2
 800c90a:	07da      	lsls	r2, r3, #31
 800c90c:	d403      	bmi.n	800c916 <__lo0bits+0x4e>
 800c90e:	085b      	lsrs	r3, r3, #1
 800c910:	f100 0001 	add.w	r0, r0, #1
 800c914:	d005      	beq.n	800c922 <__lo0bits+0x5a>
 800c916:	600b      	str	r3, [r1, #0]
 800c918:	4770      	bx	lr
 800c91a:	4610      	mov	r0, r2
 800c91c:	e7e9      	b.n	800c8f2 <__lo0bits+0x2a>
 800c91e:	2000      	movs	r0, #0
 800c920:	4770      	bx	lr
 800c922:	2020      	movs	r0, #32
 800c924:	4770      	bx	lr
	...

0800c928 <__i2b>:
 800c928:	b510      	push	{r4, lr}
 800c92a:	460c      	mov	r4, r1
 800c92c:	2101      	movs	r1, #1
 800c92e:	f7ff feb9 	bl	800c6a4 <_Balloc>
 800c932:	4602      	mov	r2, r0
 800c934:	b928      	cbnz	r0, 800c942 <__i2b+0x1a>
 800c936:	4b05      	ldr	r3, [pc, #20]	; (800c94c <__i2b+0x24>)
 800c938:	4805      	ldr	r0, [pc, #20]	; (800c950 <__i2b+0x28>)
 800c93a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c93e:	f000 fe2d 	bl	800d59c <__assert_func>
 800c942:	2301      	movs	r3, #1
 800c944:	6144      	str	r4, [r0, #20]
 800c946:	6103      	str	r3, [r0, #16]
 800c948:	bd10      	pop	{r4, pc}
 800c94a:	bf00      	nop
 800c94c:	0800e360 	.word	0x0800e360
 800c950:	0800e3ec 	.word	0x0800e3ec

0800c954 <__multiply>:
 800c954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c958:	4691      	mov	r9, r2
 800c95a:	690a      	ldr	r2, [r1, #16]
 800c95c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c960:	429a      	cmp	r2, r3
 800c962:	bfb8      	it	lt
 800c964:	460b      	movlt	r3, r1
 800c966:	460c      	mov	r4, r1
 800c968:	bfbc      	itt	lt
 800c96a:	464c      	movlt	r4, r9
 800c96c:	4699      	movlt	r9, r3
 800c96e:	6927      	ldr	r7, [r4, #16]
 800c970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c974:	68a3      	ldr	r3, [r4, #8]
 800c976:	6861      	ldr	r1, [r4, #4]
 800c978:	eb07 060a 	add.w	r6, r7, sl
 800c97c:	42b3      	cmp	r3, r6
 800c97e:	b085      	sub	sp, #20
 800c980:	bfb8      	it	lt
 800c982:	3101      	addlt	r1, #1
 800c984:	f7ff fe8e 	bl	800c6a4 <_Balloc>
 800c988:	b930      	cbnz	r0, 800c998 <__multiply+0x44>
 800c98a:	4602      	mov	r2, r0
 800c98c:	4b44      	ldr	r3, [pc, #272]	; (800caa0 <__multiply+0x14c>)
 800c98e:	4845      	ldr	r0, [pc, #276]	; (800caa4 <__multiply+0x150>)
 800c990:	f240 115d 	movw	r1, #349	; 0x15d
 800c994:	f000 fe02 	bl	800d59c <__assert_func>
 800c998:	f100 0514 	add.w	r5, r0, #20
 800c99c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	4543      	cmp	r3, r8
 800c9a6:	d321      	bcc.n	800c9ec <__multiply+0x98>
 800c9a8:	f104 0314 	add.w	r3, r4, #20
 800c9ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c9b0:	f109 0314 	add.w	r3, r9, #20
 800c9b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c9b8:	9202      	str	r2, [sp, #8]
 800c9ba:	1b3a      	subs	r2, r7, r4
 800c9bc:	3a15      	subs	r2, #21
 800c9be:	f022 0203 	bic.w	r2, r2, #3
 800c9c2:	3204      	adds	r2, #4
 800c9c4:	f104 0115 	add.w	r1, r4, #21
 800c9c8:	428f      	cmp	r7, r1
 800c9ca:	bf38      	it	cc
 800c9cc:	2204      	movcc	r2, #4
 800c9ce:	9201      	str	r2, [sp, #4]
 800c9d0:	9a02      	ldr	r2, [sp, #8]
 800c9d2:	9303      	str	r3, [sp, #12]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d80c      	bhi.n	800c9f2 <__multiply+0x9e>
 800c9d8:	2e00      	cmp	r6, #0
 800c9da:	dd03      	ble.n	800c9e4 <__multiply+0x90>
 800c9dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d05a      	beq.n	800ca9a <__multiply+0x146>
 800c9e4:	6106      	str	r6, [r0, #16]
 800c9e6:	b005      	add	sp, #20
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	f843 2b04 	str.w	r2, [r3], #4
 800c9f0:	e7d8      	b.n	800c9a4 <__multiply+0x50>
 800c9f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c9f6:	f1ba 0f00 	cmp.w	sl, #0
 800c9fa:	d024      	beq.n	800ca46 <__multiply+0xf2>
 800c9fc:	f104 0e14 	add.w	lr, r4, #20
 800ca00:	46a9      	mov	r9, r5
 800ca02:	f04f 0c00 	mov.w	ip, #0
 800ca06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca0a:	f8d9 1000 	ldr.w	r1, [r9]
 800ca0e:	fa1f fb82 	uxth.w	fp, r2
 800ca12:	b289      	uxth	r1, r1
 800ca14:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca1c:	f8d9 2000 	ldr.w	r2, [r9]
 800ca20:	4461      	add	r1, ip
 800ca22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca26:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca2e:	b289      	uxth	r1, r1
 800ca30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca34:	4577      	cmp	r7, lr
 800ca36:	f849 1b04 	str.w	r1, [r9], #4
 800ca3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca3e:	d8e2      	bhi.n	800ca06 <__multiply+0xb2>
 800ca40:	9a01      	ldr	r2, [sp, #4]
 800ca42:	f845 c002 	str.w	ip, [r5, r2]
 800ca46:	9a03      	ldr	r2, [sp, #12]
 800ca48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	f1b9 0f00 	cmp.w	r9, #0
 800ca52:	d020      	beq.n	800ca96 <__multiply+0x142>
 800ca54:	6829      	ldr	r1, [r5, #0]
 800ca56:	f104 0c14 	add.w	ip, r4, #20
 800ca5a:	46ae      	mov	lr, r5
 800ca5c:	f04f 0a00 	mov.w	sl, #0
 800ca60:	f8bc b000 	ldrh.w	fp, [ip]
 800ca64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ca68:	fb09 220b 	mla	r2, r9, fp, r2
 800ca6c:	4492      	add	sl, r2
 800ca6e:	b289      	uxth	r1, r1
 800ca70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ca74:	f84e 1b04 	str.w	r1, [lr], #4
 800ca78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ca7c:	f8be 1000 	ldrh.w	r1, [lr]
 800ca80:	0c12      	lsrs	r2, r2, #16
 800ca82:	fb09 1102 	mla	r1, r9, r2, r1
 800ca86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ca8a:	4567      	cmp	r7, ip
 800ca8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ca90:	d8e6      	bhi.n	800ca60 <__multiply+0x10c>
 800ca92:	9a01      	ldr	r2, [sp, #4]
 800ca94:	50a9      	str	r1, [r5, r2]
 800ca96:	3504      	adds	r5, #4
 800ca98:	e79a      	b.n	800c9d0 <__multiply+0x7c>
 800ca9a:	3e01      	subs	r6, #1
 800ca9c:	e79c      	b.n	800c9d8 <__multiply+0x84>
 800ca9e:	bf00      	nop
 800caa0:	0800e360 	.word	0x0800e360
 800caa4:	0800e3ec 	.word	0x0800e3ec

0800caa8 <__pow5mult>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	4615      	mov	r5, r2
 800caae:	f012 0203 	ands.w	r2, r2, #3
 800cab2:	4606      	mov	r6, r0
 800cab4:	460f      	mov	r7, r1
 800cab6:	d007      	beq.n	800cac8 <__pow5mult+0x20>
 800cab8:	4c25      	ldr	r4, [pc, #148]	; (800cb50 <__pow5mult+0xa8>)
 800caba:	3a01      	subs	r2, #1
 800cabc:	2300      	movs	r3, #0
 800cabe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cac2:	f7ff fe51 	bl	800c768 <__multadd>
 800cac6:	4607      	mov	r7, r0
 800cac8:	10ad      	asrs	r5, r5, #2
 800caca:	d03d      	beq.n	800cb48 <__pow5mult+0xa0>
 800cacc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cace:	b97c      	cbnz	r4, 800caf0 <__pow5mult+0x48>
 800cad0:	2010      	movs	r0, #16
 800cad2:	f7ff fdbf 	bl	800c654 <malloc>
 800cad6:	4602      	mov	r2, r0
 800cad8:	6270      	str	r0, [r6, #36]	; 0x24
 800cada:	b928      	cbnz	r0, 800cae8 <__pow5mult+0x40>
 800cadc:	4b1d      	ldr	r3, [pc, #116]	; (800cb54 <__pow5mult+0xac>)
 800cade:	481e      	ldr	r0, [pc, #120]	; (800cb58 <__pow5mult+0xb0>)
 800cae0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cae4:	f000 fd5a 	bl	800d59c <__assert_func>
 800cae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800caec:	6004      	str	r4, [r0, #0]
 800caee:	60c4      	str	r4, [r0, #12]
 800caf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800caf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800caf8:	b94c      	cbnz	r4, 800cb0e <__pow5mult+0x66>
 800cafa:	f240 2171 	movw	r1, #625	; 0x271
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7ff ff12 	bl	800c928 <__i2b>
 800cb04:	2300      	movs	r3, #0
 800cb06:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	6003      	str	r3, [r0, #0]
 800cb0e:	f04f 0900 	mov.w	r9, #0
 800cb12:	07eb      	lsls	r3, r5, #31
 800cb14:	d50a      	bpl.n	800cb2c <__pow5mult+0x84>
 800cb16:	4639      	mov	r1, r7
 800cb18:	4622      	mov	r2, r4
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	f7ff ff1a 	bl	800c954 <__multiply>
 800cb20:	4639      	mov	r1, r7
 800cb22:	4680      	mov	r8, r0
 800cb24:	4630      	mov	r0, r6
 800cb26:	f7ff fdfd 	bl	800c724 <_Bfree>
 800cb2a:	4647      	mov	r7, r8
 800cb2c:	106d      	asrs	r5, r5, #1
 800cb2e:	d00b      	beq.n	800cb48 <__pow5mult+0xa0>
 800cb30:	6820      	ldr	r0, [r4, #0]
 800cb32:	b938      	cbnz	r0, 800cb44 <__pow5mult+0x9c>
 800cb34:	4622      	mov	r2, r4
 800cb36:	4621      	mov	r1, r4
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f7ff ff0b 	bl	800c954 <__multiply>
 800cb3e:	6020      	str	r0, [r4, #0]
 800cb40:	f8c0 9000 	str.w	r9, [r0]
 800cb44:	4604      	mov	r4, r0
 800cb46:	e7e4      	b.n	800cb12 <__pow5mult+0x6a>
 800cb48:	4638      	mov	r0, r7
 800cb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb4e:	bf00      	nop
 800cb50:	0800e538 	.word	0x0800e538
 800cb54:	0800e2ee 	.word	0x0800e2ee
 800cb58:	0800e3ec 	.word	0x0800e3ec

0800cb5c <__lshift>:
 800cb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb60:	460c      	mov	r4, r1
 800cb62:	6849      	ldr	r1, [r1, #4]
 800cb64:	6923      	ldr	r3, [r4, #16]
 800cb66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	4691      	mov	r9, r2
 800cb70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb74:	f108 0601 	add.w	r6, r8, #1
 800cb78:	42b3      	cmp	r3, r6
 800cb7a:	db0b      	blt.n	800cb94 <__lshift+0x38>
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7ff fd91 	bl	800c6a4 <_Balloc>
 800cb82:	4605      	mov	r5, r0
 800cb84:	b948      	cbnz	r0, 800cb9a <__lshift+0x3e>
 800cb86:	4602      	mov	r2, r0
 800cb88:	4b2a      	ldr	r3, [pc, #168]	; (800cc34 <__lshift+0xd8>)
 800cb8a:	482b      	ldr	r0, [pc, #172]	; (800cc38 <__lshift+0xdc>)
 800cb8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb90:	f000 fd04 	bl	800d59c <__assert_func>
 800cb94:	3101      	adds	r1, #1
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	e7ee      	b.n	800cb78 <__lshift+0x1c>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f100 0114 	add.w	r1, r0, #20
 800cba0:	f100 0210 	add.w	r2, r0, #16
 800cba4:	4618      	mov	r0, r3
 800cba6:	4553      	cmp	r3, sl
 800cba8:	db37      	blt.n	800cc1a <__lshift+0xbe>
 800cbaa:	6920      	ldr	r0, [r4, #16]
 800cbac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbb0:	f104 0314 	add.w	r3, r4, #20
 800cbb4:	f019 091f 	ands.w	r9, r9, #31
 800cbb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cbc0:	d02f      	beq.n	800cc22 <__lshift+0xc6>
 800cbc2:	f1c9 0e20 	rsb	lr, r9, #32
 800cbc6:	468a      	mov	sl, r1
 800cbc8:	f04f 0c00 	mov.w	ip, #0
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	fa02 f209 	lsl.w	r2, r2, r9
 800cbd2:	ea42 020c 	orr.w	r2, r2, ip
 800cbd6:	f84a 2b04 	str.w	r2, [sl], #4
 800cbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbde:	4298      	cmp	r0, r3
 800cbe0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cbe4:	d8f2      	bhi.n	800cbcc <__lshift+0x70>
 800cbe6:	1b03      	subs	r3, r0, r4
 800cbe8:	3b15      	subs	r3, #21
 800cbea:	f023 0303 	bic.w	r3, r3, #3
 800cbee:	3304      	adds	r3, #4
 800cbf0:	f104 0215 	add.w	r2, r4, #21
 800cbf4:	4290      	cmp	r0, r2
 800cbf6:	bf38      	it	cc
 800cbf8:	2304      	movcc	r3, #4
 800cbfa:	f841 c003 	str.w	ip, [r1, r3]
 800cbfe:	f1bc 0f00 	cmp.w	ip, #0
 800cc02:	d001      	beq.n	800cc08 <__lshift+0xac>
 800cc04:	f108 0602 	add.w	r6, r8, #2
 800cc08:	3e01      	subs	r6, #1
 800cc0a:	4638      	mov	r0, r7
 800cc0c:	612e      	str	r6, [r5, #16]
 800cc0e:	4621      	mov	r1, r4
 800cc10:	f7ff fd88 	bl	800c724 <_Bfree>
 800cc14:	4628      	mov	r0, r5
 800cc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc1e:	3301      	adds	r3, #1
 800cc20:	e7c1      	b.n	800cba6 <__lshift+0x4a>
 800cc22:	3904      	subs	r1, #4
 800cc24:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc28:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc2c:	4298      	cmp	r0, r3
 800cc2e:	d8f9      	bhi.n	800cc24 <__lshift+0xc8>
 800cc30:	e7ea      	b.n	800cc08 <__lshift+0xac>
 800cc32:	bf00      	nop
 800cc34:	0800e360 	.word	0x0800e360
 800cc38:	0800e3ec 	.word	0x0800e3ec

0800cc3c <__mcmp>:
 800cc3c:	b530      	push	{r4, r5, lr}
 800cc3e:	6902      	ldr	r2, [r0, #16]
 800cc40:	690c      	ldr	r4, [r1, #16]
 800cc42:	1b12      	subs	r2, r2, r4
 800cc44:	d10e      	bne.n	800cc64 <__mcmp+0x28>
 800cc46:	f100 0314 	add.w	r3, r0, #20
 800cc4a:	3114      	adds	r1, #20
 800cc4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc5c:	42a5      	cmp	r5, r4
 800cc5e:	d003      	beq.n	800cc68 <__mcmp+0x2c>
 800cc60:	d305      	bcc.n	800cc6e <__mcmp+0x32>
 800cc62:	2201      	movs	r2, #1
 800cc64:	4610      	mov	r0, r2
 800cc66:	bd30      	pop	{r4, r5, pc}
 800cc68:	4283      	cmp	r3, r0
 800cc6a:	d3f3      	bcc.n	800cc54 <__mcmp+0x18>
 800cc6c:	e7fa      	b.n	800cc64 <__mcmp+0x28>
 800cc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc72:	e7f7      	b.n	800cc64 <__mcmp+0x28>

0800cc74 <__mdiff>:
 800cc74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	460c      	mov	r4, r1
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	4620      	mov	r0, r4
 800cc80:	4690      	mov	r8, r2
 800cc82:	f7ff ffdb 	bl	800cc3c <__mcmp>
 800cc86:	1e05      	subs	r5, r0, #0
 800cc88:	d110      	bne.n	800ccac <__mdiff+0x38>
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f7ff fd09 	bl	800c6a4 <_Balloc>
 800cc92:	b930      	cbnz	r0, 800cca2 <__mdiff+0x2e>
 800cc94:	4b3a      	ldr	r3, [pc, #232]	; (800cd80 <__mdiff+0x10c>)
 800cc96:	4602      	mov	r2, r0
 800cc98:	f240 2132 	movw	r1, #562	; 0x232
 800cc9c:	4839      	ldr	r0, [pc, #228]	; (800cd84 <__mdiff+0x110>)
 800cc9e:	f000 fc7d 	bl	800d59c <__assert_func>
 800cca2:	2301      	movs	r3, #1
 800cca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	bfa4      	itt	ge
 800ccae:	4643      	movge	r3, r8
 800ccb0:	46a0      	movge	r8, r4
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ccb8:	bfa6      	itte	ge
 800ccba:	461c      	movge	r4, r3
 800ccbc:	2500      	movge	r5, #0
 800ccbe:	2501      	movlt	r5, #1
 800ccc0:	f7ff fcf0 	bl	800c6a4 <_Balloc>
 800ccc4:	b920      	cbnz	r0, 800ccd0 <__mdiff+0x5c>
 800ccc6:	4b2e      	ldr	r3, [pc, #184]	; (800cd80 <__mdiff+0x10c>)
 800ccc8:	4602      	mov	r2, r0
 800ccca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ccce:	e7e5      	b.n	800cc9c <__mdiff+0x28>
 800ccd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ccd4:	6926      	ldr	r6, [r4, #16]
 800ccd6:	60c5      	str	r5, [r0, #12]
 800ccd8:	f104 0914 	add.w	r9, r4, #20
 800ccdc:	f108 0514 	add.w	r5, r8, #20
 800cce0:	f100 0e14 	add.w	lr, r0, #20
 800cce4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cce8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ccec:	f108 0210 	add.w	r2, r8, #16
 800ccf0:	46f2      	mov	sl, lr
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ccf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ccfc:	fa1f f883 	uxth.w	r8, r3
 800cd00:	fa11 f18b 	uxtah	r1, r1, fp
 800cd04:	0c1b      	lsrs	r3, r3, #16
 800cd06:	eba1 0808 	sub.w	r8, r1, r8
 800cd0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd12:	fa1f f888 	uxth.w	r8, r8
 800cd16:	1419      	asrs	r1, r3, #16
 800cd18:	454e      	cmp	r6, r9
 800cd1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd1e:	f84a 3b04 	str.w	r3, [sl], #4
 800cd22:	d8e7      	bhi.n	800ccf4 <__mdiff+0x80>
 800cd24:	1b33      	subs	r3, r6, r4
 800cd26:	3b15      	subs	r3, #21
 800cd28:	f023 0303 	bic.w	r3, r3, #3
 800cd2c:	3304      	adds	r3, #4
 800cd2e:	3415      	adds	r4, #21
 800cd30:	42a6      	cmp	r6, r4
 800cd32:	bf38      	it	cc
 800cd34:	2304      	movcc	r3, #4
 800cd36:	441d      	add	r5, r3
 800cd38:	4473      	add	r3, lr
 800cd3a:	469e      	mov	lr, r3
 800cd3c:	462e      	mov	r6, r5
 800cd3e:	4566      	cmp	r6, ip
 800cd40:	d30e      	bcc.n	800cd60 <__mdiff+0xec>
 800cd42:	f10c 0203 	add.w	r2, ip, #3
 800cd46:	1b52      	subs	r2, r2, r5
 800cd48:	f022 0203 	bic.w	r2, r2, #3
 800cd4c:	3d03      	subs	r5, #3
 800cd4e:	45ac      	cmp	ip, r5
 800cd50:	bf38      	it	cc
 800cd52:	2200      	movcc	r2, #0
 800cd54:	441a      	add	r2, r3
 800cd56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cd5a:	b17b      	cbz	r3, 800cd7c <__mdiff+0x108>
 800cd5c:	6107      	str	r7, [r0, #16]
 800cd5e:	e7a3      	b.n	800cca8 <__mdiff+0x34>
 800cd60:	f856 8b04 	ldr.w	r8, [r6], #4
 800cd64:	fa11 f288 	uxtah	r2, r1, r8
 800cd68:	1414      	asrs	r4, r2, #16
 800cd6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cd6e:	b292      	uxth	r2, r2
 800cd70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cd74:	f84e 2b04 	str.w	r2, [lr], #4
 800cd78:	1421      	asrs	r1, r4, #16
 800cd7a:	e7e0      	b.n	800cd3e <__mdiff+0xca>
 800cd7c:	3f01      	subs	r7, #1
 800cd7e:	e7ea      	b.n	800cd56 <__mdiff+0xe2>
 800cd80:	0800e360 	.word	0x0800e360
 800cd84:	0800e3ec 	.word	0x0800e3ec

0800cd88 <__ulp>:
 800cd88:	b082      	sub	sp, #8
 800cd8a:	ed8d 0b00 	vstr	d0, [sp]
 800cd8e:	9b01      	ldr	r3, [sp, #4]
 800cd90:	4912      	ldr	r1, [pc, #72]	; (800cddc <__ulp+0x54>)
 800cd92:	4019      	ands	r1, r3
 800cd94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cd98:	2900      	cmp	r1, #0
 800cd9a:	dd05      	ble.n	800cda8 <__ulp+0x20>
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	ec43 2b10 	vmov	d0, r2, r3
 800cda4:	b002      	add	sp, #8
 800cda6:	4770      	bx	lr
 800cda8:	4249      	negs	r1, r1
 800cdaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cdae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	da04      	bge.n	800cdc6 <__ulp+0x3e>
 800cdbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cdc0:	fa41 f300 	asr.w	r3, r1, r0
 800cdc4:	e7ec      	b.n	800cda0 <__ulp+0x18>
 800cdc6:	f1a0 0114 	sub.w	r1, r0, #20
 800cdca:	291e      	cmp	r1, #30
 800cdcc:	bfda      	itte	le
 800cdce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cdd2:	fa20 f101 	lsrle.w	r1, r0, r1
 800cdd6:	2101      	movgt	r1, #1
 800cdd8:	460a      	mov	r2, r1
 800cdda:	e7e1      	b.n	800cda0 <__ulp+0x18>
 800cddc:	7ff00000 	.word	0x7ff00000

0800cde0 <__b2d>:
 800cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde2:	6905      	ldr	r5, [r0, #16]
 800cde4:	f100 0714 	add.w	r7, r0, #20
 800cde8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cdec:	1f2e      	subs	r6, r5, #4
 800cdee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7ff fd48 	bl	800c888 <__hi0bits>
 800cdf8:	f1c0 0320 	rsb	r3, r0, #32
 800cdfc:	280a      	cmp	r0, #10
 800cdfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ce7c <__b2d+0x9c>
 800ce02:	600b      	str	r3, [r1, #0]
 800ce04:	dc14      	bgt.n	800ce30 <__b2d+0x50>
 800ce06:	f1c0 0e0b 	rsb	lr, r0, #11
 800ce0a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ce0e:	42b7      	cmp	r7, r6
 800ce10:	ea41 030c 	orr.w	r3, r1, ip
 800ce14:	bf34      	ite	cc
 800ce16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce1a:	2100      	movcs	r1, #0
 800ce1c:	3015      	adds	r0, #21
 800ce1e:	fa04 f000 	lsl.w	r0, r4, r0
 800ce22:	fa21 f10e 	lsr.w	r1, r1, lr
 800ce26:	ea40 0201 	orr.w	r2, r0, r1
 800ce2a:	ec43 2b10 	vmov	d0, r2, r3
 800ce2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce30:	42b7      	cmp	r7, r6
 800ce32:	bf3a      	itte	cc
 800ce34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce38:	f1a5 0608 	subcc.w	r6, r5, #8
 800ce3c:	2100      	movcs	r1, #0
 800ce3e:	380b      	subs	r0, #11
 800ce40:	d017      	beq.n	800ce72 <__b2d+0x92>
 800ce42:	f1c0 0c20 	rsb	ip, r0, #32
 800ce46:	fa04 f500 	lsl.w	r5, r4, r0
 800ce4a:	42be      	cmp	r6, r7
 800ce4c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ce50:	ea45 0504 	orr.w	r5, r5, r4
 800ce54:	bf8c      	ite	hi
 800ce56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ce5a:	2400      	movls	r4, #0
 800ce5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ce60:	fa01 f000 	lsl.w	r0, r1, r0
 800ce64:	fa24 f40c 	lsr.w	r4, r4, ip
 800ce68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ce6c:	ea40 0204 	orr.w	r2, r0, r4
 800ce70:	e7db      	b.n	800ce2a <__b2d+0x4a>
 800ce72:	ea44 030c 	orr.w	r3, r4, ip
 800ce76:	460a      	mov	r2, r1
 800ce78:	e7d7      	b.n	800ce2a <__b2d+0x4a>
 800ce7a:	bf00      	nop
 800ce7c:	3ff00000 	.word	0x3ff00000

0800ce80 <__d2b>:
 800ce80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce84:	4689      	mov	r9, r1
 800ce86:	2101      	movs	r1, #1
 800ce88:	ec57 6b10 	vmov	r6, r7, d0
 800ce8c:	4690      	mov	r8, r2
 800ce8e:	f7ff fc09 	bl	800c6a4 <_Balloc>
 800ce92:	4604      	mov	r4, r0
 800ce94:	b930      	cbnz	r0, 800cea4 <__d2b+0x24>
 800ce96:	4602      	mov	r2, r0
 800ce98:	4b25      	ldr	r3, [pc, #148]	; (800cf30 <__d2b+0xb0>)
 800ce9a:	4826      	ldr	r0, [pc, #152]	; (800cf34 <__d2b+0xb4>)
 800ce9c:	f240 310a 	movw	r1, #778	; 0x30a
 800cea0:	f000 fb7c 	bl	800d59c <__assert_func>
 800cea4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ceac:	bb35      	cbnz	r5, 800cefc <__d2b+0x7c>
 800ceae:	2e00      	cmp	r6, #0
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	d028      	beq.n	800cf06 <__d2b+0x86>
 800ceb4:	4668      	mov	r0, sp
 800ceb6:	9600      	str	r6, [sp, #0]
 800ceb8:	f7ff fd06 	bl	800c8c8 <__lo0bits>
 800cebc:	9900      	ldr	r1, [sp, #0]
 800cebe:	b300      	cbz	r0, 800cf02 <__d2b+0x82>
 800cec0:	9a01      	ldr	r2, [sp, #4]
 800cec2:	f1c0 0320 	rsb	r3, r0, #32
 800cec6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceca:	430b      	orrs	r3, r1
 800cecc:	40c2      	lsrs	r2, r0
 800cece:	6163      	str	r3, [r4, #20]
 800ced0:	9201      	str	r2, [sp, #4]
 800ced2:	9b01      	ldr	r3, [sp, #4]
 800ced4:	61a3      	str	r3, [r4, #24]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bf14      	ite	ne
 800ceda:	2202      	movne	r2, #2
 800cedc:	2201      	moveq	r2, #1
 800cede:	6122      	str	r2, [r4, #16]
 800cee0:	b1d5      	cbz	r5, 800cf18 <__d2b+0x98>
 800cee2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cee6:	4405      	add	r5, r0
 800cee8:	f8c9 5000 	str.w	r5, [r9]
 800ceec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cef0:	f8c8 0000 	str.w	r0, [r8]
 800cef4:	4620      	mov	r0, r4
 800cef6:	b003      	add	sp, #12
 800cef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf00:	e7d5      	b.n	800ceae <__d2b+0x2e>
 800cf02:	6161      	str	r1, [r4, #20]
 800cf04:	e7e5      	b.n	800ced2 <__d2b+0x52>
 800cf06:	a801      	add	r0, sp, #4
 800cf08:	f7ff fcde 	bl	800c8c8 <__lo0bits>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	6163      	str	r3, [r4, #20]
 800cf10:	2201      	movs	r2, #1
 800cf12:	6122      	str	r2, [r4, #16]
 800cf14:	3020      	adds	r0, #32
 800cf16:	e7e3      	b.n	800cee0 <__d2b+0x60>
 800cf18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf20:	f8c9 0000 	str.w	r0, [r9]
 800cf24:	6918      	ldr	r0, [r3, #16]
 800cf26:	f7ff fcaf 	bl	800c888 <__hi0bits>
 800cf2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf2e:	e7df      	b.n	800cef0 <__d2b+0x70>
 800cf30:	0800e360 	.word	0x0800e360
 800cf34:	0800e3ec 	.word	0x0800e3ec

0800cf38 <__ratio>:
 800cf38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	4688      	mov	r8, r1
 800cf3e:	4669      	mov	r1, sp
 800cf40:	4681      	mov	r9, r0
 800cf42:	f7ff ff4d 	bl	800cde0 <__b2d>
 800cf46:	a901      	add	r1, sp, #4
 800cf48:	4640      	mov	r0, r8
 800cf4a:	ec55 4b10 	vmov	r4, r5, d0
 800cf4e:	f7ff ff47 	bl	800cde0 <__b2d>
 800cf52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf5a:	eba3 0c02 	sub.w	ip, r3, r2
 800cf5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf62:	1a9b      	subs	r3, r3, r2
 800cf64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cf68:	ec51 0b10 	vmov	r0, r1, d0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	bfd6      	itet	le
 800cf70:	460a      	movle	r2, r1
 800cf72:	462a      	movgt	r2, r5
 800cf74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf78:	468b      	mov	fp, r1
 800cf7a:	462f      	mov	r7, r5
 800cf7c:	bfd4      	ite	le
 800cf7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cf82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf86:	4620      	mov	r0, r4
 800cf88:	ee10 2a10 	vmov	r2, s0
 800cf8c:	465b      	mov	r3, fp
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fc64 	bl	800085c <__aeabi_ddiv>
 800cf94:	ec41 0b10 	vmov	d0, r0, r1
 800cf98:	b003      	add	sp, #12
 800cf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf9e <__copybits>:
 800cf9e:	3901      	subs	r1, #1
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	1149      	asrs	r1, r1, #5
 800cfa4:	6914      	ldr	r4, [r2, #16]
 800cfa6:	3101      	adds	r1, #1
 800cfa8:	f102 0314 	add.w	r3, r2, #20
 800cfac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cfb4:	1f05      	subs	r5, r0, #4
 800cfb6:	42a3      	cmp	r3, r4
 800cfb8:	d30c      	bcc.n	800cfd4 <__copybits+0x36>
 800cfba:	1aa3      	subs	r3, r4, r2
 800cfbc:	3b11      	subs	r3, #17
 800cfbe:	f023 0303 	bic.w	r3, r3, #3
 800cfc2:	3211      	adds	r2, #17
 800cfc4:	42a2      	cmp	r2, r4
 800cfc6:	bf88      	it	hi
 800cfc8:	2300      	movhi	r3, #0
 800cfca:	4418      	add	r0, r3
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4288      	cmp	r0, r1
 800cfd0:	d305      	bcc.n	800cfde <__copybits+0x40>
 800cfd2:	bd70      	pop	{r4, r5, r6, pc}
 800cfd4:	f853 6b04 	ldr.w	r6, [r3], #4
 800cfd8:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfdc:	e7eb      	b.n	800cfb6 <__copybits+0x18>
 800cfde:	f840 3b04 	str.w	r3, [r0], #4
 800cfe2:	e7f4      	b.n	800cfce <__copybits+0x30>

0800cfe4 <__any_on>:
 800cfe4:	f100 0214 	add.w	r2, r0, #20
 800cfe8:	6900      	ldr	r0, [r0, #16]
 800cfea:	114b      	asrs	r3, r1, #5
 800cfec:	4298      	cmp	r0, r3
 800cfee:	b510      	push	{r4, lr}
 800cff0:	db11      	blt.n	800d016 <__any_on+0x32>
 800cff2:	dd0a      	ble.n	800d00a <__any_on+0x26>
 800cff4:	f011 011f 	ands.w	r1, r1, #31
 800cff8:	d007      	beq.n	800d00a <__any_on+0x26>
 800cffa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cffe:	fa24 f001 	lsr.w	r0, r4, r1
 800d002:	fa00 f101 	lsl.w	r1, r0, r1
 800d006:	428c      	cmp	r4, r1
 800d008:	d10b      	bne.n	800d022 <__any_on+0x3e>
 800d00a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d00e:	4293      	cmp	r3, r2
 800d010:	d803      	bhi.n	800d01a <__any_on+0x36>
 800d012:	2000      	movs	r0, #0
 800d014:	bd10      	pop	{r4, pc}
 800d016:	4603      	mov	r3, r0
 800d018:	e7f7      	b.n	800d00a <__any_on+0x26>
 800d01a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d01e:	2900      	cmp	r1, #0
 800d020:	d0f5      	beq.n	800d00e <__any_on+0x2a>
 800d022:	2001      	movs	r0, #1
 800d024:	e7f6      	b.n	800d014 <__any_on+0x30>

0800d026 <_calloc_r>:
 800d026:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d028:	fba1 2402 	umull	r2, r4, r1, r2
 800d02c:	b94c      	cbnz	r4, 800d042 <_calloc_r+0x1c>
 800d02e:	4611      	mov	r1, r2
 800d030:	9201      	str	r2, [sp, #4]
 800d032:	f000 f87b 	bl	800d12c <_malloc_r>
 800d036:	9a01      	ldr	r2, [sp, #4]
 800d038:	4605      	mov	r5, r0
 800d03a:	b930      	cbnz	r0, 800d04a <_calloc_r+0x24>
 800d03c:	4628      	mov	r0, r5
 800d03e:	b003      	add	sp, #12
 800d040:	bd30      	pop	{r4, r5, pc}
 800d042:	220c      	movs	r2, #12
 800d044:	6002      	str	r2, [r0, #0]
 800d046:	2500      	movs	r5, #0
 800d048:	e7f8      	b.n	800d03c <_calloc_r+0x16>
 800d04a:	4621      	mov	r1, r4
 800d04c:	f7fc fbc0 	bl	80097d0 <memset>
 800d050:	e7f4      	b.n	800d03c <_calloc_r+0x16>
	...

0800d054 <_free_r>:
 800d054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d056:	2900      	cmp	r1, #0
 800d058:	d044      	beq.n	800d0e4 <_free_r+0x90>
 800d05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d05e:	9001      	str	r0, [sp, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	f1a1 0404 	sub.w	r4, r1, #4
 800d066:	bfb8      	it	lt
 800d068:	18e4      	addlt	r4, r4, r3
 800d06a:	f000 fae1 	bl	800d630 <__malloc_lock>
 800d06e:	4a1e      	ldr	r2, [pc, #120]	; (800d0e8 <_free_r+0x94>)
 800d070:	9801      	ldr	r0, [sp, #4]
 800d072:	6813      	ldr	r3, [r2, #0]
 800d074:	b933      	cbnz	r3, 800d084 <_free_r+0x30>
 800d076:	6063      	str	r3, [r4, #4]
 800d078:	6014      	str	r4, [r2, #0]
 800d07a:	b003      	add	sp, #12
 800d07c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d080:	f000 badc 	b.w	800d63c <__malloc_unlock>
 800d084:	42a3      	cmp	r3, r4
 800d086:	d908      	bls.n	800d09a <_free_r+0x46>
 800d088:	6825      	ldr	r5, [r4, #0]
 800d08a:	1961      	adds	r1, r4, r5
 800d08c:	428b      	cmp	r3, r1
 800d08e:	bf01      	itttt	eq
 800d090:	6819      	ldreq	r1, [r3, #0]
 800d092:	685b      	ldreq	r3, [r3, #4]
 800d094:	1949      	addeq	r1, r1, r5
 800d096:	6021      	streq	r1, [r4, #0]
 800d098:	e7ed      	b.n	800d076 <_free_r+0x22>
 800d09a:	461a      	mov	r2, r3
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	b10b      	cbz	r3, 800d0a4 <_free_r+0x50>
 800d0a0:	42a3      	cmp	r3, r4
 800d0a2:	d9fa      	bls.n	800d09a <_free_r+0x46>
 800d0a4:	6811      	ldr	r1, [r2, #0]
 800d0a6:	1855      	adds	r5, r2, r1
 800d0a8:	42a5      	cmp	r5, r4
 800d0aa:	d10b      	bne.n	800d0c4 <_free_r+0x70>
 800d0ac:	6824      	ldr	r4, [r4, #0]
 800d0ae:	4421      	add	r1, r4
 800d0b0:	1854      	adds	r4, r2, r1
 800d0b2:	42a3      	cmp	r3, r4
 800d0b4:	6011      	str	r1, [r2, #0]
 800d0b6:	d1e0      	bne.n	800d07a <_free_r+0x26>
 800d0b8:	681c      	ldr	r4, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	6053      	str	r3, [r2, #4]
 800d0be:	4421      	add	r1, r4
 800d0c0:	6011      	str	r1, [r2, #0]
 800d0c2:	e7da      	b.n	800d07a <_free_r+0x26>
 800d0c4:	d902      	bls.n	800d0cc <_free_r+0x78>
 800d0c6:	230c      	movs	r3, #12
 800d0c8:	6003      	str	r3, [r0, #0]
 800d0ca:	e7d6      	b.n	800d07a <_free_r+0x26>
 800d0cc:	6825      	ldr	r5, [r4, #0]
 800d0ce:	1961      	adds	r1, r4, r5
 800d0d0:	428b      	cmp	r3, r1
 800d0d2:	bf04      	itt	eq
 800d0d4:	6819      	ldreq	r1, [r3, #0]
 800d0d6:	685b      	ldreq	r3, [r3, #4]
 800d0d8:	6063      	str	r3, [r4, #4]
 800d0da:	bf04      	itt	eq
 800d0dc:	1949      	addeq	r1, r1, r5
 800d0de:	6021      	streq	r1, [r4, #0]
 800d0e0:	6054      	str	r4, [r2, #4]
 800d0e2:	e7ca      	b.n	800d07a <_free_r+0x26>
 800d0e4:	b003      	add	sp, #12
 800d0e6:	bd30      	pop	{r4, r5, pc}
 800d0e8:	200018a8 	.word	0x200018a8

0800d0ec <sbrk_aligned>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	4e0e      	ldr	r6, [pc, #56]	; (800d128 <sbrk_aligned+0x3c>)
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	6831      	ldr	r1, [r6, #0]
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	b911      	cbnz	r1, 800d0fe <sbrk_aligned+0x12>
 800d0f8:	f000 fa1e 	bl	800d538 <_sbrk_r>
 800d0fc:	6030      	str	r0, [r6, #0]
 800d0fe:	4621      	mov	r1, r4
 800d100:	4628      	mov	r0, r5
 800d102:	f000 fa19 	bl	800d538 <_sbrk_r>
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	d00a      	beq.n	800d120 <sbrk_aligned+0x34>
 800d10a:	1cc4      	adds	r4, r0, #3
 800d10c:	f024 0403 	bic.w	r4, r4, #3
 800d110:	42a0      	cmp	r0, r4
 800d112:	d007      	beq.n	800d124 <sbrk_aligned+0x38>
 800d114:	1a21      	subs	r1, r4, r0
 800d116:	4628      	mov	r0, r5
 800d118:	f000 fa0e 	bl	800d538 <_sbrk_r>
 800d11c:	3001      	adds	r0, #1
 800d11e:	d101      	bne.n	800d124 <sbrk_aligned+0x38>
 800d120:	f04f 34ff 	mov.w	r4, #4294967295
 800d124:	4620      	mov	r0, r4
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	200018ac 	.word	0x200018ac

0800d12c <_malloc_r>:
 800d12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d130:	1ccd      	adds	r5, r1, #3
 800d132:	f025 0503 	bic.w	r5, r5, #3
 800d136:	3508      	adds	r5, #8
 800d138:	2d0c      	cmp	r5, #12
 800d13a:	bf38      	it	cc
 800d13c:	250c      	movcc	r5, #12
 800d13e:	2d00      	cmp	r5, #0
 800d140:	4607      	mov	r7, r0
 800d142:	db01      	blt.n	800d148 <_malloc_r+0x1c>
 800d144:	42a9      	cmp	r1, r5
 800d146:	d905      	bls.n	800d154 <_malloc_r+0x28>
 800d148:	230c      	movs	r3, #12
 800d14a:	603b      	str	r3, [r7, #0]
 800d14c:	2600      	movs	r6, #0
 800d14e:	4630      	mov	r0, r6
 800d150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d154:	4e2e      	ldr	r6, [pc, #184]	; (800d210 <_malloc_r+0xe4>)
 800d156:	f000 fa6b 	bl	800d630 <__malloc_lock>
 800d15a:	6833      	ldr	r3, [r6, #0]
 800d15c:	461c      	mov	r4, r3
 800d15e:	bb34      	cbnz	r4, 800d1ae <_malloc_r+0x82>
 800d160:	4629      	mov	r1, r5
 800d162:	4638      	mov	r0, r7
 800d164:	f7ff ffc2 	bl	800d0ec <sbrk_aligned>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	4604      	mov	r4, r0
 800d16c:	d14d      	bne.n	800d20a <_malloc_r+0xde>
 800d16e:	6834      	ldr	r4, [r6, #0]
 800d170:	4626      	mov	r6, r4
 800d172:	2e00      	cmp	r6, #0
 800d174:	d140      	bne.n	800d1f8 <_malloc_r+0xcc>
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	4631      	mov	r1, r6
 800d17a:	4638      	mov	r0, r7
 800d17c:	eb04 0803 	add.w	r8, r4, r3
 800d180:	f000 f9da 	bl	800d538 <_sbrk_r>
 800d184:	4580      	cmp	r8, r0
 800d186:	d13a      	bne.n	800d1fe <_malloc_r+0xd2>
 800d188:	6821      	ldr	r1, [r4, #0]
 800d18a:	3503      	adds	r5, #3
 800d18c:	1a6d      	subs	r5, r5, r1
 800d18e:	f025 0503 	bic.w	r5, r5, #3
 800d192:	3508      	adds	r5, #8
 800d194:	2d0c      	cmp	r5, #12
 800d196:	bf38      	it	cc
 800d198:	250c      	movcc	r5, #12
 800d19a:	4629      	mov	r1, r5
 800d19c:	4638      	mov	r0, r7
 800d19e:	f7ff ffa5 	bl	800d0ec <sbrk_aligned>
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	d02b      	beq.n	800d1fe <_malloc_r+0xd2>
 800d1a6:	6823      	ldr	r3, [r4, #0]
 800d1a8:	442b      	add	r3, r5
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	e00e      	b.n	800d1cc <_malloc_r+0xa0>
 800d1ae:	6822      	ldr	r2, [r4, #0]
 800d1b0:	1b52      	subs	r2, r2, r5
 800d1b2:	d41e      	bmi.n	800d1f2 <_malloc_r+0xc6>
 800d1b4:	2a0b      	cmp	r2, #11
 800d1b6:	d916      	bls.n	800d1e6 <_malloc_r+0xba>
 800d1b8:	1961      	adds	r1, r4, r5
 800d1ba:	42a3      	cmp	r3, r4
 800d1bc:	6025      	str	r5, [r4, #0]
 800d1be:	bf18      	it	ne
 800d1c0:	6059      	strne	r1, [r3, #4]
 800d1c2:	6863      	ldr	r3, [r4, #4]
 800d1c4:	bf08      	it	eq
 800d1c6:	6031      	streq	r1, [r6, #0]
 800d1c8:	5162      	str	r2, [r4, r5]
 800d1ca:	604b      	str	r3, [r1, #4]
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	f104 060b 	add.w	r6, r4, #11
 800d1d2:	f000 fa33 	bl	800d63c <__malloc_unlock>
 800d1d6:	f026 0607 	bic.w	r6, r6, #7
 800d1da:	1d23      	adds	r3, r4, #4
 800d1dc:	1af2      	subs	r2, r6, r3
 800d1de:	d0b6      	beq.n	800d14e <_malloc_r+0x22>
 800d1e0:	1b9b      	subs	r3, r3, r6
 800d1e2:	50a3      	str	r3, [r4, r2]
 800d1e4:	e7b3      	b.n	800d14e <_malloc_r+0x22>
 800d1e6:	6862      	ldr	r2, [r4, #4]
 800d1e8:	42a3      	cmp	r3, r4
 800d1ea:	bf0c      	ite	eq
 800d1ec:	6032      	streq	r2, [r6, #0]
 800d1ee:	605a      	strne	r2, [r3, #4]
 800d1f0:	e7ec      	b.n	800d1cc <_malloc_r+0xa0>
 800d1f2:	4623      	mov	r3, r4
 800d1f4:	6864      	ldr	r4, [r4, #4]
 800d1f6:	e7b2      	b.n	800d15e <_malloc_r+0x32>
 800d1f8:	4634      	mov	r4, r6
 800d1fa:	6876      	ldr	r6, [r6, #4]
 800d1fc:	e7b9      	b.n	800d172 <_malloc_r+0x46>
 800d1fe:	230c      	movs	r3, #12
 800d200:	603b      	str	r3, [r7, #0]
 800d202:	4638      	mov	r0, r7
 800d204:	f000 fa1a 	bl	800d63c <__malloc_unlock>
 800d208:	e7a1      	b.n	800d14e <_malloc_r+0x22>
 800d20a:	6025      	str	r5, [r4, #0]
 800d20c:	e7de      	b.n	800d1cc <_malloc_r+0xa0>
 800d20e:	bf00      	nop
 800d210:	200018a8 	.word	0x200018a8

0800d214 <_realloc_r>:
 800d214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d218:	4680      	mov	r8, r0
 800d21a:	4614      	mov	r4, r2
 800d21c:	460e      	mov	r6, r1
 800d21e:	b921      	cbnz	r1, 800d22a <_realloc_r+0x16>
 800d220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d224:	4611      	mov	r1, r2
 800d226:	f7ff bf81 	b.w	800d12c <_malloc_r>
 800d22a:	b92a      	cbnz	r2, 800d238 <_realloc_r+0x24>
 800d22c:	f7ff ff12 	bl	800d054 <_free_r>
 800d230:	4625      	mov	r5, r4
 800d232:	4628      	mov	r0, r5
 800d234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d238:	f000 fa06 	bl	800d648 <_malloc_usable_size_r>
 800d23c:	4284      	cmp	r4, r0
 800d23e:	4607      	mov	r7, r0
 800d240:	d802      	bhi.n	800d248 <_realloc_r+0x34>
 800d242:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d246:	d812      	bhi.n	800d26e <_realloc_r+0x5a>
 800d248:	4621      	mov	r1, r4
 800d24a:	4640      	mov	r0, r8
 800d24c:	f7ff ff6e 	bl	800d12c <_malloc_r>
 800d250:	4605      	mov	r5, r0
 800d252:	2800      	cmp	r0, #0
 800d254:	d0ed      	beq.n	800d232 <_realloc_r+0x1e>
 800d256:	42bc      	cmp	r4, r7
 800d258:	4622      	mov	r2, r4
 800d25a:	4631      	mov	r1, r6
 800d25c:	bf28      	it	cs
 800d25e:	463a      	movcs	r2, r7
 800d260:	f7ff fa12 	bl	800c688 <memcpy>
 800d264:	4631      	mov	r1, r6
 800d266:	4640      	mov	r0, r8
 800d268:	f7ff fef4 	bl	800d054 <_free_r>
 800d26c:	e7e1      	b.n	800d232 <_realloc_r+0x1e>
 800d26e:	4635      	mov	r5, r6
 800d270:	e7df      	b.n	800d232 <_realloc_r+0x1e>

0800d272 <__ssputs_r>:
 800d272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d276:	688e      	ldr	r6, [r1, #8]
 800d278:	429e      	cmp	r6, r3
 800d27a:	4682      	mov	sl, r0
 800d27c:	460c      	mov	r4, r1
 800d27e:	4690      	mov	r8, r2
 800d280:	461f      	mov	r7, r3
 800d282:	d838      	bhi.n	800d2f6 <__ssputs_r+0x84>
 800d284:	898a      	ldrh	r2, [r1, #12]
 800d286:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d28a:	d032      	beq.n	800d2f2 <__ssputs_r+0x80>
 800d28c:	6825      	ldr	r5, [r4, #0]
 800d28e:	6909      	ldr	r1, [r1, #16]
 800d290:	eba5 0901 	sub.w	r9, r5, r1
 800d294:	6965      	ldr	r5, [r4, #20]
 800d296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d29a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d29e:	3301      	adds	r3, #1
 800d2a0:	444b      	add	r3, r9
 800d2a2:	106d      	asrs	r5, r5, #1
 800d2a4:	429d      	cmp	r5, r3
 800d2a6:	bf38      	it	cc
 800d2a8:	461d      	movcc	r5, r3
 800d2aa:	0553      	lsls	r3, r2, #21
 800d2ac:	d531      	bpl.n	800d312 <__ssputs_r+0xa0>
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	f7ff ff3c 	bl	800d12c <_malloc_r>
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	b950      	cbnz	r0, 800d2ce <__ssputs_r+0x5c>
 800d2b8:	230c      	movs	r3, #12
 800d2ba:	f8ca 3000 	str.w	r3, [sl]
 800d2be:	89a3      	ldrh	r3, [r4, #12]
 800d2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ce:	6921      	ldr	r1, [r4, #16]
 800d2d0:	464a      	mov	r2, r9
 800d2d2:	f7ff f9d9 	bl	800c688 <memcpy>
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2e0:	81a3      	strh	r3, [r4, #12]
 800d2e2:	6126      	str	r6, [r4, #16]
 800d2e4:	6165      	str	r5, [r4, #20]
 800d2e6:	444e      	add	r6, r9
 800d2e8:	eba5 0509 	sub.w	r5, r5, r9
 800d2ec:	6026      	str	r6, [r4, #0]
 800d2ee:	60a5      	str	r5, [r4, #8]
 800d2f0:	463e      	mov	r6, r7
 800d2f2:	42be      	cmp	r6, r7
 800d2f4:	d900      	bls.n	800d2f8 <__ssputs_r+0x86>
 800d2f6:	463e      	mov	r6, r7
 800d2f8:	6820      	ldr	r0, [r4, #0]
 800d2fa:	4632      	mov	r2, r6
 800d2fc:	4641      	mov	r1, r8
 800d2fe:	f000 f97d 	bl	800d5fc <memmove>
 800d302:	68a3      	ldr	r3, [r4, #8]
 800d304:	1b9b      	subs	r3, r3, r6
 800d306:	60a3      	str	r3, [r4, #8]
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	4433      	add	r3, r6
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	2000      	movs	r0, #0
 800d310:	e7db      	b.n	800d2ca <__ssputs_r+0x58>
 800d312:	462a      	mov	r2, r5
 800d314:	f7ff ff7e 	bl	800d214 <_realloc_r>
 800d318:	4606      	mov	r6, r0
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d1e1      	bne.n	800d2e2 <__ssputs_r+0x70>
 800d31e:	6921      	ldr	r1, [r4, #16]
 800d320:	4650      	mov	r0, sl
 800d322:	f7ff fe97 	bl	800d054 <_free_r>
 800d326:	e7c7      	b.n	800d2b8 <__ssputs_r+0x46>

0800d328 <_svfiprintf_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	4698      	mov	r8, r3
 800d32e:	898b      	ldrh	r3, [r1, #12]
 800d330:	061b      	lsls	r3, r3, #24
 800d332:	b09d      	sub	sp, #116	; 0x74
 800d334:	4607      	mov	r7, r0
 800d336:	460d      	mov	r5, r1
 800d338:	4614      	mov	r4, r2
 800d33a:	d50e      	bpl.n	800d35a <_svfiprintf_r+0x32>
 800d33c:	690b      	ldr	r3, [r1, #16]
 800d33e:	b963      	cbnz	r3, 800d35a <_svfiprintf_r+0x32>
 800d340:	2140      	movs	r1, #64	; 0x40
 800d342:	f7ff fef3 	bl	800d12c <_malloc_r>
 800d346:	6028      	str	r0, [r5, #0]
 800d348:	6128      	str	r0, [r5, #16]
 800d34a:	b920      	cbnz	r0, 800d356 <_svfiprintf_r+0x2e>
 800d34c:	230c      	movs	r3, #12
 800d34e:	603b      	str	r3, [r7, #0]
 800d350:	f04f 30ff 	mov.w	r0, #4294967295
 800d354:	e0d1      	b.n	800d4fa <_svfiprintf_r+0x1d2>
 800d356:	2340      	movs	r3, #64	; 0x40
 800d358:	616b      	str	r3, [r5, #20]
 800d35a:	2300      	movs	r3, #0
 800d35c:	9309      	str	r3, [sp, #36]	; 0x24
 800d35e:	2320      	movs	r3, #32
 800d360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d364:	f8cd 800c 	str.w	r8, [sp, #12]
 800d368:	2330      	movs	r3, #48	; 0x30
 800d36a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d514 <_svfiprintf_r+0x1ec>
 800d36e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d372:	f04f 0901 	mov.w	r9, #1
 800d376:	4623      	mov	r3, r4
 800d378:	469a      	mov	sl, r3
 800d37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d37e:	b10a      	cbz	r2, 800d384 <_svfiprintf_r+0x5c>
 800d380:	2a25      	cmp	r2, #37	; 0x25
 800d382:	d1f9      	bne.n	800d378 <_svfiprintf_r+0x50>
 800d384:	ebba 0b04 	subs.w	fp, sl, r4
 800d388:	d00b      	beq.n	800d3a2 <_svfiprintf_r+0x7a>
 800d38a:	465b      	mov	r3, fp
 800d38c:	4622      	mov	r2, r4
 800d38e:	4629      	mov	r1, r5
 800d390:	4638      	mov	r0, r7
 800d392:	f7ff ff6e 	bl	800d272 <__ssputs_r>
 800d396:	3001      	adds	r0, #1
 800d398:	f000 80aa 	beq.w	800d4f0 <_svfiprintf_r+0x1c8>
 800d39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d39e:	445a      	add	r2, fp
 800d3a0:	9209      	str	r2, [sp, #36]	; 0x24
 800d3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f000 80a2 	beq.w	800d4f0 <_svfiprintf_r+0x1c8>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3b6:	f10a 0a01 	add.w	sl, sl, #1
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	9307      	str	r3, [sp, #28]
 800d3be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3c2:	931a      	str	r3, [sp, #104]	; 0x68
 800d3c4:	4654      	mov	r4, sl
 800d3c6:	2205      	movs	r2, #5
 800d3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3cc:	4851      	ldr	r0, [pc, #324]	; (800d514 <_svfiprintf_r+0x1ec>)
 800d3ce:	f7f2 ff0f 	bl	80001f0 <memchr>
 800d3d2:	9a04      	ldr	r2, [sp, #16]
 800d3d4:	b9d8      	cbnz	r0, 800d40e <_svfiprintf_r+0xe6>
 800d3d6:	06d0      	lsls	r0, r2, #27
 800d3d8:	bf44      	itt	mi
 800d3da:	2320      	movmi	r3, #32
 800d3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3e0:	0711      	lsls	r1, r2, #28
 800d3e2:	bf44      	itt	mi
 800d3e4:	232b      	movmi	r3, #43	; 0x2b
 800d3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800d3f0:	d015      	beq.n	800d41e <_svfiprintf_r+0xf6>
 800d3f2:	9a07      	ldr	r2, [sp, #28]
 800d3f4:	4654      	mov	r4, sl
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	f04f 0c0a 	mov.w	ip, #10
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d402:	3b30      	subs	r3, #48	; 0x30
 800d404:	2b09      	cmp	r3, #9
 800d406:	d94e      	bls.n	800d4a6 <_svfiprintf_r+0x17e>
 800d408:	b1b0      	cbz	r0, 800d438 <_svfiprintf_r+0x110>
 800d40a:	9207      	str	r2, [sp, #28]
 800d40c:	e014      	b.n	800d438 <_svfiprintf_r+0x110>
 800d40e:	eba0 0308 	sub.w	r3, r0, r8
 800d412:	fa09 f303 	lsl.w	r3, r9, r3
 800d416:	4313      	orrs	r3, r2
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	46a2      	mov	sl, r4
 800d41c:	e7d2      	b.n	800d3c4 <_svfiprintf_r+0x9c>
 800d41e:	9b03      	ldr	r3, [sp, #12]
 800d420:	1d19      	adds	r1, r3, #4
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	9103      	str	r1, [sp, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	bfbb      	ittet	lt
 800d42a:	425b      	neglt	r3, r3
 800d42c:	f042 0202 	orrlt.w	r2, r2, #2
 800d430:	9307      	strge	r3, [sp, #28]
 800d432:	9307      	strlt	r3, [sp, #28]
 800d434:	bfb8      	it	lt
 800d436:	9204      	strlt	r2, [sp, #16]
 800d438:	7823      	ldrb	r3, [r4, #0]
 800d43a:	2b2e      	cmp	r3, #46	; 0x2e
 800d43c:	d10c      	bne.n	800d458 <_svfiprintf_r+0x130>
 800d43e:	7863      	ldrb	r3, [r4, #1]
 800d440:	2b2a      	cmp	r3, #42	; 0x2a
 800d442:	d135      	bne.n	800d4b0 <_svfiprintf_r+0x188>
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	1d1a      	adds	r2, r3, #4
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	9203      	str	r2, [sp, #12]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bfb8      	it	lt
 800d450:	f04f 33ff 	movlt.w	r3, #4294967295
 800d454:	3402      	adds	r4, #2
 800d456:	9305      	str	r3, [sp, #20]
 800d458:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d524 <_svfiprintf_r+0x1fc>
 800d45c:	7821      	ldrb	r1, [r4, #0]
 800d45e:	2203      	movs	r2, #3
 800d460:	4650      	mov	r0, sl
 800d462:	f7f2 fec5 	bl	80001f0 <memchr>
 800d466:	b140      	cbz	r0, 800d47a <_svfiprintf_r+0x152>
 800d468:	2340      	movs	r3, #64	; 0x40
 800d46a:	eba0 000a 	sub.w	r0, r0, sl
 800d46e:	fa03 f000 	lsl.w	r0, r3, r0
 800d472:	9b04      	ldr	r3, [sp, #16]
 800d474:	4303      	orrs	r3, r0
 800d476:	3401      	adds	r4, #1
 800d478:	9304      	str	r3, [sp, #16]
 800d47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d47e:	4826      	ldr	r0, [pc, #152]	; (800d518 <_svfiprintf_r+0x1f0>)
 800d480:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d484:	2206      	movs	r2, #6
 800d486:	f7f2 feb3 	bl	80001f0 <memchr>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d038      	beq.n	800d500 <_svfiprintf_r+0x1d8>
 800d48e:	4b23      	ldr	r3, [pc, #140]	; (800d51c <_svfiprintf_r+0x1f4>)
 800d490:	bb1b      	cbnz	r3, 800d4da <_svfiprintf_r+0x1b2>
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	3307      	adds	r3, #7
 800d496:	f023 0307 	bic.w	r3, r3, #7
 800d49a:	3308      	adds	r3, #8
 800d49c:	9303      	str	r3, [sp, #12]
 800d49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a0:	4433      	add	r3, r6
 800d4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a4:	e767      	b.n	800d376 <_svfiprintf_r+0x4e>
 800d4a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	e7a5      	b.n	800d3fc <_svfiprintf_r+0xd4>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	3401      	adds	r4, #1
 800d4b4:	9305      	str	r3, [sp, #20]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f04f 0c0a 	mov.w	ip, #10
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c2:	3a30      	subs	r2, #48	; 0x30
 800d4c4:	2a09      	cmp	r2, #9
 800d4c6:	d903      	bls.n	800d4d0 <_svfiprintf_r+0x1a8>
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0c5      	beq.n	800d458 <_svfiprintf_r+0x130>
 800d4cc:	9105      	str	r1, [sp, #20]
 800d4ce:	e7c3      	b.n	800d458 <_svfiprintf_r+0x130>
 800d4d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e7f0      	b.n	800d4bc <_svfiprintf_r+0x194>
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	462a      	mov	r2, r5
 800d4e0:	4b0f      	ldr	r3, [pc, #60]	; (800d520 <_svfiprintf_r+0x1f8>)
 800d4e2:	a904      	add	r1, sp, #16
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	f7fc fa1b 	bl	8009920 <_printf_float>
 800d4ea:	1c42      	adds	r2, r0, #1
 800d4ec:	4606      	mov	r6, r0
 800d4ee:	d1d6      	bne.n	800d49e <_svfiprintf_r+0x176>
 800d4f0:	89ab      	ldrh	r3, [r5, #12]
 800d4f2:	065b      	lsls	r3, r3, #25
 800d4f4:	f53f af2c 	bmi.w	800d350 <_svfiprintf_r+0x28>
 800d4f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4fa:	b01d      	add	sp, #116	; 0x74
 800d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	462a      	mov	r2, r5
 800d506:	4b06      	ldr	r3, [pc, #24]	; (800d520 <_svfiprintf_r+0x1f8>)
 800d508:	a904      	add	r1, sp, #16
 800d50a:	4638      	mov	r0, r7
 800d50c:	f7fc fcac 	bl	8009e68 <_printf_i>
 800d510:	e7eb      	b.n	800d4ea <_svfiprintf_r+0x1c2>
 800d512:	bf00      	nop
 800d514:	0800e544 	.word	0x0800e544
 800d518:	0800e54e 	.word	0x0800e54e
 800d51c:	08009921 	.word	0x08009921
 800d520:	0800d273 	.word	0x0800d273
 800d524:	0800e54a 	.word	0x0800e54a

0800d528 <nan>:
 800d528:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d530 <nan+0x8>
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop
 800d530:	00000000 	.word	0x00000000
 800d534:	7ff80000 	.word	0x7ff80000

0800d538 <_sbrk_r>:
 800d538:	b538      	push	{r3, r4, r5, lr}
 800d53a:	4d06      	ldr	r5, [pc, #24]	; (800d554 <_sbrk_r+0x1c>)
 800d53c:	2300      	movs	r3, #0
 800d53e:	4604      	mov	r4, r0
 800d540:	4608      	mov	r0, r1
 800d542:	602b      	str	r3, [r5, #0]
 800d544:	f7f4 fa1c 	bl	8001980 <_sbrk>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d102      	bne.n	800d552 <_sbrk_r+0x1a>
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	b103      	cbz	r3, 800d552 <_sbrk_r+0x1a>
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	bd38      	pop	{r3, r4, r5, pc}
 800d554:	200018b0 	.word	0x200018b0

0800d558 <strncmp>:
 800d558:	b510      	push	{r4, lr}
 800d55a:	b17a      	cbz	r2, 800d57c <strncmp+0x24>
 800d55c:	4603      	mov	r3, r0
 800d55e:	3901      	subs	r1, #1
 800d560:	1884      	adds	r4, r0, r2
 800d562:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d566:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d56a:	4290      	cmp	r0, r2
 800d56c:	d101      	bne.n	800d572 <strncmp+0x1a>
 800d56e:	42a3      	cmp	r3, r4
 800d570:	d101      	bne.n	800d576 <strncmp+0x1e>
 800d572:	1a80      	subs	r0, r0, r2
 800d574:	bd10      	pop	{r4, pc}
 800d576:	2800      	cmp	r0, #0
 800d578:	d1f3      	bne.n	800d562 <strncmp+0xa>
 800d57a:	e7fa      	b.n	800d572 <strncmp+0x1a>
 800d57c:	4610      	mov	r0, r2
 800d57e:	e7f9      	b.n	800d574 <strncmp+0x1c>

0800d580 <__ascii_wctomb>:
 800d580:	b149      	cbz	r1, 800d596 <__ascii_wctomb+0x16>
 800d582:	2aff      	cmp	r2, #255	; 0xff
 800d584:	bf85      	ittet	hi
 800d586:	238a      	movhi	r3, #138	; 0x8a
 800d588:	6003      	strhi	r3, [r0, #0]
 800d58a:	700a      	strbls	r2, [r1, #0]
 800d58c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d590:	bf98      	it	ls
 800d592:	2001      	movls	r0, #1
 800d594:	4770      	bx	lr
 800d596:	4608      	mov	r0, r1
 800d598:	4770      	bx	lr
	...

0800d59c <__assert_func>:
 800d59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d59e:	4614      	mov	r4, r2
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <__assert_func+0x2c>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	68d8      	ldr	r0, [r3, #12]
 800d5aa:	b14c      	cbz	r4, 800d5c0 <__assert_func+0x24>
 800d5ac:	4b07      	ldr	r3, [pc, #28]	; (800d5cc <__assert_func+0x30>)
 800d5ae:	9100      	str	r1, [sp, #0]
 800d5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5b4:	4906      	ldr	r1, [pc, #24]	; (800d5d0 <__assert_func+0x34>)
 800d5b6:	462b      	mov	r3, r5
 800d5b8:	f000 f80e 	bl	800d5d8 <fiprintf>
 800d5bc:	f000 fa66 	bl	800da8c <abort>
 800d5c0:	4b04      	ldr	r3, [pc, #16]	; (800d5d4 <__assert_func+0x38>)
 800d5c2:	461c      	mov	r4, r3
 800d5c4:	e7f3      	b.n	800d5ae <__assert_func+0x12>
 800d5c6:	bf00      	nop
 800d5c8:	200000fc 	.word	0x200000fc
 800d5cc:	0800e555 	.word	0x0800e555
 800d5d0:	0800e562 	.word	0x0800e562
 800d5d4:	0800e590 	.word	0x0800e590

0800d5d8 <fiprintf>:
 800d5d8:	b40e      	push	{r1, r2, r3}
 800d5da:	b503      	push	{r0, r1, lr}
 800d5dc:	4601      	mov	r1, r0
 800d5de:	ab03      	add	r3, sp, #12
 800d5e0:	4805      	ldr	r0, [pc, #20]	; (800d5f8 <fiprintf+0x20>)
 800d5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e6:	6800      	ldr	r0, [r0, #0]
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	f000 f85f 	bl	800d6ac <_vfiprintf_r>
 800d5ee:	b002      	add	sp, #8
 800d5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5f4:	b003      	add	sp, #12
 800d5f6:	4770      	bx	lr
 800d5f8:	200000fc 	.word	0x200000fc

0800d5fc <memmove>:
 800d5fc:	4288      	cmp	r0, r1
 800d5fe:	b510      	push	{r4, lr}
 800d600:	eb01 0402 	add.w	r4, r1, r2
 800d604:	d902      	bls.n	800d60c <memmove+0x10>
 800d606:	4284      	cmp	r4, r0
 800d608:	4623      	mov	r3, r4
 800d60a:	d807      	bhi.n	800d61c <memmove+0x20>
 800d60c:	1e43      	subs	r3, r0, #1
 800d60e:	42a1      	cmp	r1, r4
 800d610:	d008      	beq.n	800d624 <memmove+0x28>
 800d612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d61a:	e7f8      	b.n	800d60e <memmove+0x12>
 800d61c:	4402      	add	r2, r0
 800d61e:	4601      	mov	r1, r0
 800d620:	428a      	cmp	r2, r1
 800d622:	d100      	bne.n	800d626 <memmove+0x2a>
 800d624:	bd10      	pop	{r4, pc}
 800d626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d62a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d62e:	e7f7      	b.n	800d620 <memmove+0x24>

0800d630 <__malloc_lock>:
 800d630:	4801      	ldr	r0, [pc, #4]	; (800d638 <__malloc_lock+0x8>)
 800d632:	f000 bbeb 	b.w	800de0c <__retarget_lock_acquire_recursive>
 800d636:	bf00      	nop
 800d638:	200018b4 	.word	0x200018b4

0800d63c <__malloc_unlock>:
 800d63c:	4801      	ldr	r0, [pc, #4]	; (800d644 <__malloc_unlock+0x8>)
 800d63e:	f000 bbe6 	b.w	800de0e <__retarget_lock_release_recursive>
 800d642:	bf00      	nop
 800d644:	200018b4 	.word	0x200018b4

0800d648 <_malloc_usable_size_r>:
 800d648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d64c:	1f18      	subs	r0, r3, #4
 800d64e:	2b00      	cmp	r3, #0
 800d650:	bfbc      	itt	lt
 800d652:	580b      	ldrlt	r3, [r1, r0]
 800d654:	18c0      	addlt	r0, r0, r3
 800d656:	4770      	bx	lr

0800d658 <__sfputc_r>:
 800d658:	6893      	ldr	r3, [r2, #8]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	b410      	push	{r4}
 800d660:	6093      	str	r3, [r2, #8]
 800d662:	da08      	bge.n	800d676 <__sfputc_r+0x1e>
 800d664:	6994      	ldr	r4, [r2, #24]
 800d666:	42a3      	cmp	r3, r4
 800d668:	db01      	blt.n	800d66e <__sfputc_r+0x16>
 800d66a:	290a      	cmp	r1, #10
 800d66c:	d103      	bne.n	800d676 <__sfputc_r+0x1e>
 800d66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d672:	f000 b94b 	b.w	800d90c <__swbuf_r>
 800d676:	6813      	ldr	r3, [r2, #0]
 800d678:	1c58      	adds	r0, r3, #1
 800d67a:	6010      	str	r0, [r2, #0]
 800d67c:	7019      	strb	r1, [r3, #0]
 800d67e:	4608      	mov	r0, r1
 800d680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <__sfputs_r>:
 800d686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d688:	4606      	mov	r6, r0
 800d68a:	460f      	mov	r7, r1
 800d68c:	4614      	mov	r4, r2
 800d68e:	18d5      	adds	r5, r2, r3
 800d690:	42ac      	cmp	r4, r5
 800d692:	d101      	bne.n	800d698 <__sfputs_r+0x12>
 800d694:	2000      	movs	r0, #0
 800d696:	e007      	b.n	800d6a8 <__sfputs_r+0x22>
 800d698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d69c:	463a      	mov	r2, r7
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7ff ffda 	bl	800d658 <__sfputc_r>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d1f3      	bne.n	800d690 <__sfputs_r+0xa>
 800d6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6ac <_vfiprintf_r>:
 800d6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	b09d      	sub	sp, #116	; 0x74
 800d6b4:	4614      	mov	r4, r2
 800d6b6:	4698      	mov	r8, r3
 800d6b8:	4606      	mov	r6, r0
 800d6ba:	b118      	cbz	r0, 800d6c4 <_vfiprintf_r+0x18>
 800d6bc:	6983      	ldr	r3, [r0, #24]
 800d6be:	b90b      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x18>
 800d6c0:	f000 fb06 	bl	800dcd0 <__sinit>
 800d6c4:	4b89      	ldr	r3, [pc, #548]	; (800d8ec <_vfiprintf_r+0x240>)
 800d6c6:	429d      	cmp	r5, r3
 800d6c8:	d11b      	bne.n	800d702 <_vfiprintf_r+0x56>
 800d6ca:	6875      	ldr	r5, [r6, #4]
 800d6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6ce:	07d9      	lsls	r1, r3, #31
 800d6d0:	d405      	bmi.n	800d6de <_vfiprintf_r+0x32>
 800d6d2:	89ab      	ldrh	r3, [r5, #12]
 800d6d4:	059a      	lsls	r2, r3, #22
 800d6d6:	d402      	bmi.n	800d6de <_vfiprintf_r+0x32>
 800d6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6da:	f000 fb97 	bl	800de0c <__retarget_lock_acquire_recursive>
 800d6de:	89ab      	ldrh	r3, [r5, #12]
 800d6e0:	071b      	lsls	r3, r3, #28
 800d6e2:	d501      	bpl.n	800d6e8 <_vfiprintf_r+0x3c>
 800d6e4:	692b      	ldr	r3, [r5, #16]
 800d6e6:	b9eb      	cbnz	r3, 800d724 <_vfiprintf_r+0x78>
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f000 f960 	bl	800d9b0 <__swsetup_r>
 800d6f0:	b1c0      	cbz	r0, 800d724 <_vfiprintf_r+0x78>
 800d6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6f4:	07dc      	lsls	r4, r3, #31
 800d6f6:	d50e      	bpl.n	800d716 <_vfiprintf_r+0x6a>
 800d6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fc:	b01d      	add	sp, #116	; 0x74
 800d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d702:	4b7b      	ldr	r3, [pc, #492]	; (800d8f0 <_vfiprintf_r+0x244>)
 800d704:	429d      	cmp	r5, r3
 800d706:	d101      	bne.n	800d70c <_vfiprintf_r+0x60>
 800d708:	68b5      	ldr	r5, [r6, #8]
 800d70a:	e7df      	b.n	800d6cc <_vfiprintf_r+0x20>
 800d70c:	4b79      	ldr	r3, [pc, #484]	; (800d8f4 <_vfiprintf_r+0x248>)
 800d70e:	429d      	cmp	r5, r3
 800d710:	bf08      	it	eq
 800d712:	68f5      	ldreq	r5, [r6, #12]
 800d714:	e7da      	b.n	800d6cc <_vfiprintf_r+0x20>
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	0598      	lsls	r0, r3, #22
 800d71a:	d4ed      	bmi.n	800d6f8 <_vfiprintf_r+0x4c>
 800d71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d71e:	f000 fb76 	bl	800de0e <__retarget_lock_release_recursive>
 800d722:	e7e9      	b.n	800d6f8 <_vfiprintf_r+0x4c>
 800d724:	2300      	movs	r3, #0
 800d726:	9309      	str	r3, [sp, #36]	; 0x24
 800d728:	2320      	movs	r3, #32
 800d72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d732:	2330      	movs	r3, #48	; 0x30
 800d734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8f8 <_vfiprintf_r+0x24c>
 800d738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d73c:	f04f 0901 	mov.w	r9, #1
 800d740:	4623      	mov	r3, r4
 800d742:	469a      	mov	sl, r3
 800d744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d748:	b10a      	cbz	r2, 800d74e <_vfiprintf_r+0xa2>
 800d74a:	2a25      	cmp	r2, #37	; 0x25
 800d74c:	d1f9      	bne.n	800d742 <_vfiprintf_r+0x96>
 800d74e:	ebba 0b04 	subs.w	fp, sl, r4
 800d752:	d00b      	beq.n	800d76c <_vfiprintf_r+0xc0>
 800d754:	465b      	mov	r3, fp
 800d756:	4622      	mov	r2, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ff93 	bl	800d686 <__sfputs_r>
 800d760:	3001      	adds	r0, #1
 800d762:	f000 80aa 	beq.w	800d8ba <_vfiprintf_r+0x20e>
 800d766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d768:	445a      	add	r2, fp
 800d76a:	9209      	str	r2, [sp, #36]	; 0x24
 800d76c:	f89a 3000 	ldrb.w	r3, [sl]
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 80a2 	beq.w	800d8ba <_vfiprintf_r+0x20e>
 800d776:	2300      	movs	r3, #0
 800d778:	f04f 32ff 	mov.w	r2, #4294967295
 800d77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d780:	f10a 0a01 	add.w	sl, sl, #1
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	9307      	str	r3, [sp, #28]
 800d788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d78c:	931a      	str	r3, [sp, #104]	; 0x68
 800d78e:	4654      	mov	r4, sl
 800d790:	2205      	movs	r2, #5
 800d792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d796:	4858      	ldr	r0, [pc, #352]	; (800d8f8 <_vfiprintf_r+0x24c>)
 800d798:	f7f2 fd2a 	bl	80001f0 <memchr>
 800d79c:	9a04      	ldr	r2, [sp, #16]
 800d79e:	b9d8      	cbnz	r0, 800d7d8 <_vfiprintf_r+0x12c>
 800d7a0:	06d1      	lsls	r1, r2, #27
 800d7a2:	bf44      	itt	mi
 800d7a4:	2320      	movmi	r3, #32
 800d7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7aa:	0713      	lsls	r3, r2, #28
 800d7ac:	bf44      	itt	mi
 800d7ae:	232b      	movmi	r3, #43	; 0x2b
 800d7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ba:	d015      	beq.n	800d7e8 <_vfiprintf_r+0x13c>
 800d7bc:	9a07      	ldr	r2, [sp, #28]
 800d7be:	4654      	mov	r4, sl
 800d7c0:	2000      	movs	r0, #0
 800d7c2:	f04f 0c0a 	mov.w	ip, #10
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7cc:	3b30      	subs	r3, #48	; 0x30
 800d7ce:	2b09      	cmp	r3, #9
 800d7d0:	d94e      	bls.n	800d870 <_vfiprintf_r+0x1c4>
 800d7d2:	b1b0      	cbz	r0, 800d802 <_vfiprintf_r+0x156>
 800d7d4:	9207      	str	r2, [sp, #28]
 800d7d6:	e014      	b.n	800d802 <_vfiprintf_r+0x156>
 800d7d8:	eba0 0308 	sub.w	r3, r0, r8
 800d7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	46a2      	mov	sl, r4
 800d7e6:	e7d2      	b.n	800d78e <_vfiprintf_r+0xe2>
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	1d19      	adds	r1, r3, #4
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	9103      	str	r1, [sp, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfbb      	ittet	lt
 800d7f4:	425b      	neglt	r3, r3
 800d7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800d7fa:	9307      	strge	r3, [sp, #28]
 800d7fc:	9307      	strlt	r3, [sp, #28]
 800d7fe:	bfb8      	it	lt
 800d800:	9204      	strlt	r2, [sp, #16]
 800d802:	7823      	ldrb	r3, [r4, #0]
 800d804:	2b2e      	cmp	r3, #46	; 0x2e
 800d806:	d10c      	bne.n	800d822 <_vfiprintf_r+0x176>
 800d808:	7863      	ldrb	r3, [r4, #1]
 800d80a:	2b2a      	cmp	r3, #42	; 0x2a
 800d80c:	d135      	bne.n	800d87a <_vfiprintf_r+0x1ce>
 800d80e:	9b03      	ldr	r3, [sp, #12]
 800d810:	1d1a      	adds	r2, r3, #4
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	9203      	str	r2, [sp, #12]
 800d816:	2b00      	cmp	r3, #0
 800d818:	bfb8      	it	lt
 800d81a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d81e:	3402      	adds	r4, #2
 800d820:	9305      	str	r3, [sp, #20]
 800d822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d908 <_vfiprintf_r+0x25c>
 800d826:	7821      	ldrb	r1, [r4, #0]
 800d828:	2203      	movs	r2, #3
 800d82a:	4650      	mov	r0, sl
 800d82c:	f7f2 fce0 	bl	80001f0 <memchr>
 800d830:	b140      	cbz	r0, 800d844 <_vfiprintf_r+0x198>
 800d832:	2340      	movs	r3, #64	; 0x40
 800d834:	eba0 000a 	sub.w	r0, r0, sl
 800d838:	fa03 f000 	lsl.w	r0, r3, r0
 800d83c:	9b04      	ldr	r3, [sp, #16]
 800d83e:	4303      	orrs	r3, r0
 800d840:	3401      	adds	r4, #1
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d848:	482c      	ldr	r0, [pc, #176]	; (800d8fc <_vfiprintf_r+0x250>)
 800d84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d84e:	2206      	movs	r2, #6
 800d850:	f7f2 fcce 	bl	80001f0 <memchr>
 800d854:	2800      	cmp	r0, #0
 800d856:	d03f      	beq.n	800d8d8 <_vfiprintf_r+0x22c>
 800d858:	4b29      	ldr	r3, [pc, #164]	; (800d900 <_vfiprintf_r+0x254>)
 800d85a:	bb1b      	cbnz	r3, 800d8a4 <_vfiprintf_r+0x1f8>
 800d85c:	9b03      	ldr	r3, [sp, #12]
 800d85e:	3307      	adds	r3, #7
 800d860:	f023 0307 	bic.w	r3, r3, #7
 800d864:	3308      	adds	r3, #8
 800d866:	9303      	str	r3, [sp, #12]
 800d868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d86a:	443b      	add	r3, r7
 800d86c:	9309      	str	r3, [sp, #36]	; 0x24
 800d86e:	e767      	b.n	800d740 <_vfiprintf_r+0x94>
 800d870:	fb0c 3202 	mla	r2, ip, r2, r3
 800d874:	460c      	mov	r4, r1
 800d876:	2001      	movs	r0, #1
 800d878:	e7a5      	b.n	800d7c6 <_vfiprintf_r+0x11a>
 800d87a:	2300      	movs	r3, #0
 800d87c:	3401      	adds	r4, #1
 800d87e:	9305      	str	r3, [sp, #20]
 800d880:	4619      	mov	r1, r3
 800d882:	f04f 0c0a 	mov.w	ip, #10
 800d886:	4620      	mov	r0, r4
 800d888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d88c:	3a30      	subs	r2, #48	; 0x30
 800d88e:	2a09      	cmp	r2, #9
 800d890:	d903      	bls.n	800d89a <_vfiprintf_r+0x1ee>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0c5      	beq.n	800d822 <_vfiprintf_r+0x176>
 800d896:	9105      	str	r1, [sp, #20]
 800d898:	e7c3      	b.n	800d822 <_vfiprintf_r+0x176>
 800d89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d89e:	4604      	mov	r4, r0
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e7f0      	b.n	800d886 <_vfiprintf_r+0x1da>
 800d8a4:	ab03      	add	r3, sp, #12
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	462a      	mov	r2, r5
 800d8aa:	4b16      	ldr	r3, [pc, #88]	; (800d904 <_vfiprintf_r+0x258>)
 800d8ac:	a904      	add	r1, sp, #16
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f7fc f836 	bl	8009920 <_printf_float>
 800d8b4:	4607      	mov	r7, r0
 800d8b6:	1c78      	adds	r0, r7, #1
 800d8b8:	d1d6      	bne.n	800d868 <_vfiprintf_r+0x1bc>
 800d8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8bc:	07d9      	lsls	r1, r3, #31
 800d8be:	d405      	bmi.n	800d8cc <_vfiprintf_r+0x220>
 800d8c0:	89ab      	ldrh	r3, [r5, #12]
 800d8c2:	059a      	lsls	r2, r3, #22
 800d8c4:	d402      	bmi.n	800d8cc <_vfiprintf_r+0x220>
 800d8c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8c8:	f000 faa1 	bl	800de0e <__retarget_lock_release_recursive>
 800d8cc:	89ab      	ldrh	r3, [r5, #12]
 800d8ce:	065b      	lsls	r3, r3, #25
 800d8d0:	f53f af12 	bmi.w	800d6f8 <_vfiprintf_r+0x4c>
 800d8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8d6:	e711      	b.n	800d6fc <_vfiprintf_r+0x50>
 800d8d8:	ab03      	add	r3, sp, #12
 800d8da:	9300      	str	r3, [sp, #0]
 800d8dc:	462a      	mov	r2, r5
 800d8de:	4b09      	ldr	r3, [pc, #36]	; (800d904 <_vfiprintf_r+0x258>)
 800d8e0:	a904      	add	r1, sp, #16
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7fc fac0 	bl	8009e68 <_printf_i>
 800d8e8:	e7e4      	b.n	800d8b4 <_vfiprintf_r+0x208>
 800d8ea:	bf00      	nop
 800d8ec:	0800e5b4 	.word	0x0800e5b4
 800d8f0:	0800e5d4 	.word	0x0800e5d4
 800d8f4:	0800e594 	.word	0x0800e594
 800d8f8:	0800e544 	.word	0x0800e544
 800d8fc:	0800e54e 	.word	0x0800e54e
 800d900:	08009921 	.word	0x08009921
 800d904:	0800d687 	.word	0x0800d687
 800d908:	0800e54a 	.word	0x0800e54a

0800d90c <__swbuf_r>:
 800d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90e:	460e      	mov	r6, r1
 800d910:	4614      	mov	r4, r2
 800d912:	4605      	mov	r5, r0
 800d914:	b118      	cbz	r0, 800d91e <__swbuf_r+0x12>
 800d916:	6983      	ldr	r3, [r0, #24]
 800d918:	b90b      	cbnz	r3, 800d91e <__swbuf_r+0x12>
 800d91a:	f000 f9d9 	bl	800dcd0 <__sinit>
 800d91e:	4b21      	ldr	r3, [pc, #132]	; (800d9a4 <__swbuf_r+0x98>)
 800d920:	429c      	cmp	r4, r3
 800d922:	d12b      	bne.n	800d97c <__swbuf_r+0x70>
 800d924:	686c      	ldr	r4, [r5, #4]
 800d926:	69a3      	ldr	r3, [r4, #24]
 800d928:	60a3      	str	r3, [r4, #8]
 800d92a:	89a3      	ldrh	r3, [r4, #12]
 800d92c:	071a      	lsls	r2, r3, #28
 800d92e:	d52f      	bpl.n	800d990 <__swbuf_r+0x84>
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	b36b      	cbz	r3, 800d990 <__swbuf_r+0x84>
 800d934:	6923      	ldr	r3, [r4, #16]
 800d936:	6820      	ldr	r0, [r4, #0]
 800d938:	1ac0      	subs	r0, r0, r3
 800d93a:	6963      	ldr	r3, [r4, #20]
 800d93c:	b2f6      	uxtb	r6, r6
 800d93e:	4283      	cmp	r3, r0
 800d940:	4637      	mov	r7, r6
 800d942:	dc04      	bgt.n	800d94e <__swbuf_r+0x42>
 800d944:	4621      	mov	r1, r4
 800d946:	4628      	mov	r0, r5
 800d948:	f000 f92e 	bl	800dba8 <_fflush_r>
 800d94c:	bb30      	cbnz	r0, 800d99c <__swbuf_r+0x90>
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	3b01      	subs	r3, #1
 800d952:	60a3      	str	r3, [r4, #8]
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	1c5a      	adds	r2, r3, #1
 800d958:	6022      	str	r2, [r4, #0]
 800d95a:	701e      	strb	r6, [r3, #0]
 800d95c:	6963      	ldr	r3, [r4, #20]
 800d95e:	3001      	adds	r0, #1
 800d960:	4283      	cmp	r3, r0
 800d962:	d004      	beq.n	800d96e <__swbuf_r+0x62>
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	07db      	lsls	r3, r3, #31
 800d968:	d506      	bpl.n	800d978 <__swbuf_r+0x6c>
 800d96a:	2e0a      	cmp	r6, #10
 800d96c:	d104      	bne.n	800d978 <__swbuf_r+0x6c>
 800d96e:	4621      	mov	r1, r4
 800d970:	4628      	mov	r0, r5
 800d972:	f000 f919 	bl	800dba8 <_fflush_r>
 800d976:	b988      	cbnz	r0, 800d99c <__swbuf_r+0x90>
 800d978:	4638      	mov	r0, r7
 800d97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d97c:	4b0a      	ldr	r3, [pc, #40]	; (800d9a8 <__swbuf_r+0x9c>)
 800d97e:	429c      	cmp	r4, r3
 800d980:	d101      	bne.n	800d986 <__swbuf_r+0x7a>
 800d982:	68ac      	ldr	r4, [r5, #8]
 800d984:	e7cf      	b.n	800d926 <__swbuf_r+0x1a>
 800d986:	4b09      	ldr	r3, [pc, #36]	; (800d9ac <__swbuf_r+0xa0>)
 800d988:	429c      	cmp	r4, r3
 800d98a:	bf08      	it	eq
 800d98c:	68ec      	ldreq	r4, [r5, #12]
 800d98e:	e7ca      	b.n	800d926 <__swbuf_r+0x1a>
 800d990:	4621      	mov	r1, r4
 800d992:	4628      	mov	r0, r5
 800d994:	f000 f80c 	bl	800d9b0 <__swsetup_r>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d0cb      	beq.n	800d934 <__swbuf_r+0x28>
 800d99c:	f04f 37ff 	mov.w	r7, #4294967295
 800d9a0:	e7ea      	b.n	800d978 <__swbuf_r+0x6c>
 800d9a2:	bf00      	nop
 800d9a4:	0800e5b4 	.word	0x0800e5b4
 800d9a8:	0800e5d4 	.word	0x0800e5d4
 800d9ac:	0800e594 	.word	0x0800e594

0800d9b0 <__swsetup_r>:
 800d9b0:	4b32      	ldr	r3, [pc, #200]	; (800da7c <__swsetup_r+0xcc>)
 800d9b2:	b570      	push	{r4, r5, r6, lr}
 800d9b4:	681d      	ldr	r5, [r3, #0]
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	460c      	mov	r4, r1
 800d9ba:	b125      	cbz	r5, 800d9c6 <__swsetup_r+0x16>
 800d9bc:	69ab      	ldr	r3, [r5, #24]
 800d9be:	b913      	cbnz	r3, 800d9c6 <__swsetup_r+0x16>
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f000 f985 	bl	800dcd0 <__sinit>
 800d9c6:	4b2e      	ldr	r3, [pc, #184]	; (800da80 <__swsetup_r+0xd0>)
 800d9c8:	429c      	cmp	r4, r3
 800d9ca:	d10f      	bne.n	800d9ec <__swsetup_r+0x3c>
 800d9cc:	686c      	ldr	r4, [r5, #4]
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9d4:	0719      	lsls	r1, r3, #28
 800d9d6:	d42c      	bmi.n	800da32 <__swsetup_r+0x82>
 800d9d8:	06dd      	lsls	r5, r3, #27
 800d9da:	d411      	bmi.n	800da00 <__swsetup_r+0x50>
 800d9dc:	2309      	movs	r3, #9
 800d9de:	6033      	str	r3, [r6, #0]
 800d9e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ea:	e03e      	b.n	800da6a <__swsetup_r+0xba>
 800d9ec:	4b25      	ldr	r3, [pc, #148]	; (800da84 <__swsetup_r+0xd4>)
 800d9ee:	429c      	cmp	r4, r3
 800d9f0:	d101      	bne.n	800d9f6 <__swsetup_r+0x46>
 800d9f2:	68ac      	ldr	r4, [r5, #8]
 800d9f4:	e7eb      	b.n	800d9ce <__swsetup_r+0x1e>
 800d9f6:	4b24      	ldr	r3, [pc, #144]	; (800da88 <__swsetup_r+0xd8>)
 800d9f8:	429c      	cmp	r4, r3
 800d9fa:	bf08      	it	eq
 800d9fc:	68ec      	ldreq	r4, [r5, #12]
 800d9fe:	e7e6      	b.n	800d9ce <__swsetup_r+0x1e>
 800da00:	0758      	lsls	r0, r3, #29
 800da02:	d512      	bpl.n	800da2a <__swsetup_r+0x7a>
 800da04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da06:	b141      	cbz	r1, 800da1a <__swsetup_r+0x6a>
 800da08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da0c:	4299      	cmp	r1, r3
 800da0e:	d002      	beq.n	800da16 <__swsetup_r+0x66>
 800da10:	4630      	mov	r0, r6
 800da12:	f7ff fb1f 	bl	800d054 <_free_r>
 800da16:	2300      	movs	r3, #0
 800da18:	6363      	str	r3, [r4, #52]	; 0x34
 800da1a:	89a3      	ldrh	r3, [r4, #12]
 800da1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	2300      	movs	r3, #0
 800da24:	6063      	str	r3, [r4, #4]
 800da26:	6923      	ldr	r3, [r4, #16]
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	89a3      	ldrh	r3, [r4, #12]
 800da2c:	f043 0308 	orr.w	r3, r3, #8
 800da30:	81a3      	strh	r3, [r4, #12]
 800da32:	6923      	ldr	r3, [r4, #16]
 800da34:	b94b      	cbnz	r3, 800da4a <__swsetup_r+0x9a>
 800da36:	89a3      	ldrh	r3, [r4, #12]
 800da38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da40:	d003      	beq.n	800da4a <__swsetup_r+0x9a>
 800da42:	4621      	mov	r1, r4
 800da44:	4630      	mov	r0, r6
 800da46:	f000 fa09 	bl	800de5c <__smakebuf_r>
 800da4a:	89a0      	ldrh	r0, [r4, #12]
 800da4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da50:	f010 0301 	ands.w	r3, r0, #1
 800da54:	d00a      	beq.n	800da6c <__swsetup_r+0xbc>
 800da56:	2300      	movs	r3, #0
 800da58:	60a3      	str	r3, [r4, #8]
 800da5a:	6963      	ldr	r3, [r4, #20]
 800da5c:	425b      	negs	r3, r3
 800da5e:	61a3      	str	r3, [r4, #24]
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	b943      	cbnz	r3, 800da76 <__swsetup_r+0xc6>
 800da64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da68:	d1ba      	bne.n	800d9e0 <__swsetup_r+0x30>
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
 800da6c:	0781      	lsls	r1, r0, #30
 800da6e:	bf58      	it	pl
 800da70:	6963      	ldrpl	r3, [r4, #20]
 800da72:	60a3      	str	r3, [r4, #8]
 800da74:	e7f4      	b.n	800da60 <__swsetup_r+0xb0>
 800da76:	2000      	movs	r0, #0
 800da78:	e7f7      	b.n	800da6a <__swsetup_r+0xba>
 800da7a:	bf00      	nop
 800da7c:	200000fc 	.word	0x200000fc
 800da80:	0800e5b4 	.word	0x0800e5b4
 800da84:	0800e5d4 	.word	0x0800e5d4
 800da88:	0800e594 	.word	0x0800e594

0800da8c <abort>:
 800da8c:	b508      	push	{r3, lr}
 800da8e:	2006      	movs	r0, #6
 800da90:	f000 fa4c 	bl	800df2c <raise>
 800da94:	2001      	movs	r0, #1
 800da96:	f7f3 fefb 	bl	8001890 <_exit>
	...

0800da9c <__sflush_r>:
 800da9c:	898a      	ldrh	r2, [r1, #12]
 800da9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa2:	4605      	mov	r5, r0
 800daa4:	0710      	lsls	r0, r2, #28
 800daa6:	460c      	mov	r4, r1
 800daa8:	d458      	bmi.n	800db5c <__sflush_r+0xc0>
 800daaa:	684b      	ldr	r3, [r1, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	dc05      	bgt.n	800dabc <__sflush_r+0x20>
 800dab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	dc02      	bgt.n	800dabc <__sflush_r+0x20>
 800dab6:	2000      	movs	r0, #0
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dabe:	2e00      	cmp	r6, #0
 800dac0:	d0f9      	beq.n	800dab6 <__sflush_r+0x1a>
 800dac2:	2300      	movs	r3, #0
 800dac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dac8:	682f      	ldr	r7, [r5, #0]
 800daca:	602b      	str	r3, [r5, #0]
 800dacc:	d032      	beq.n	800db34 <__sflush_r+0x98>
 800dace:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dad0:	89a3      	ldrh	r3, [r4, #12]
 800dad2:	075a      	lsls	r2, r3, #29
 800dad4:	d505      	bpl.n	800dae2 <__sflush_r+0x46>
 800dad6:	6863      	ldr	r3, [r4, #4]
 800dad8:	1ac0      	subs	r0, r0, r3
 800dada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dadc:	b10b      	cbz	r3, 800dae2 <__sflush_r+0x46>
 800dade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dae0:	1ac0      	subs	r0, r0, r3
 800dae2:	2300      	movs	r3, #0
 800dae4:	4602      	mov	r2, r0
 800dae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dae8:	6a21      	ldr	r1, [r4, #32]
 800daea:	4628      	mov	r0, r5
 800daec:	47b0      	blx	r6
 800daee:	1c43      	adds	r3, r0, #1
 800daf0:	89a3      	ldrh	r3, [r4, #12]
 800daf2:	d106      	bne.n	800db02 <__sflush_r+0x66>
 800daf4:	6829      	ldr	r1, [r5, #0]
 800daf6:	291d      	cmp	r1, #29
 800daf8:	d82c      	bhi.n	800db54 <__sflush_r+0xb8>
 800dafa:	4a2a      	ldr	r2, [pc, #168]	; (800dba4 <__sflush_r+0x108>)
 800dafc:	40ca      	lsrs	r2, r1
 800dafe:	07d6      	lsls	r6, r2, #31
 800db00:	d528      	bpl.n	800db54 <__sflush_r+0xb8>
 800db02:	2200      	movs	r2, #0
 800db04:	6062      	str	r2, [r4, #4]
 800db06:	04d9      	lsls	r1, r3, #19
 800db08:	6922      	ldr	r2, [r4, #16]
 800db0a:	6022      	str	r2, [r4, #0]
 800db0c:	d504      	bpl.n	800db18 <__sflush_r+0x7c>
 800db0e:	1c42      	adds	r2, r0, #1
 800db10:	d101      	bne.n	800db16 <__sflush_r+0x7a>
 800db12:	682b      	ldr	r3, [r5, #0]
 800db14:	b903      	cbnz	r3, 800db18 <__sflush_r+0x7c>
 800db16:	6560      	str	r0, [r4, #84]	; 0x54
 800db18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db1a:	602f      	str	r7, [r5, #0]
 800db1c:	2900      	cmp	r1, #0
 800db1e:	d0ca      	beq.n	800dab6 <__sflush_r+0x1a>
 800db20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db24:	4299      	cmp	r1, r3
 800db26:	d002      	beq.n	800db2e <__sflush_r+0x92>
 800db28:	4628      	mov	r0, r5
 800db2a:	f7ff fa93 	bl	800d054 <_free_r>
 800db2e:	2000      	movs	r0, #0
 800db30:	6360      	str	r0, [r4, #52]	; 0x34
 800db32:	e7c1      	b.n	800dab8 <__sflush_r+0x1c>
 800db34:	6a21      	ldr	r1, [r4, #32]
 800db36:	2301      	movs	r3, #1
 800db38:	4628      	mov	r0, r5
 800db3a:	47b0      	blx	r6
 800db3c:	1c41      	adds	r1, r0, #1
 800db3e:	d1c7      	bne.n	800dad0 <__sflush_r+0x34>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d0c4      	beq.n	800dad0 <__sflush_r+0x34>
 800db46:	2b1d      	cmp	r3, #29
 800db48:	d001      	beq.n	800db4e <__sflush_r+0xb2>
 800db4a:	2b16      	cmp	r3, #22
 800db4c:	d101      	bne.n	800db52 <__sflush_r+0xb6>
 800db4e:	602f      	str	r7, [r5, #0]
 800db50:	e7b1      	b.n	800dab6 <__sflush_r+0x1a>
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	e7ad      	b.n	800dab8 <__sflush_r+0x1c>
 800db5c:	690f      	ldr	r7, [r1, #16]
 800db5e:	2f00      	cmp	r7, #0
 800db60:	d0a9      	beq.n	800dab6 <__sflush_r+0x1a>
 800db62:	0793      	lsls	r3, r2, #30
 800db64:	680e      	ldr	r6, [r1, #0]
 800db66:	bf08      	it	eq
 800db68:	694b      	ldreq	r3, [r1, #20]
 800db6a:	600f      	str	r7, [r1, #0]
 800db6c:	bf18      	it	ne
 800db6e:	2300      	movne	r3, #0
 800db70:	eba6 0807 	sub.w	r8, r6, r7
 800db74:	608b      	str	r3, [r1, #8]
 800db76:	f1b8 0f00 	cmp.w	r8, #0
 800db7a:	dd9c      	ble.n	800dab6 <__sflush_r+0x1a>
 800db7c:	6a21      	ldr	r1, [r4, #32]
 800db7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db80:	4643      	mov	r3, r8
 800db82:	463a      	mov	r2, r7
 800db84:	4628      	mov	r0, r5
 800db86:	47b0      	blx	r6
 800db88:	2800      	cmp	r0, #0
 800db8a:	dc06      	bgt.n	800db9a <__sflush_r+0xfe>
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db92:	81a3      	strh	r3, [r4, #12]
 800db94:	f04f 30ff 	mov.w	r0, #4294967295
 800db98:	e78e      	b.n	800dab8 <__sflush_r+0x1c>
 800db9a:	4407      	add	r7, r0
 800db9c:	eba8 0800 	sub.w	r8, r8, r0
 800dba0:	e7e9      	b.n	800db76 <__sflush_r+0xda>
 800dba2:	bf00      	nop
 800dba4:	20400001 	.word	0x20400001

0800dba8 <_fflush_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	690b      	ldr	r3, [r1, #16]
 800dbac:	4605      	mov	r5, r0
 800dbae:	460c      	mov	r4, r1
 800dbb0:	b913      	cbnz	r3, 800dbb8 <_fflush_r+0x10>
 800dbb2:	2500      	movs	r5, #0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	b118      	cbz	r0, 800dbc2 <_fflush_r+0x1a>
 800dbba:	6983      	ldr	r3, [r0, #24]
 800dbbc:	b90b      	cbnz	r3, 800dbc2 <_fflush_r+0x1a>
 800dbbe:	f000 f887 	bl	800dcd0 <__sinit>
 800dbc2:	4b14      	ldr	r3, [pc, #80]	; (800dc14 <_fflush_r+0x6c>)
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	d11b      	bne.n	800dc00 <_fflush_r+0x58>
 800dbc8:	686c      	ldr	r4, [r5, #4]
 800dbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d0ef      	beq.n	800dbb2 <_fflush_r+0xa>
 800dbd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dbd4:	07d0      	lsls	r0, r2, #31
 800dbd6:	d404      	bmi.n	800dbe2 <_fflush_r+0x3a>
 800dbd8:	0599      	lsls	r1, r3, #22
 800dbda:	d402      	bmi.n	800dbe2 <_fflush_r+0x3a>
 800dbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbde:	f000 f915 	bl	800de0c <__retarget_lock_acquire_recursive>
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	f7ff ff59 	bl	800da9c <__sflush_r>
 800dbea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbec:	07da      	lsls	r2, r3, #31
 800dbee:	4605      	mov	r5, r0
 800dbf0:	d4e0      	bmi.n	800dbb4 <_fflush_r+0xc>
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	059b      	lsls	r3, r3, #22
 800dbf6:	d4dd      	bmi.n	800dbb4 <_fflush_r+0xc>
 800dbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbfa:	f000 f908 	bl	800de0e <__retarget_lock_release_recursive>
 800dbfe:	e7d9      	b.n	800dbb4 <_fflush_r+0xc>
 800dc00:	4b05      	ldr	r3, [pc, #20]	; (800dc18 <_fflush_r+0x70>)
 800dc02:	429c      	cmp	r4, r3
 800dc04:	d101      	bne.n	800dc0a <_fflush_r+0x62>
 800dc06:	68ac      	ldr	r4, [r5, #8]
 800dc08:	e7df      	b.n	800dbca <_fflush_r+0x22>
 800dc0a:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <_fflush_r+0x74>)
 800dc0c:	429c      	cmp	r4, r3
 800dc0e:	bf08      	it	eq
 800dc10:	68ec      	ldreq	r4, [r5, #12]
 800dc12:	e7da      	b.n	800dbca <_fflush_r+0x22>
 800dc14:	0800e5b4 	.word	0x0800e5b4
 800dc18:	0800e5d4 	.word	0x0800e5d4
 800dc1c:	0800e594 	.word	0x0800e594

0800dc20 <std>:
 800dc20:	2300      	movs	r3, #0
 800dc22:	b510      	push	{r4, lr}
 800dc24:	4604      	mov	r4, r0
 800dc26:	e9c0 3300 	strd	r3, r3, [r0]
 800dc2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc2e:	6083      	str	r3, [r0, #8]
 800dc30:	8181      	strh	r1, [r0, #12]
 800dc32:	6643      	str	r3, [r0, #100]	; 0x64
 800dc34:	81c2      	strh	r2, [r0, #14]
 800dc36:	6183      	str	r3, [r0, #24]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	2208      	movs	r2, #8
 800dc3c:	305c      	adds	r0, #92	; 0x5c
 800dc3e:	f7fb fdc7 	bl	80097d0 <memset>
 800dc42:	4b05      	ldr	r3, [pc, #20]	; (800dc58 <std+0x38>)
 800dc44:	6263      	str	r3, [r4, #36]	; 0x24
 800dc46:	4b05      	ldr	r3, [pc, #20]	; (800dc5c <std+0x3c>)
 800dc48:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc4a:	4b05      	ldr	r3, [pc, #20]	; (800dc60 <std+0x40>)
 800dc4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dc4e:	4b05      	ldr	r3, [pc, #20]	; (800dc64 <std+0x44>)
 800dc50:	6224      	str	r4, [r4, #32]
 800dc52:	6323      	str	r3, [r4, #48]	; 0x30
 800dc54:	bd10      	pop	{r4, pc}
 800dc56:	bf00      	nop
 800dc58:	0800df65 	.word	0x0800df65
 800dc5c:	0800df87 	.word	0x0800df87
 800dc60:	0800dfbf 	.word	0x0800dfbf
 800dc64:	0800dfe3 	.word	0x0800dfe3

0800dc68 <_cleanup_r>:
 800dc68:	4901      	ldr	r1, [pc, #4]	; (800dc70 <_cleanup_r+0x8>)
 800dc6a:	f000 b8af 	b.w	800ddcc <_fwalk_reent>
 800dc6e:	bf00      	nop
 800dc70:	0800dba9 	.word	0x0800dba9

0800dc74 <__sfmoreglue>:
 800dc74:	b570      	push	{r4, r5, r6, lr}
 800dc76:	2268      	movs	r2, #104	; 0x68
 800dc78:	1e4d      	subs	r5, r1, #1
 800dc7a:	4355      	muls	r5, r2
 800dc7c:	460e      	mov	r6, r1
 800dc7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc82:	f7ff fa53 	bl	800d12c <_malloc_r>
 800dc86:	4604      	mov	r4, r0
 800dc88:	b140      	cbz	r0, 800dc9c <__sfmoreglue+0x28>
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	e9c0 1600 	strd	r1, r6, [r0]
 800dc90:	300c      	adds	r0, #12
 800dc92:	60a0      	str	r0, [r4, #8]
 800dc94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc98:	f7fb fd9a 	bl	80097d0 <memset>
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	bd70      	pop	{r4, r5, r6, pc}

0800dca0 <__sfp_lock_acquire>:
 800dca0:	4801      	ldr	r0, [pc, #4]	; (800dca8 <__sfp_lock_acquire+0x8>)
 800dca2:	f000 b8b3 	b.w	800de0c <__retarget_lock_acquire_recursive>
 800dca6:	bf00      	nop
 800dca8:	200018b5 	.word	0x200018b5

0800dcac <__sfp_lock_release>:
 800dcac:	4801      	ldr	r0, [pc, #4]	; (800dcb4 <__sfp_lock_release+0x8>)
 800dcae:	f000 b8ae 	b.w	800de0e <__retarget_lock_release_recursive>
 800dcb2:	bf00      	nop
 800dcb4:	200018b5 	.word	0x200018b5

0800dcb8 <__sinit_lock_acquire>:
 800dcb8:	4801      	ldr	r0, [pc, #4]	; (800dcc0 <__sinit_lock_acquire+0x8>)
 800dcba:	f000 b8a7 	b.w	800de0c <__retarget_lock_acquire_recursive>
 800dcbe:	bf00      	nop
 800dcc0:	200018b6 	.word	0x200018b6

0800dcc4 <__sinit_lock_release>:
 800dcc4:	4801      	ldr	r0, [pc, #4]	; (800dccc <__sinit_lock_release+0x8>)
 800dcc6:	f000 b8a2 	b.w	800de0e <__retarget_lock_release_recursive>
 800dcca:	bf00      	nop
 800dccc:	200018b6 	.word	0x200018b6

0800dcd0 <__sinit>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	f7ff fff0 	bl	800dcb8 <__sinit_lock_acquire>
 800dcd8:	69a3      	ldr	r3, [r4, #24]
 800dcda:	b11b      	cbz	r3, 800dce4 <__sinit+0x14>
 800dcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dce0:	f7ff bff0 	b.w	800dcc4 <__sinit_lock_release>
 800dce4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dce8:	6523      	str	r3, [r4, #80]	; 0x50
 800dcea:	4b13      	ldr	r3, [pc, #76]	; (800dd38 <__sinit+0x68>)
 800dcec:	4a13      	ldr	r2, [pc, #76]	; (800dd3c <__sinit+0x6c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800dcf2:	42a3      	cmp	r3, r4
 800dcf4:	bf04      	itt	eq
 800dcf6:	2301      	moveq	r3, #1
 800dcf8:	61a3      	streq	r3, [r4, #24]
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f000 f820 	bl	800dd40 <__sfp>
 800dd00:	6060      	str	r0, [r4, #4]
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 f81c 	bl	800dd40 <__sfp>
 800dd08:	60a0      	str	r0, [r4, #8]
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 f818 	bl	800dd40 <__sfp>
 800dd10:	2200      	movs	r2, #0
 800dd12:	60e0      	str	r0, [r4, #12]
 800dd14:	2104      	movs	r1, #4
 800dd16:	6860      	ldr	r0, [r4, #4]
 800dd18:	f7ff ff82 	bl	800dc20 <std>
 800dd1c:	68a0      	ldr	r0, [r4, #8]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	2109      	movs	r1, #9
 800dd22:	f7ff ff7d 	bl	800dc20 <std>
 800dd26:	68e0      	ldr	r0, [r4, #12]
 800dd28:	2202      	movs	r2, #2
 800dd2a:	2112      	movs	r1, #18
 800dd2c:	f7ff ff78 	bl	800dc20 <std>
 800dd30:	2301      	movs	r3, #1
 800dd32:	61a3      	str	r3, [r4, #24]
 800dd34:	e7d2      	b.n	800dcdc <__sinit+0xc>
 800dd36:	bf00      	nop
 800dd38:	0800e14c 	.word	0x0800e14c
 800dd3c:	0800dc69 	.word	0x0800dc69

0800dd40 <__sfp>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	4607      	mov	r7, r0
 800dd44:	f7ff ffac 	bl	800dca0 <__sfp_lock_acquire>
 800dd48:	4b1e      	ldr	r3, [pc, #120]	; (800ddc4 <__sfp+0x84>)
 800dd4a:	681e      	ldr	r6, [r3, #0]
 800dd4c:	69b3      	ldr	r3, [r6, #24]
 800dd4e:	b913      	cbnz	r3, 800dd56 <__sfp+0x16>
 800dd50:	4630      	mov	r0, r6
 800dd52:	f7ff ffbd 	bl	800dcd0 <__sinit>
 800dd56:	3648      	adds	r6, #72	; 0x48
 800dd58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	d503      	bpl.n	800dd68 <__sfp+0x28>
 800dd60:	6833      	ldr	r3, [r6, #0]
 800dd62:	b30b      	cbz	r3, 800dda8 <__sfp+0x68>
 800dd64:	6836      	ldr	r6, [r6, #0]
 800dd66:	e7f7      	b.n	800dd58 <__sfp+0x18>
 800dd68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd6c:	b9d5      	cbnz	r5, 800dda4 <__sfp+0x64>
 800dd6e:	4b16      	ldr	r3, [pc, #88]	; (800ddc8 <__sfp+0x88>)
 800dd70:	60e3      	str	r3, [r4, #12]
 800dd72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd76:	6665      	str	r5, [r4, #100]	; 0x64
 800dd78:	f000 f847 	bl	800de0a <__retarget_lock_init_recursive>
 800dd7c:	f7ff ff96 	bl	800dcac <__sfp_lock_release>
 800dd80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd88:	6025      	str	r5, [r4, #0]
 800dd8a:	61a5      	str	r5, [r4, #24]
 800dd8c:	2208      	movs	r2, #8
 800dd8e:	4629      	mov	r1, r5
 800dd90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd94:	f7fb fd1c 	bl	80097d0 <memset>
 800dd98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dda0:	4620      	mov	r0, r4
 800dda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dda4:	3468      	adds	r4, #104	; 0x68
 800dda6:	e7d9      	b.n	800dd5c <__sfp+0x1c>
 800dda8:	2104      	movs	r1, #4
 800ddaa:	4638      	mov	r0, r7
 800ddac:	f7ff ff62 	bl	800dc74 <__sfmoreglue>
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	6030      	str	r0, [r6, #0]
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d1d5      	bne.n	800dd64 <__sfp+0x24>
 800ddb8:	f7ff ff78 	bl	800dcac <__sfp_lock_release>
 800ddbc:	230c      	movs	r3, #12
 800ddbe:	603b      	str	r3, [r7, #0]
 800ddc0:	e7ee      	b.n	800dda0 <__sfp+0x60>
 800ddc2:	bf00      	nop
 800ddc4:	0800e14c 	.word	0x0800e14c
 800ddc8:	ffff0001 	.word	0xffff0001

0800ddcc <_fwalk_reent>:
 800ddcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	4688      	mov	r8, r1
 800ddd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ddd8:	2700      	movs	r7, #0
 800ddda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddde:	f1b9 0901 	subs.w	r9, r9, #1
 800dde2:	d505      	bpl.n	800ddf0 <_fwalk_reent+0x24>
 800dde4:	6824      	ldr	r4, [r4, #0]
 800dde6:	2c00      	cmp	r4, #0
 800dde8:	d1f7      	bne.n	800ddda <_fwalk_reent+0xe>
 800ddea:	4638      	mov	r0, r7
 800ddec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf0:	89ab      	ldrh	r3, [r5, #12]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d907      	bls.n	800de06 <_fwalk_reent+0x3a>
 800ddf6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	d003      	beq.n	800de06 <_fwalk_reent+0x3a>
 800ddfe:	4629      	mov	r1, r5
 800de00:	4630      	mov	r0, r6
 800de02:	47c0      	blx	r8
 800de04:	4307      	orrs	r7, r0
 800de06:	3568      	adds	r5, #104	; 0x68
 800de08:	e7e9      	b.n	800ddde <_fwalk_reent+0x12>

0800de0a <__retarget_lock_init_recursive>:
 800de0a:	4770      	bx	lr

0800de0c <__retarget_lock_acquire_recursive>:
 800de0c:	4770      	bx	lr

0800de0e <__retarget_lock_release_recursive>:
 800de0e:	4770      	bx	lr

0800de10 <__swhatbuf_r>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	460e      	mov	r6, r1
 800de14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de18:	2900      	cmp	r1, #0
 800de1a:	b096      	sub	sp, #88	; 0x58
 800de1c:	4614      	mov	r4, r2
 800de1e:	461d      	mov	r5, r3
 800de20:	da08      	bge.n	800de34 <__swhatbuf_r+0x24>
 800de22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de26:	2200      	movs	r2, #0
 800de28:	602a      	str	r2, [r5, #0]
 800de2a:	061a      	lsls	r2, r3, #24
 800de2c:	d410      	bmi.n	800de50 <__swhatbuf_r+0x40>
 800de2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de32:	e00e      	b.n	800de52 <__swhatbuf_r+0x42>
 800de34:	466a      	mov	r2, sp
 800de36:	f000 f8fb 	bl	800e030 <_fstat_r>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	dbf1      	blt.n	800de22 <__swhatbuf_r+0x12>
 800de3e:	9a01      	ldr	r2, [sp, #4]
 800de40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de48:	425a      	negs	r2, r3
 800de4a:	415a      	adcs	r2, r3
 800de4c:	602a      	str	r2, [r5, #0]
 800de4e:	e7ee      	b.n	800de2e <__swhatbuf_r+0x1e>
 800de50:	2340      	movs	r3, #64	; 0x40
 800de52:	2000      	movs	r0, #0
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	b016      	add	sp, #88	; 0x58
 800de58:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de5c <__smakebuf_r>:
 800de5c:	898b      	ldrh	r3, [r1, #12]
 800de5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de60:	079d      	lsls	r5, r3, #30
 800de62:	4606      	mov	r6, r0
 800de64:	460c      	mov	r4, r1
 800de66:	d507      	bpl.n	800de78 <__smakebuf_r+0x1c>
 800de68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de6c:	6023      	str	r3, [r4, #0]
 800de6e:	6123      	str	r3, [r4, #16]
 800de70:	2301      	movs	r3, #1
 800de72:	6163      	str	r3, [r4, #20]
 800de74:	b002      	add	sp, #8
 800de76:	bd70      	pop	{r4, r5, r6, pc}
 800de78:	ab01      	add	r3, sp, #4
 800de7a:	466a      	mov	r2, sp
 800de7c:	f7ff ffc8 	bl	800de10 <__swhatbuf_r>
 800de80:	9900      	ldr	r1, [sp, #0]
 800de82:	4605      	mov	r5, r0
 800de84:	4630      	mov	r0, r6
 800de86:	f7ff f951 	bl	800d12c <_malloc_r>
 800de8a:	b948      	cbnz	r0, 800dea0 <__smakebuf_r+0x44>
 800de8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de90:	059a      	lsls	r2, r3, #22
 800de92:	d4ef      	bmi.n	800de74 <__smakebuf_r+0x18>
 800de94:	f023 0303 	bic.w	r3, r3, #3
 800de98:	f043 0302 	orr.w	r3, r3, #2
 800de9c:	81a3      	strh	r3, [r4, #12]
 800de9e:	e7e3      	b.n	800de68 <__smakebuf_r+0xc>
 800dea0:	4b0d      	ldr	r3, [pc, #52]	; (800ded8 <__smakebuf_r+0x7c>)
 800dea2:	62b3      	str	r3, [r6, #40]	; 0x28
 800dea4:	89a3      	ldrh	r3, [r4, #12]
 800dea6:	6020      	str	r0, [r4, #0]
 800dea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deac:	81a3      	strh	r3, [r4, #12]
 800deae:	9b00      	ldr	r3, [sp, #0]
 800deb0:	6163      	str	r3, [r4, #20]
 800deb2:	9b01      	ldr	r3, [sp, #4]
 800deb4:	6120      	str	r0, [r4, #16]
 800deb6:	b15b      	cbz	r3, 800ded0 <__smakebuf_r+0x74>
 800deb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800debc:	4630      	mov	r0, r6
 800debe:	f000 f8c9 	bl	800e054 <_isatty_r>
 800dec2:	b128      	cbz	r0, 800ded0 <__smakebuf_r+0x74>
 800dec4:	89a3      	ldrh	r3, [r4, #12]
 800dec6:	f023 0303 	bic.w	r3, r3, #3
 800deca:	f043 0301 	orr.w	r3, r3, #1
 800dece:	81a3      	strh	r3, [r4, #12]
 800ded0:	89a0      	ldrh	r0, [r4, #12]
 800ded2:	4305      	orrs	r5, r0
 800ded4:	81a5      	strh	r5, [r4, #12]
 800ded6:	e7cd      	b.n	800de74 <__smakebuf_r+0x18>
 800ded8:	0800dc69 	.word	0x0800dc69

0800dedc <_raise_r>:
 800dedc:	291f      	cmp	r1, #31
 800dede:	b538      	push	{r3, r4, r5, lr}
 800dee0:	4604      	mov	r4, r0
 800dee2:	460d      	mov	r5, r1
 800dee4:	d904      	bls.n	800def0 <_raise_r+0x14>
 800dee6:	2316      	movs	r3, #22
 800dee8:	6003      	str	r3, [r0, #0]
 800deea:	f04f 30ff 	mov.w	r0, #4294967295
 800deee:	bd38      	pop	{r3, r4, r5, pc}
 800def0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800def2:	b112      	cbz	r2, 800defa <_raise_r+0x1e>
 800def4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800def8:	b94b      	cbnz	r3, 800df0e <_raise_r+0x32>
 800defa:	4620      	mov	r0, r4
 800defc:	f000 f830 	bl	800df60 <_getpid_r>
 800df00:	462a      	mov	r2, r5
 800df02:	4601      	mov	r1, r0
 800df04:	4620      	mov	r0, r4
 800df06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df0a:	f000 b817 	b.w	800df3c <_kill_r>
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d00a      	beq.n	800df28 <_raise_r+0x4c>
 800df12:	1c59      	adds	r1, r3, #1
 800df14:	d103      	bne.n	800df1e <_raise_r+0x42>
 800df16:	2316      	movs	r3, #22
 800df18:	6003      	str	r3, [r0, #0]
 800df1a:	2001      	movs	r0, #1
 800df1c:	e7e7      	b.n	800deee <_raise_r+0x12>
 800df1e:	2400      	movs	r4, #0
 800df20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df24:	4628      	mov	r0, r5
 800df26:	4798      	blx	r3
 800df28:	2000      	movs	r0, #0
 800df2a:	e7e0      	b.n	800deee <_raise_r+0x12>

0800df2c <raise>:
 800df2c:	4b02      	ldr	r3, [pc, #8]	; (800df38 <raise+0xc>)
 800df2e:	4601      	mov	r1, r0
 800df30:	6818      	ldr	r0, [r3, #0]
 800df32:	f7ff bfd3 	b.w	800dedc <_raise_r>
 800df36:	bf00      	nop
 800df38:	200000fc 	.word	0x200000fc

0800df3c <_kill_r>:
 800df3c:	b538      	push	{r3, r4, r5, lr}
 800df3e:	4d07      	ldr	r5, [pc, #28]	; (800df5c <_kill_r+0x20>)
 800df40:	2300      	movs	r3, #0
 800df42:	4604      	mov	r4, r0
 800df44:	4608      	mov	r0, r1
 800df46:	4611      	mov	r1, r2
 800df48:	602b      	str	r3, [r5, #0]
 800df4a:	f7f3 fc91 	bl	8001870 <_kill>
 800df4e:	1c43      	adds	r3, r0, #1
 800df50:	d102      	bne.n	800df58 <_kill_r+0x1c>
 800df52:	682b      	ldr	r3, [r5, #0]
 800df54:	b103      	cbz	r3, 800df58 <_kill_r+0x1c>
 800df56:	6023      	str	r3, [r4, #0]
 800df58:	bd38      	pop	{r3, r4, r5, pc}
 800df5a:	bf00      	nop
 800df5c:	200018b0 	.word	0x200018b0

0800df60 <_getpid_r>:
 800df60:	f7f3 bc7e 	b.w	8001860 <_getpid>

0800df64 <__sread>:
 800df64:	b510      	push	{r4, lr}
 800df66:	460c      	mov	r4, r1
 800df68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6c:	f000 f894 	bl	800e098 <_read_r>
 800df70:	2800      	cmp	r0, #0
 800df72:	bfab      	itete	ge
 800df74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df76:	89a3      	ldrhlt	r3, [r4, #12]
 800df78:	181b      	addge	r3, r3, r0
 800df7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df7e:	bfac      	ite	ge
 800df80:	6563      	strge	r3, [r4, #84]	; 0x54
 800df82:	81a3      	strhlt	r3, [r4, #12]
 800df84:	bd10      	pop	{r4, pc}

0800df86 <__swrite>:
 800df86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8a:	461f      	mov	r7, r3
 800df8c:	898b      	ldrh	r3, [r1, #12]
 800df8e:	05db      	lsls	r3, r3, #23
 800df90:	4605      	mov	r5, r0
 800df92:	460c      	mov	r4, r1
 800df94:	4616      	mov	r6, r2
 800df96:	d505      	bpl.n	800dfa4 <__swrite+0x1e>
 800df98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9c:	2302      	movs	r3, #2
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f000 f868 	bl	800e074 <_lseek_r>
 800dfa4:	89a3      	ldrh	r3, [r4, #12]
 800dfa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfae:	81a3      	strh	r3, [r4, #12]
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	463b      	mov	r3, r7
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfba:	f000 b817 	b.w	800dfec <_write_r>

0800dfbe <__sseek>:
 800dfbe:	b510      	push	{r4, lr}
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc6:	f000 f855 	bl	800e074 <_lseek_r>
 800dfca:	1c43      	adds	r3, r0, #1
 800dfcc:	89a3      	ldrh	r3, [r4, #12]
 800dfce:	bf15      	itete	ne
 800dfd0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dfd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dfd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfda:	81a3      	strheq	r3, [r4, #12]
 800dfdc:	bf18      	it	ne
 800dfde:	81a3      	strhne	r3, [r4, #12]
 800dfe0:	bd10      	pop	{r4, pc}

0800dfe2 <__sclose>:
 800dfe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfe6:	f000 b813 	b.w	800e010 <_close_r>
	...

0800dfec <_write_r>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4d07      	ldr	r5, [pc, #28]	; (800e00c <_write_r+0x20>)
 800dff0:	4604      	mov	r4, r0
 800dff2:	4608      	mov	r0, r1
 800dff4:	4611      	mov	r1, r2
 800dff6:	2200      	movs	r2, #0
 800dff8:	602a      	str	r2, [r5, #0]
 800dffa:	461a      	mov	r2, r3
 800dffc:	f7f3 fc6f 	bl	80018de <_write>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d102      	bne.n	800e00a <_write_r+0x1e>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	b103      	cbz	r3, 800e00a <_write_r+0x1e>
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	200018b0 	.word	0x200018b0

0800e010 <_close_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4d06      	ldr	r5, [pc, #24]	; (800e02c <_close_r+0x1c>)
 800e014:	2300      	movs	r3, #0
 800e016:	4604      	mov	r4, r0
 800e018:	4608      	mov	r0, r1
 800e01a:	602b      	str	r3, [r5, #0]
 800e01c:	f7f3 fc7b 	bl	8001916 <_close>
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	d102      	bne.n	800e02a <_close_r+0x1a>
 800e024:	682b      	ldr	r3, [r5, #0]
 800e026:	b103      	cbz	r3, 800e02a <_close_r+0x1a>
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	200018b0 	.word	0x200018b0

0800e030 <_fstat_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	4d07      	ldr	r5, [pc, #28]	; (800e050 <_fstat_r+0x20>)
 800e034:	2300      	movs	r3, #0
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	4611      	mov	r1, r2
 800e03c:	602b      	str	r3, [r5, #0]
 800e03e:	f7f3 fc76 	bl	800192e <_fstat>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d102      	bne.n	800e04c <_fstat_r+0x1c>
 800e046:	682b      	ldr	r3, [r5, #0]
 800e048:	b103      	cbz	r3, 800e04c <_fstat_r+0x1c>
 800e04a:	6023      	str	r3, [r4, #0]
 800e04c:	bd38      	pop	{r3, r4, r5, pc}
 800e04e:	bf00      	nop
 800e050:	200018b0 	.word	0x200018b0

0800e054 <_isatty_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d06      	ldr	r5, [pc, #24]	; (800e070 <_isatty_r+0x1c>)
 800e058:	2300      	movs	r3, #0
 800e05a:	4604      	mov	r4, r0
 800e05c:	4608      	mov	r0, r1
 800e05e:	602b      	str	r3, [r5, #0]
 800e060:	f7f3 fc75 	bl	800194e <_isatty>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_isatty_r+0x1a>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_isatty_r+0x1a>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	200018b0 	.word	0x200018b0

0800e074 <_lseek_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d07      	ldr	r5, [pc, #28]	; (800e094 <_lseek_r+0x20>)
 800e078:	4604      	mov	r4, r0
 800e07a:	4608      	mov	r0, r1
 800e07c:	4611      	mov	r1, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	602a      	str	r2, [r5, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	f7f3 fc6e 	bl	8001964 <_lseek>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	d102      	bne.n	800e092 <_lseek_r+0x1e>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	b103      	cbz	r3, 800e092 <_lseek_r+0x1e>
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	200018b0 	.word	0x200018b0

0800e098 <_read_r>:
 800e098:	b538      	push	{r3, r4, r5, lr}
 800e09a:	4d07      	ldr	r5, [pc, #28]	; (800e0b8 <_read_r+0x20>)
 800e09c:	4604      	mov	r4, r0
 800e09e:	4608      	mov	r0, r1
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	602a      	str	r2, [r5, #0]
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	f7f3 fbfc 	bl	80018a4 <_read>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d102      	bne.n	800e0b6 <_read_r+0x1e>
 800e0b0:	682b      	ldr	r3, [r5, #0]
 800e0b2:	b103      	cbz	r3, 800e0b6 <_read_r+0x1e>
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	bd38      	pop	{r3, r4, r5, pc}
 800e0b8:	200018b0 	.word	0x200018b0

0800e0bc <_init>:
 800e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0be:	bf00      	nop
 800e0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0c2:	bc08      	pop	{r3}
 800e0c4:	469e      	mov	lr, r3
 800e0c6:	4770      	bx	lr

0800e0c8 <_fini>:
 800e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ca:	bf00      	nop
 800e0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0ce:	bc08      	pop	{r3}
 800e0d0:	469e      	mov	lr, r3
 800e0d2:	4770      	bx	lr
