
Apollo - DSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800bb90  0800bb90  0001bb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bee0  0800bee0  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee8  0800bee8  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beec  0800beec  0001beec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800bef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  20000164  0800c054  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000174c  0800c054  0002174c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191b9  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b55  00000000  00000000  0003934d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bde0  00000000  00000000  0003f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcff  00000000  00000000  0005b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3da  00000000  00000000  00077167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006654  00000000  00000000  00111594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb78 	.word	0x0800bb78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800bb78 	.word	0x0800bb78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b974 	b.w	8000e8c <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	468e      	mov	lr, r1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d14d      	bne.n	8000c66 <__udivmoddi4+0xaa>
 8000bca:	428a      	cmp	r2, r1
 8000bcc:	4694      	mov	ip, r2
 8000bce:	d969      	bls.n	8000ca4 <__udivmoddi4+0xe8>
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b152      	cbz	r2, 8000bec <__udivmoddi4+0x30>
 8000bd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bda:	f1c2 0120 	rsb	r1, r2, #32
 8000bde:	fa20 f101 	lsr.w	r1, r0, r1
 8000be2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bea:	4094      	lsls	r4, r2
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	0c21      	lsrs	r1, r4, #16
 8000bf2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bf6:	fa1f f78c 	uxth.w	r7, ip
 8000bfa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bfe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c02:	fb06 f107 	mul.w	r1, r6, r7
 8000c06:	4299      	cmp	r1, r3
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x64>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c12:	f080 811f 	bcs.w	8000e54 <__udivmoddi4+0x298>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 811c 	bls.w	8000e54 <__udivmoddi4+0x298>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 f707 	mul.w	r7, r0, r7
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x92>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c40:	f080 810a 	bcs.w	8000e58 <__udivmoddi4+0x29c>
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	f240 8107 	bls.w	8000e58 <__udivmoddi4+0x29c>
 8000c4a:	4464      	add	r4, ip
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c52:	1be4      	subs	r4, r4, r7
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa4>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d909      	bls.n	8000c7e <__udivmoddi4+0xc2>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	f000 80ef 	beq.w	8000e4e <__udivmoddi4+0x292>
 8000c70:	2600      	movs	r6, #0
 8000c72:	e9c5 0100 	strd	r0, r1, [r5]
 8000c76:	4630      	mov	r0, r6
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	fab3 f683 	clz	r6, r3
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d14a      	bne.n	8000d1c <__udivmoddi4+0x160>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xd4>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80f9 	bhi.w	8000e82 <__udivmoddi4+0x2c6>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb61 0303 	sbc.w	r3, r1, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	469e      	mov	lr, r3
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d0e0      	beq.n	8000c60 <__udivmoddi4+0xa4>
 8000c9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca2:	e7dd      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000ca4:	b902      	cbnz	r2, 8000ca8 <__udivmoddi4+0xec>
 8000ca6:	deff      	udf	#255	; 0xff
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f040 8092 	bne.w	8000dd6 <__udivmoddi4+0x21a>
 8000cb2:	eba1 010c 	sub.w	r1, r1, ip
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f fe8c 	uxth.w	lr, ip
 8000cbe:	2601      	movs	r6, #1
 8000cc0:	0c20      	lsrs	r0, r4, #16
 8000cc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cce:	fb0e f003 	mul.w	r0, lr, r3
 8000cd2:	4288      	cmp	r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x12c>
 8000cd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x12a>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f200 80cb 	bhi.w	8000e7c <__udivmoddi4+0x2c0>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	1a09      	subs	r1, r1, r0
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x156>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d08:	d202      	bcs.n	8000d10 <__udivmoddi4+0x154>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f200 80bb 	bhi.w	8000e86 <__udivmoddi4+0x2ca>
 8000d10:	4608      	mov	r0, r1
 8000d12:	eba4 040e 	sub.w	r4, r4, lr
 8000d16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x9a>
 8000d1c:	f1c6 0720 	rsb	r7, r6, #32
 8000d20:	40b3      	lsls	r3, r6
 8000d22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d32:	431c      	orrs	r4, r3
 8000d34:	40f9      	lsrs	r1, r7
 8000d36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d42:	0c20      	lsrs	r0, r4, #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fb09 1118 	mls	r1, r9, r8, r1
 8000d4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d50:	fb08 f00e 	mul.w	r0, r8, lr
 8000d54:	4288      	cmp	r0, r1
 8000d56:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5a:	d90b      	bls.n	8000d74 <__udivmoddi4+0x1b8>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d64:	f080 8088 	bcs.w	8000e78 <__udivmoddi4+0x2bc>
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	f240 8085 	bls.w	8000e78 <__udivmoddi4+0x2bc>
 8000d6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d88:	458e      	cmp	lr, r1
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1e2>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d94:	d26c      	bcs.n	8000e70 <__udivmoddi4+0x2b4>
 8000d96:	458e      	cmp	lr, r1
 8000d98:	d96a      	bls.n	8000e70 <__udivmoddi4+0x2b4>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4461      	add	r1, ip
 8000d9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da2:	fba0 9402 	umull	r9, r4, r0, r2
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	42a1      	cmp	r1, r4
 8000dac:	46c8      	mov	r8, r9
 8000dae:	46a6      	mov	lr, r4
 8000db0:	d356      	bcc.n	8000e60 <__udivmoddi4+0x2a4>
 8000db2:	d053      	beq.n	8000e5c <__udivmoddi4+0x2a0>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x212>
 8000db6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dba:	eb61 010e 	sbc.w	r1, r1, lr
 8000dbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dc6:	40f1      	lsrs	r1, r6
 8000dc8:	431f      	orrs	r7, r3
 8000dca:	e9c5 7100 	strd	r7, r1, [r5]
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	f1c2 0320 	rsb	r3, r2, #32
 8000dda:	40d8      	lsrs	r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa21 f303 	lsr.w	r3, r1, r3
 8000de4:	4091      	lsls	r1, r2
 8000de6:	4301      	orrs	r1, r0
 8000de8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dec:	fa1f fe8c 	uxth.w	lr, ip
 8000df0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df4:	fb07 3610 	mls	r6, r7, r0, r3
 8000df8:	0c0b      	lsrs	r3, r1, #16
 8000dfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000e02:	429e      	cmp	r6, r3
 8000e04:	fa04 f402 	lsl.w	r4, r4, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x260>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e12:	d22f      	bcs.n	8000e74 <__udivmoddi4+0x2b8>
 8000e14:	429e      	cmp	r6, r3
 8000e16:	d92d      	bls.n	8000e74 <__udivmoddi4+0x2b8>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1b9b      	subs	r3, r3, r6
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e24:	fb07 3316 	mls	r3, r7, r6, r3
 8000e28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e30:	428b      	cmp	r3, r1
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x28a>
 8000e34:	eb1c 0101 	adds.w	r1, ip, r1
 8000e38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e3c:	d216      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d914      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e42:	3e02      	subs	r6, #2
 8000e44:	4461      	add	r1, ip
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e4c:	e738      	b.n	8000cc0 <__udivmoddi4+0x104>
 8000e4e:	462e      	mov	r6, r5
 8000e50:	4628      	mov	r0, r5
 8000e52:	e705      	b.n	8000c60 <__udivmoddi4+0xa4>
 8000e54:	4606      	mov	r6, r0
 8000e56:	e6e3      	b.n	8000c20 <__udivmoddi4+0x64>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6f8      	b.n	8000c4e <__udivmoddi4+0x92>
 8000e5c:	454b      	cmp	r3, r9
 8000e5e:	d2a9      	bcs.n	8000db4 <__udivmoddi4+0x1f8>
 8000e60:	ebb9 0802 	subs.w	r8, r9, r2
 8000e64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e68:	3801      	subs	r0, #1
 8000e6a:	e7a3      	b.n	8000db4 <__udivmoddi4+0x1f8>
 8000e6c:	4646      	mov	r6, r8
 8000e6e:	e7ea      	b.n	8000e46 <__udivmoddi4+0x28a>
 8000e70:	4620      	mov	r0, r4
 8000e72:	e794      	b.n	8000d9e <__udivmoddi4+0x1e2>
 8000e74:	4640      	mov	r0, r8
 8000e76:	e7d1      	b.n	8000e1c <__udivmoddi4+0x260>
 8000e78:	46d0      	mov	r8, sl
 8000e7a:	e77b      	b.n	8000d74 <__udivmoddi4+0x1b8>
 8000e7c:	3b02      	subs	r3, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	e732      	b.n	8000ce8 <__udivmoddi4+0x12c>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e709      	b.n	8000c9a <__udivmoddi4+0xde>
 8000e86:	4464      	add	r4, ip
 8000e88:	3802      	subs	r0, #2
 8000e8a:	e742      	b.n	8000d12 <__udivmoddi4+0x156>

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <init_LowPassFilter>:
 */
#include "LowPassFilter.h"
#include  <stdint.h>
#include <stdio.h>

void init_LowPassFilter(LowPassFilter *handle, float cutoffFreq, float sampletimeS) {
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e9c:	edc7 0a01 	vstr	s1, [r7, #4]

	float RC = 1.00f / (6.28318531f * cutoffFreq);
 8000ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f08 <init_LowPassFilter+0x78>
 8000ea8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb4:	edc7 7a05 	vstr	s15, [r7, #20]

	//compute alpha coefficient
	handle->alpha[0] = sampletimeS / (sampletimeS + RC);
 8000eb8:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ec4:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	edc3 7a00 	vstr	s15, [r3]
	//compute the inverse value of alpha coefficient
	handle->alpha[1] = RC / (sampletimeS + RC);
 8000ed2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ed6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ede:	edd7 6a05 	vldr	s13, [r7, #20]
 8000ee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	edc3 7a01 	vstr	s15, [r3, #4]

	//clear output buffer
	handle->out[0] = 0.00f;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
	handle->out[1] = 0.00f;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
}
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40c90fdb 	.word	0x40c90fdb

08000f0c <update_LowPassFilter>:

void update_LowPassFilter(LowPassFilter *handle, float input) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	ed87 0a00 	vstr	s0, [r7]

	//shift output sample
	handle->out[1] = handle->out[0];
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	60da      	str	r2, [r3, #12]

	//compute new output sample
	handle->out[0] = handle->alpha[0] * input + handle->alpha[1] * handle->out[1];
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	edd7 7a00 	vldr	s15, [r7]
 8000f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t data_array[] = {1,2,3,2,1,3,2,1,3,1,10,1,2,3,1,2,3,1,3,20,1,2,3,1,2,3,1,2,3,32,2,1,2};
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <main+0xa0>)
 8000f5c:	1d3c      	adds	r4, r7, #4
 8000f5e:	461d      	mov	r5, r3
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f68:	682b      	ldr	r3, [r5, #0]
 8000f6a:	7023      	strb	r3, [r4, #0]
	uint8_t i = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fced 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f843 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f9ab 	bl	80012d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7e:	f000 f989 	bl	8001294 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f82:	f000 f8a7 	bl	80010d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f86:	f000 f8f7 	bl	8001178 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f8a:	f000 f923 	bl	80011d4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f8e:	f000 f957 	bl	8001240 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000f92:	f007 fd0d 	bl	80089b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_LowPassFilter(&LPF1, 10.00f, 0.01f);
 8000f96:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000ff8 <main+0xa4>
 8000f9a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <main+0xa8>)
 8000fa0:	f7ff ff76 	bl	8000e90 <init_LowPassFilter>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  update_LowPassFilter(&LPF1, data_array[i]);
 8000fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa8:	3328      	adds	r3, #40	; 0x28
 8000faa:	443b      	add	r3, r7
 8000fac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbc:	480f      	ldr	r0, [pc, #60]	; (8000ffc <main+0xa8>)
 8000fbe:	f7ff ffa5 	bl	8000f0c <update_LowPassFilter>
	  uprintFloat(LPF1.out[0]);
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <main+0xa8>)
 8000fc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	f000 f9be 	bl	800134c <uprintFloat>

	  if(i>=33) {
 8000fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	d903      	bls.n	8000fe0 <main+0x8c>
		  i = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fde:	e004      	b.n	8000fea <main+0x96>
	  } else {
		  i++;
 8000fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  }

	  HAL_Delay(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 fd22 	bl	8001a34 <HAL_Delay>
	  update_LowPassFilter(&LPF1, data_array[i]);
 8000ff0:	e7d8      	b.n	8000fa4 <main+0x50>
 8000ff2:	bf00      	nop
 8000ff4:	0800bb90 	.word	0x0800bb90
 8000ff8:	3c23d70a 	.word	0x3c23d70a
 8000ffc:	20000318 	.word	0x20000318

08001000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	; 0x50
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	2230      	movs	r2, #48	; 0x30
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f008 fa2c 	bl	800946c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <SystemClock_Config+0xcc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a27      	ldr	r2, [pc, #156]	; (80010cc <SystemClock_Config+0xcc>)
 800102e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b25      	ldr	r3, [pc, #148]	; (80010cc <SystemClock_Config+0xcc>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <SystemClock_Config+0xd0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <SystemClock_Config+0xd0>)
 800104e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemClock_Config+0xd0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001060:	2301      	movs	r3, #1
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001074:	2308      	movs	r3, #8
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001078:	23a8      	movs	r3, #168	; 0xa8
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800107c:	2304      	movs	r3, #4
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001080:	2307      	movs	r3, #7
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f89b 	bl	80041c4 <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001094:	f000 f954 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2102      	movs	r1, #2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fafd 	bl	80046b4 <HAL_RCC_ClockConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010c0:	f000 f93e 	bl	8001340 <Error_Handler>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3750      	adds	r7, #80	; 0x50
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC1_Init+0x98>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_ADC1_Init+0x9c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC1_Init+0x98>)
 80010ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_ADC1_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_ADC1_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_ADC1_Init+0x98>)
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_ADC1_Init+0xa0>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_ADC1_Init+0x98>)
 8001122:	2201      	movs	r2, #1
 8001124:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_ADC1_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0x98>)
 8001130:	2201      	movs	r2, #1
 8001132:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_ADC1_Init+0x98>)
 8001136:	f000 fca1 	bl	8001a7c <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001140:	f000 f8fe 	bl	8001340 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_ADC1_Init+0x98>)
 8001156:	f000 fcd5 	bl	8001b04 <HAL_ADC_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001160:	f000 f8ee 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000180 	.word	0x20000180
 8001170:	40012000 	.word	0x40012000
 8001174:	0f000001 	.word	0x0f000001

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f001 fc43 	bl	8002a40 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 f8be 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000228 	.word	0x20000228
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_SPI1_Init+0x64>)
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <MX_SPI1_Init+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_SPI1_Init+0x64>)
 8001220:	220a      	movs	r2, #10
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f003 fc63 	bl	8004af0 <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001230:	f000 f886 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000027c 	.word	0x2000027c
 800123c:	40013000 	.word	0x40013000

08001240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <MX_USART1_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <MX_USART1_UART_Init+0x4c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART1_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART1_UART_Init+0x4c>)
 8001278:	f003 fcc3 	bl	8004c02 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001282:	f000 f85d 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200002d4 	.word	0x200002d4
 8001290:	40011000 	.word	0x40011000

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_DMA_Init+0x3c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <MX_DMA_Init+0x3c>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_DMA_Init+0x3c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2038      	movs	r0, #56	; 0x38
 80012bc:	f000 ff1b 	bl	80020f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012c0:	2038      	movs	r0, #56	; 0x38
 80012c2:	f000 ff34 	bl	800212e <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_GPIO_Init+0x68>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <MX_GPIO_Init+0x68>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_GPIO_Init+0x68>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_GPIO_Init+0x68>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <MX_GPIO_Init+0x68>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_GPIO_Init+0x68>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_GPIO_Init+0x68>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <MX_GPIO_Init+0x68>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_GPIO_Init+0x68>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <uprintFloat>:
#include "microprint.h"

void uprintFloat(float num) {
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
	char buf[8];
	static char* crnl = "\r\n";

	gcvt(num, 4, buf);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f8fe 	bl	8000558 <__aeabi_f2d>
 800135c:	4604      	mov	r4, r0
 800135e:	460d      	mov	r5, r1
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	2004      	movs	r0, #4
 8001368:	ec45 4b10 	vmov	d0, r4, r5
 800136c:	f008 f830 	bl	80093d0 <gcvt>

	CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7fe ff33 	bl	80001e0 <strlen>
 800137a:	4603      	mov	r3, r0
 800137c:	b29a      	uxth	r2, r3
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f007 fbd1 	bl	8008b2c <CDC_Transmit_FS>
	for(int i = 0;i<5000;i++) {
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e003      	b.n	8001398 <uprintFloat+0x4c>
		asm("NOP");
 8001390:	bf00      	nop
	for(int i = 0;i<5000;i++) {
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3301      	adds	r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f241 3287 	movw	r2, #4999	; 0x1387
 800139e:	4293      	cmp	r3, r2
 80013a0:	ddf6      	ble.n	8001390 <uprintFloat+0x44>
	}
	CDC_Transmit_FS(crnl, strlen(crnl));
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <uprintFloat+0x94>)
 80013a4:	681c      	ldr	r4, [r3, #0]
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <uprintFloat+0x94>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff18 	bl	80001e0 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4620      	mov	r0, r4
 80013b8:	f007 fbb8 	bl	8008b2c <CDC_Transmit_FS>
	for(int i = 0;i<5000;i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	e003      	b.n	80013ca <uprintFloat+0x7e>
		asm("NOP");
 80013c2:	bf00      	nop
	for(int i = 0;i<5000;i++) {
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	3301      	adds	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80013d0:	4293      	cmp	r3, r2
 80013d2:	ddf6      	ble.n	80013c2 <uprintFloat+0x76>
	}
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bdb0      	pop	{r4, r5, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_MspInit+0x4c>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <HAL_MspInit+0x4c>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_MspInit+0x4c>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_MspInit+0x4c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_MspInit+0x4c>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_MspInit+0x4c>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2e      	ldr	r2, [pc, #184]	; (800150c <HAL_ADC_MspInit+0xd8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d156      	bne.n	8001504 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a25      	ldr	r2, [pc, #148]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800148e:	2303      	movs	r3, #3
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001492:	2303      	movs	r3, #3
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	481c      	ldr	r0, [pc, #112]	; (8001514 <HAL_ADC_MspInit+0xe0>)
 80014a2:	f001 f949 	bl	8002738 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014a8:	4a1c      	ldr	r2, [pc, #112]	; (800151c <HAL_ADC_MspInit+0xe8>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014e8:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014ea:	f000 fe3b 	bl	8002164 <HAL_DMA_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80014f4:	f7ff ff24 	bl	8001340 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40012000 	.word	0x40012000
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000
 8001518:	200001c8 	.word	0x200001c8
 800151c:	40026410 	.word	0x40026410

08001520 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_I2C_MspInit+0x84>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12b      	bne.n	800159a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156e:	2304      	movs	r3, #4
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <HAL_I2C_MspInit+0x8c>)
 800157a:	f001 f8dd 	bl	8002738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_I2C_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40005400 	.word	0x40005400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_SPI_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_SPI_MspInit+0x88>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_SPI_MspInit+0x88>)
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_SPI_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_SPI_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_SPI_MspInit+0x88>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_SPI_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800160a:	23e0      	movs	r3, #224	; 0xe0
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800161a:	2305      	movs	r3, #5
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_SPI_MspInit+0x8c>)
 8001626:	f001 f887 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40013000 	.word	0x40013000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_UART_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12c      	bne.n	80016bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0x88>)
 800166c:	f043 0310 	orr.w	r3, r3, #16
 8001670:	6453      	str	r3, [r2, #68]	; 0x44
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a10      	ldr	r2, [pc, #64]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_UART_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800169a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ac:	2307      	movs	r3, #7
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_UART_MspInit+0x8c>)
 80016b8:	f001 f83e 	bl	8002738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40011000 	.word	0x40011000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f96a 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Stream0_IRQHandler+0x10>)
 800172a:	f000 fdc9 	bl	80022c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001c8 	.word	0x200001c8

08001738 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <OTG_FS_IRQHandler+0x10>)
 800173e:	f001 fc13 	bl	8002f68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001010 	.word	0x20001010

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001766:	f007 fe57 	bl	8009418 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
  return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
  while (1) {}    /* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
  }

  return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
  }
  return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
  return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f007 fdbc 	bl	8009418 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20010000 	.word	0x20010000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000328 	.word	0x20000328
 80018d4:	20001750 	.word	0x20001750

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f007 fd7b 	bl	8009424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fb11 	bl	8000f54 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001940:	0800bef0 	.word	0x0800bef0
  ldr r2, =_sbss
 8001944:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001948:	2000174c 	.word	0x2000174c

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 fbb1 	bl	80020e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fd2e 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fbc9 	bl	800214a <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 fb91 	bl	80020f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000004 	.word	0x20000004
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000008 	.word	0x20000008

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	2000032c 	.word	0x2000032c

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	2000032c 	.word	0x2000032c

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000000c 	.word	0x2000000c

08001a7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e033      	b.n	8001afa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fcca 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ac2:	f023 0302 	bic.w	r3, r3, #2
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f93a 	bl	8001d48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	f043 0201 	orr.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aea:	e001      	b.n	8001af0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x1c>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e105      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x228>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d925      	bls.n	8001b7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68d9      	ldr	r1, [r3, #12]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	3b1e      	subs	r3, #30
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	400a      	ands	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d9      	ldr	r1, [r3, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	4603      	mov	r3, r0
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4403      	add	r3, r0
 8001b6e:	3b1e      	subs	r3, #30
 8001b70:	409a      	lsls	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	e022      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6919      	ldr	r1, [r3, #16]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	2207      	movs	r2, #7
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4403      	add	r3, r0
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d824      	bhi.n	8001c14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b05      	subs	r3, #5
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	3b05      	subs	r3, #5
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
 8001c12:	e04c      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d824      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b23      	subs	r3, #35	; 0x23
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b23      	subs	r3, #35	; 0x23
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
 8001c64:	e023      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b41      	subs	r3, #65	; 0x41
 8001c78:	221f      	movs	r2, #31
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	400a      	ands	r2, r1
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b41      	subs	r3, #65	; 0x41
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_ADC_ConfigChannel+0x234>)
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <HAL_ADC_ConfigChannel+0x238>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1cc>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_ADC_ConfigChannel+0x238>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d123      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x21e>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d003      	beq.n	8001cea <HAL_ADC_ConfigChannel+0x1e6>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b11      	cmp	r3, #17
 8001ce8:	d11b      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d111      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_ADC_ConfigChannel+0x23c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_ADC_ConfigChannel+0x240>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9a      	lsrs	r2, r3, #18
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f9      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40012300 	.word	0x40012300
 8001d3c:	40012000 	.word	0x40012000
 8001d40:	20000004 	.word	0x20000004
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d50:	4b79      	ldr	r3, [pc, #484]	; (8001f38 <ADC_Init+0x1f0>)
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	021a      	lsls	r2, r3, #8
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6899      	ldr	r1, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <ADC_Init+0x1f4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d022      	beq.n	8001e26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e00f      	b.n	8001e46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0202 	bic.w	r2, r2, #2
 8001e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7e1b      	ldrb	r3, [r3, #24]
 8001e60:	005a      	lsls	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	035a      	lsls	r2, r3, #13
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e007      	b.n	8001ebc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	051a      	lsls	r2, r3, #20
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6899      	ldr	r1, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001efe:	025a      	lsls	r2, r3, #9
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6899      	ldr	r1, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	029a      	lsls	r2, r3, #10
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40012300 	.word	0x40012300
 8001f3c:	0f000001 	.word	0x0f000001

08001f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <__NVIC_SetPriorityGrouping+0x44>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 0307 	and.w	r3, r3, #7
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	db0b      	blt.n	8001fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	f003 021f 	and.w	r2, r3, #31
 8001fbc:	4907      	ldr	r1, [pc, #28]	; (8001fdc <__NVIC_EnableIRQ+0x38>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
         );
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	; 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ac:	d301      	bcc.n	80020b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00f      	b.n	80020d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b2:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <SysTick_Config+0x40>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ba:	210f      	movs	r1, #15
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	f7ff ff8e 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <SysTick_Config+0x40>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <SysTick_Config+0x40>)
 80020cc:	2207      	movs	r2, #7
 80020ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	e000e010 	.word	0xe000e010

080020e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff29 	bl	8001f40 <__NVIC_SetPriorityGrouping>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff3e 	bl	8001f88 <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff8e 	bl	8002034 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5d 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff31 	bl	8001fa4 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa2 	bl	800209c <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fc54 	bl	8001a1c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e099      	b.n	80022b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a0:	e00f      	b.n	80021c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a2:	f7ff fc3b 	bl	8001a1c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b05      	cmp	r3, #5
 80021ae:	d908      	bls.n	80021c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2203      	movs	r2, #3
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e078      	b.n	80022b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e8      	bne.n	80021a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_DMA_Init+0x158>)
 80021dc:	4013      	ands	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b04      	cmp	r3, #4
 800221a:	d107      	bne.n	800222c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4313      	orrs	r3, r2
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b04      	cmp	r3, #4
 8002254:	d117      	bne.n	8002286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00e      	beq.n	8002286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f9e9 	bl	8002640 <DMA_CheckFifoParam>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002282:	2301      	movs	r3, #1
 8002284:	e016      	b.n	80022b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9a0 	bl	80025d4 <DMA_CalcBaseAndBitshift>
 8002294:	4603      	mov	r3, r0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	223f      	movs	r2, #63	; 0x3f
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	f010803f 	.word	0xf010803f

080022c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022cc:	4b8e      	ldr	r3, [pc, #568]	; (8002508 <HAL_DMA_IRQHandler+0x248>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a8e      	ldr	r2, [pc, #568]	; (800250c <HAL_DMA_IRQHandler+0x24c>)
 80022d2:	fba2 2303 	umull	r2, r3, r2, r3
 80022d6:	0a9b      	lsrs	r3, r3, #10
 80022d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	2208      	movs	r2, #8
 80022ec:	409a      	lsls	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01a      	beq.n	800232c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0204 	bic.w	r2, r2, #4
 8002312:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2208      	movs	r2, #8
 800231a:	409a      	lsls	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	2201      	movs	r2, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d012      	beq.n	8002362 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00b      	beq.n	8002362 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	2201      	movs	r2, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f043 0202 	orr.w	r2, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2204      	movs	r2, #4
 8002368:	409a      	lsls	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d012      	beq.n	8002398 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	2204      	movs	r2, #4
 8002386:	409a      	lsls	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f043 0204 	orr.w	r2, r3, #4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	2210      	movs	r2, #16
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d043      	beq.n	8002430 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d03c      	beq.n	8002430 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2210      	movs	r2, #16
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d018      	beq.n	8002402 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d024      	beq.n	8002430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
 80023ee:	e01f      	b.n	8002430 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
 8002400:	e016      	b.n	8002430 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0208 	bic.w	r2, r2, #8
 800241e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002434:	2220      	movs	r2, #32
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 808f 	beq.w	8002560 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8087 	beq.w	8002560 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2220      	movs	r2, #32
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b05      	cmp	r3, #5
 8002468:	d136      	bne.n	80024d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0216 	bic.w	r2, r2, #22
 8002478:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002488:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <HAL_DMA_IRQHandler+0x1da>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0208 	bic.w	r2, r2, #8
 80024a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	223f      	movs	r2, #63	; 0x3f
 80024b0:	409a      	lsls	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d07e      	beq.n	80025cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
        }
        return;
 80024d6:	e079      	b.n	80025cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01d      	beq.n	8002522 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d031      	beq.n	8002560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
 8002504:	e02c      	b.n	8002560 <HAL_DMA_IRQHandler+0x2a0>
 8002506:	bf00      	nop
 8002508:	20000004 	.word	0x20000004
 800250c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d023      	beq.n	8002560 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4798      	blx	r3
 8002520:	e01e      	b.n	8002560 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10f      	bne.n	8002550 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0210 	bic.w	r2, r2, #16
 800253e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	2b00      	cmp	r3, #0
 8002566:	d032      	beq.n	80025ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d022      	beq.n	80025ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2205      	movs	r2, #5
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	3301      	adds	r3, #1
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	d307      	bcc.n	80025a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f2      	bne.n	800258c <HAL_DMA_IRQHandler+0x2cc>
 80025a6:	e000      	b.n	80025aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	4798      	blx	r3
 80025ca:	e000      	b.n	80025ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80025cc:	bf00      	nop
    }
  }
}
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3b10      	subs	r3, #16
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <DMA_CalcBaseAndBitshift+0x64>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <DMA_CalcBaseAndBitshift+0x68>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d909      	bls.n	8002616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	659a      	str	r2, [r3, #88]	; 0x58
 8002614:	e007      	b.n	8002626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	aaaaaaab 	.word	0xaaaaaaab
 800263c:	0800bc18 	.word	0x0800bc18

08002640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11f      	bne.n	800269a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d856      	bhi.n	800270e <DMA_CheckFifoParam+0xce>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <DMA_CheckFifoParam+0x28>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	0800268b 	.word	0x0800268b
 8002670:	08002679 	.word	0x08002679
 8002674:	0800270f 	.word	0x0800270f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d046      	beq.n	8002712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e043      	b.n	8002712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002692:	d140      	bne.n	8002716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e03d      	b.n	8002716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	d121      	bne.n	80026e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d837      	bhi.n	800271a <DMA_CheckFifoParam+0xda>
 80026aa:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <DMA_CheckFifoParam+0x70>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026c7 	.word	0x080026c7
 80026b8:	080026c1 	.word	0x080026c1
 80026bc:	080026d9 	.word	0x080026d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e030      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d025      	beq.n	800271e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e022      	b.n	800271e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e0:	d11f      	bne.n	8002722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026e6:	e01c      	b.n	8002722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d903      	bls.n	80026f6 <DMA_CheckFifoParam+0xb6>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d003      	beq.n	80026fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026f4:	e018      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      break;
 80026fa:	e015      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e00b      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 800270e:	bf00      	nop
 8002710:	e00a      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e008      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e006      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e004      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;   
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002726:	bf00      	nop
    }
  } 
  
  return status; 
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e159      	b.n	8002a08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 8148 	bne.w	8002a02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d005      	beq.n	800278a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002786:	2b02      	cmp	r3, #2
 8002788:	d130      	bne.n	80027ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 0201 	and.w	r2, r3, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d017      	beq.n	8002828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d123      	bne.n	800287c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a2 	beq.w	8002a02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <HAL_GPIO_Init+0x2e8>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a56      	ldr	r2, [pc, #344]	; (8002a20 <HAL_GPIO_Init+0x2e8>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <HAL_GPIO_Init+0x2e8>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028da:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_GPIO_Init+0x2ec>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a49      	ldr	r2, [pc, #292]	; (8002a28 <HAL_GPIO_Init+0x2f0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x202>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a48      	ldr	r2, [pc, #288]	; (8002a2c <HAL_GPIO_Init+0x2f4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x1fe>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a47      	ldr	r2, [pc, #284]	; (8002a30 <HAL_GPIO_Init+0x2f8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x1fa>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a46      	ldr	r2, [pc, #280]	; (8002a34 <HAL_GPIO_Init+0x2fc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x1f6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a45      	ldr	r2, [pc, #276]	; (8002a38 <HAL_GPIO_Init+0x300>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x1f2>
 8002926:	2304      	movs	r3, #4
 8002928:	e008      	b.n	800293c <HAL_GPIO_Init+0x204>
 800292a:	2307      	movs	r3, #7
 800292c:	e006      	b.n	800293c <HAL_GPIO_Init+0x204>
 800292e:	2303      	movs	r3, #3
 8002930:	e004      	b.n	800293c <HAL_GPIO_Init+0x204>
 8002932:	2302      	movs	r3, #2
 8002934:	e002      	b.n	800293c <HAL_GPIO_Init+0x204>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_GPIO_Init+0x204>
 800293a:	2300      	movs	r3, #0
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f002 0203 	and.w	r2, r2, #3
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	4093      	lsls	r3, r2
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800294c:	4935      	ldr	r1, [pc, #212]	; (8002a24 <HAL_GPIO_Init+0x2ec>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	3302      	adds	r3, #2
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_GPIO_Init+0x304>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <HAL_GPIO_Init+0x304>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_GPIO_Init+0x304>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_GPIO_Init+0x304>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <HAL_GPIO_Init+0x304>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d2:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_GPIO_Init+0x304>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_GPIO_Init+0x304>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fc:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <HAL_GPIO_Init+0x304>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3301      	adds	r3, #1
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	f67f aea2 	bls.w	8002754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40013c00 	.word	0x40013c00

08002a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e12b      	b.n	8002caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fe fd5a 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	; 0x24
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f001 fffc 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a81      	ldr	r2, [pc, #516]	; (8002cb4 <HAL_I2C_Init+0x274>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d807      	bhi.n	8002ac4 <HAL_I2C_Init+0x84>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a80      	ldr	r2, [pc, #512]	; (8002cb8 <HAL_I2C_Init+0x278>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	bf94      	ite	ls
 8002abc:	2301      	movls	r3, #1
 8002abe:	2300      	movhi	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e006      	b.n	8002ad2 <HAL_I2C_Init+0x92>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a7d      	ldr	r2, [pc, #500]	; (8002cbc <HAL_I2C_Init+0x27c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0e7      	b.n	8002caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <HAL_I2C_Init+0x280>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0c9b      	lsrs	r3, r3, #18
 8002ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a6a      	ldr	r2, [pc, #424]	; (8002cb4 <HAL_I2C_Init+0x274>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d802      	bhi.n	8002b14 <HAL_I2C_Init+0xd4>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3301      	adds	r3, #1
 8002b12:	e009      	b.n	8002b28 <HAL_I2C_Init+0xe8>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_I2C_Init+0x284>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	3301      	adds	r3, #1
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	495c      	ldr	r1, [pc, #368]	; (8002cb4 <HAL_I2C_Init+0x274>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d819      	bhi.n	8002b7c <HAL_I2C_Init+0x13c>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e59      	subs	r1, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_I2C_Init+0x138>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e59      	subs	r1, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b76:	e051      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	e04f      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d111      	bne.n	8002ba8 <HAL_I2C_Init+0x168>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1e58      	subs	r0, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e012      	b.n	8002bce <HAL_I2C_Init+0x18e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Init+0x196>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e022      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10e      	bne.n	8002bfc <HAL_I2C_Init+0x1bc>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e58      	subs	r0, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	440b      	add	r3, r1
 8002bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfa:	e00f      	b.n	8002c1c <HAL_I2C_Init+0x1dc>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1e58      	subs	r0, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	0099      	lsls	r1, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6809      	ldr	r1, [r1, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6911      	ldr	r1, [r2, #16]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	4311      	orrs	r1, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	000186a0 	.word	0x000186a0
 8002cb8:	001e847f 	.word	0x001e847f
 8002cbc:	003d08ff 	.word	0x003d08ff
 8002cc0:	431bde83 	.word	0x431bde83
 8002cc4:	10624dd3 	.word	0x10624dd3

08002cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cca:	b08f      	sub	sp, #60	; 0x3c
 8002ccc:	af0a      	add	r7, sp, #40	; 0x28
 8002cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e10f      	b.n	8002efa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f006 f861 	bl	8008dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fb48 	bl	80053ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	687e      	ldr	r6, [r7, #4]
 8002d26:	466d      	mov	r5, sp
 8002d28:	f106 0410 	add.w	r4, r6, #16
 8002d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d38:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d3c:	1d33      	adds	r3, r6, #4
 8002d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d40:	6838      	ldr	r0, [r7, #0]
 8002d42:	f002 fa1f 	bl	8005184 <USB_CoreInit>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0d0      	b.n	8002efa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fb36 	bl	80053d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e04a      	b.n	8002e00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	333d      	adds	r3, #61	; 0x3d
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	333c      	adds	r3, #60	; 0x3c
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	b298      	uxth	r0, r3
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	; 0x44
 8002da6:	4602      	mov	r2, r0
 8002da8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3340      	adds	r3, #64	; 0x40
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3348      	adds	r3, #72	; 0x48
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	334c      	adds	r3, #76	; 0x4c
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3354      	adds	r3, #84	; 0x54
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3af      	bcc.n	8002d6a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	e044      	b.n	8002e9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3301      	adds	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d3b5      	bcc.n	8002e10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	687e      	ldr	r6, [r7, #4]
 8002eac:	466d      	mov	r5, sp
 8002eae:	f106 0410 	add.w	r4, r6, #16
 8002eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ebe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ec2:	1d33      	adds	r3, r6, #4
 8002ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	f002 face 	bl	8005468 <USB_DevInit>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00d      	b.n	8002efa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fc1d 	bl	8006732 <USB_DevDisconnect>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_PCD_Start+0x1c>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e020      	b.n	8002f60 <HAL_PCD_Start+0x5e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d109      	bne.n	8002f42 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 fa20 	bl	800538c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 fbcd 	bl	80066f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b08d      	sub	sp, #52	; 0x34
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fc8b 	bl	800689a <USB_GetMode>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 848a 	bne.w	80038a0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fbef 	bl	8006774 <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8480 	beq.w	800389e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fbdc 	bl	8006774 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d107      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f002 0202 	and.w	r2, r2, #2
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f003 fbca 	bl	8006774 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d161      	bne.n	80030ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0210 	bic.w	r2, r2, #16
 8002ff8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	f003 020f 	and.w	r2, r3, #15
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	3304      	adds	r3, #4
 8003018:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	0c5b      	lsrs	r3, r3, #17
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	2b02      	cmp	r3, #2
 8003024:	d124      	bne.n	8003070 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d035      	beq.n	800309e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800303c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6a38      	ldr	r0, [r7, #32]
 8003046:	f003 fa01 	bl	800644c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003056:	441a      	add	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003068:	441a      	add	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	621a      	str	r2, [r3, #32]
 800306e:	e016      	b.n	800309e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	0c5b      	lsrs	r3, r3, #17
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	2b06      	cmp	r3, #6
 800307a:	d110      	bne.n	800309e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003082:	2208      	movs	r2, #8
 8003084:	4619      	mov	r1, r3
 8003086:	6a38      	ldr	r0, [r7, #32]
 8003088:	f003 f9e0 	bl	800644c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003098:	441a      	add	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0210 	orr.w	r2, r2, #16
 80030ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 fb5e 	bl	8006774 <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030c2:	f040 80a7 	bne.w	8003214 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fb63 	bl	800679a <USB_ReadDevAllOutEpInterrupt>
 80030d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030d6:	e099      	b.n	800320c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 808e 	beq.w	8003200 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f003 fb87 	bl	8006802 <USB_ReadDevOutEPInterrupt>
 80030f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310c:	461a      	mov	r2, r3
 800310e:	2301      	movs	r3, #1
 8003110:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fec3 	bl	8003ea0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	2308      	movs	r3, #8
 8003134:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003136:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 ff99 	bl	8004070 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003154:	461a      	mov	r2, r3
 8003156:	2310      	movs	r3, #16
 8003158:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d030      	beq.n	80031c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d109      	bne.n	8003184 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003182:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	78db      	ldrb	r3, [r3, #3]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d108      	bne.n	80031b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f005 ff00 	bl	8008fb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c0:	461a      	mov	r2, r3
 80031c2:	2302      	movs	r3, #2
 80031c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	2320      	movs	r3, #32
 80031e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	3301      	adds	r3, #1
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	f47f af62 	bne.w	80030d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 faab 	bl	8006774 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003228:	f040 80db 	bne.w	80033e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 facc 	bl	80067ce <USB_ReadDevAllInEpInterrupt>
 8003236:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800323c:	e0cd      	b.n	80033da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80c2 	beq.w	80033ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f003 faf2 	bl	800683e <USB_ReadDevInEPInterrupt>
 800325a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d057      	beq.n	8003316 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	2201      	movs	r2, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	69f9      	ldr	r1, [r7, #28]
 8003282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003286:	4013      	ands	r3, r2
 8003288:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003296:	461a      	mov	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d132      	bne.n	800330a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334c      	adds	r3, #76	; 0x4c
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4403      	add	r3, r0
 80032c4:	3348      	adds	r3, #72	; 0x48
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4419      	add	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4403      	add	r3, r0
 80032d8:	334c      	adds	r3, #76	; 0x4c
 80032da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d113      	bne.n	800330a <HAL_PCD_IRQHandler+0x3a2>
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3354      	adds	r3, #84	; 0x54
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003302:	461a      	mov	r2, r3
 8003304:	2101      	movs	r1, #1
 8003306:	f003 faf9 	bl	80068fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	b2db      	uxtb	r3, r3
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f005 fdd4 	bl	8008ebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332c:	461a      	mov	r2, r3
 800332e:	2308      	movs	r3, #8
 8003330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003348:	461a      	mov	r2, r3
 800334a:	2310      	movs	r3, #16
 800334c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	461a      	mov	r2, r3
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d023      	beq.n	80033bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003376:	6a38      	ldr	r0, [r7, #32]
 8003378:	f002 f9da 	bl	8005730 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3338      	adds	r3, #56	; 0x38
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	78db      	ldrb	r3, [r3, #3]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d108      	bne.n	80033aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2200      	movs	r2, #0
 800339c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f005 fe17 	bl	8008fd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b6:	461a      	mov	r2, r3
 80033b8:	2302      	movs	r3, #2
 80033ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fcdb 	bl	8003d84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	3301      	adds	r3, #1
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f af2e 	bne.w	800323e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 f9c4 	bl	8006774 <USB_ReadInterrupts>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033f6:	d122      	bne.n	800343e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003412:	2b01      	cmp	r3, #1
 8003414:	d108      	bne.n	8003428 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800341e:	2100      	movs	r1, #0
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fec3 	bl	80041ac <HAL_PCDEx_LPM_Callback>
 8003426:	e002      	b.n	800342e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f005 fdb5 	bl	8008f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800343c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f003 f996 	bl	8006774 <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003452:	d112      	bne.n	800347a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f005 fd71 	bl	8008f4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003478:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f003 f978 	bl	8006774 <USB_ReadInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	f040 80b7 	bne.w	8003600 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2110      	movs	r1, #16
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 f93f 	bl	8005730 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b6:	e046      	b.n	8003546 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	461a      	mov	r2, r3
 80034c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034dc:	0151      	lsls	r1, r2, #5
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	440a      	add	r2, r1
 80034e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003510:	0151      	lsls	r1, r2, #5
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	440a      	add	r2, r1
 8003516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800351a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800351e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	440a      	add	r2, r1
 8003536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800353a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800353e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	3301      	adds	r3, #1
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d3b3      	bcc.n	80034b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800355e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003562:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b00      	cmp	r3, #0
 800356a:	d016      	beq.n	800359a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357c:	f043 030b 	orr.w	r3, r3, #11
 8003580:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003592:	f043 030b 	orr.w	r3, r3, #11
 8003596:	6453      	str	r3, [r2, #68]	; 0x44
 8003598:	e015      	b.n	80035c6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80035b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c0:	f043 030b 	orr.w	r3, r3, #11
 80035c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035ea:	461a      	mov	r2, r3
 80035ec:	f003 f986 	bl	80068fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80035fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 f8b5 	bl	8006774 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003614:	d124      	bne.n	8003660 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 f94b 	bl	80068b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f002 f900 	bl	800582a <USB_GetDevSpeed>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681c      	ldr	r4, [r3, #0]
 8003636:	f001 fa27 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 800363a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	4620      	mov	r0, r4
 8003646:	f001 fdff 	bl	8005248 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f005 fc5f 	bl	8008f0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800365e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f003 f885 	bl	8006774 <USB_ReadInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b08      	cmp	r3, #8
 8003672:	d10a      	bne.n	800368a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f005 fc3c 	bl	8008ef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f002 0208 	and.w	r2, r2, #8
 8003688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f003 f870 	bl	8006774 <USB_ReadInterrupts>
 8003694:	4603      	mov	r3, r0
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d122      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036aa:	2301      	movs	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e014      	b.n	80036da <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fb27 	bl	8003d22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	3301      	adds	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d3e5      	bcc.n	80036b0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 f843 	bl	8006774 <USB_ReadInterrupts>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f8:	d13b      	bne.n	8003772 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036fa:	2301      	movs	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e02b      	b.n	8003758 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3340      	adds	r3, #64	; 0x40
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d115      	bne.n	8003752 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003726:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003728:	2b00      	cmp	r3, #0
 800372a:	da12      	bge.n	8003752 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	333f      	adds	r3, #63	; 0x3f
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fae8 	bl	8003d22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	3301      	adds	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	429a      	cmp	r2, r3
 8003760:	d3ce      	bcc.n	8003700 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f002 fffc 	bl	8006774 <USB_ReadInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003786:	d155      	bne.n	8003834 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
 800378c:	e045      	b.n	800381a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d12e      	bne.n	8003814 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da2b      	bge.n	8003814 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d121      	bne.n	8003814 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003810:	6053      	str	r3, [r2, #4]
            break;
 8003812:	e007      	b.n	8003824 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	3301      	adds	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	429a      	cmp	r2, r3
 8003822:	d3b4      	bcc.n	800378e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f002 ff9b 	bl	8006774 <USB_ReadInterrupts>
 800383e:	4603      	mov	r3, r0
 8003840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003848:	d10a      	bne.n	8003860 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f005 fbd6 	bl	8008ffc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800385e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f002 ff85 	bl	8006774 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b04      	cmp	r3, #4
 8003872:	d115      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f005 fbc6 	bl	8009018 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	e000      	b.n	80038a0 <HAL_PCD_IRQHandler+0x938>
      return;
 800389e:	bf00      	nop
    }
  }
}
 80038a0:	3734      	adds	r7, #52	; 0x34
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}

080038a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_PCD_SetAddress+0x1a>
 80038bc:	2302      	movs	r3, #2
 80038be:	e013      	b.n	80038e8 <HAL_PCD_SetAddress+0x42>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 fee3 	bl	80066a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	70fb      	strb	r3, [r7, #3]
 8003902:	460b      	mov	r3, r1
 8003904:	803b      	strh	r3, [r7, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800390e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da0f      	bge.n	8003936 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	3338      	adds	r3, #56	; 0x38
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	705a      	strb	r2, [r3, #1]
 8003934:	e00f      	b.n	8003956 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	3304      	adds	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003962:	883a      	ldrh	r2, [r7, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	78ba      	ldrb	r2, [r7, #2]
 800396c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003980:	78bb      	ldrb	r3, [r7, #2]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d102      	bne.n	800398c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_EP_Open+0xaa>
 8003996:	2302      	movs	r3, #2
 8003998:	e00e      	b.n	80039b8 <HAL_PCD_EP_Open+0xc8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68f9      	ldr	r1, [r7, #12]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 ff63 	bl	8005874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80039b6:	7afb      	ldrb	r3, [r7, #11]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da0f      	bge.n	80039f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	3338      	adds	r3, #56	; 0x38
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00f      	b.n	8003a14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 020f 	and.w	r2, r3, #15
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_PCD_EP_Close+0x6e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e00e      	b.n	8003a4c <HAL_PCD_EP_Close+0x8c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 ffa1 	bl	8005984 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	460b      	mov	r3, r1
 8003a62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a64:	7afb      	ldrb	r3, [r7, #11]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	f002 fa80 	bl	8005fcc <USB_EP0StartXfer>
 8003acc:	e008      	b.n	8003ae0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	f002 f82e 	bl	8005b3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b0c:	681b      	ldr	r3, [r3, #0]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	460b      	mov	r3, r1
 8003b28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	7afb      	ldrb	r3, [r7, #11]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2201      	movs	r2, #1
 8003b58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d102      	bne.n	8003b74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6979      	ldr	r1, [r7, #20]
 8003b8c:	f002 fa1e 	bl	8005fcc <USB_EP0StartXfer>
 8003b90:	e008      	b.n	8003ba4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6979      	ldr	r1, [r7, #20]
 8003ba0:	f001 ffcc 	bl	8005b3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e050      	b.n	8003c6e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da0f      	bge.n	8003bf4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	3338      	adds	r3, #56	; 0x38
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	705a      	strb	r2, [r3, #1]
 8003bf2:	e00d      	b.n	8003c10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_PCD_EP_SetStall+0x82>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e01e      	b.n	8003c6e <HAL_PCD_EP_SetStall+0xc0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68f9      	ldr	r1, [r7, #12]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f002 fc5c 	bl	80064fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	b2d9      	uxtb	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f002 fe4c 	bl	80068fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d901      	bls.n	8003c94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e042      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da0f      	bge.n	8003cbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	3338      	adds	r3, #56	; 0x38
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	705a      	strb	r2, [r3, #1]
 8003cba:	e00f      	b.n	8003cdc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_EP_ClrStall+0x86>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e00e      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0xa4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fc64 	bl	80065d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da0c      	bge.n	8003d50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 020f 	and.w	r2, r3, #15
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	3338      	adds	r3, #56	; 0x38
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e00c      	b.n	8003d6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 020f 	and.w	r2, r3, #15
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f002 fa83 	bl	800627c <USB_EPStopXfer>
 8003d76:	4603      	mov	r3, r0
 8003d78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3338      	adds	r3, #56	; 0x38
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d901      	bls.n	8003dbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e06c      	b.n	8003e96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d902      	bls.n	8003dd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3303      	adds	r3, #3
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de0:	e02b      	b.n	8003e3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d902      	bls.n	8003dfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3303      	adds	r3, #3
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6919      	ldr	r1, [r3, #16]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f002 fad7 	bl	80063d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	441a      	add	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	441a      	add	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d809      	bhi.n	8003e64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d203      	bcs.n	8003e64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1be      	bne.n	8003de2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d811      	bhi.n	8003e94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	6939      	ldr	r1, [r7, #16]
 8003e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e90:	4013      	ands	r3, r2
 8003e92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	333c      	adds	r3, #60	; 0x3c
 8003eb8:	3304      	adds	r3, #4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d17b      	bne.n	8003fce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d015      	beq.n	8003f0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	4a61      	ldr	r2, [pc, #388]	; (8004068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	f240 80b9 	bls.w	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80b3 	beq.w	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	461a      	mov	r2, r3
 8003f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f08:	6093      	str	r3, [r2, #8]
 8003f0a:	e0a7      	b.n	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	461a      	mov	r2, r3
 8003f24:	2320      	movs	r3, #32
 8003f26:	6093      	str	r3, [r2, #8]
 8003f28:	e098      	b.n	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8093 	bne.w	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4a4b      	ldr	r2, [pc, #300]	; (8004068 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d90f      	bls.n	8003f5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	461a      	mov	r2, r3
 8003f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5a:	6093      	str	r3, [r2, #8]
 8003f5c:	e07e      	b.n	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3304      	adds	r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	0159      	lsls	r1, r3, #5
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	440b      	add	r3, r1
 8003f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	1ad2      	subs	r2, r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d114      	bne.n	8003fc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2101      	movs	r1, #1
 8003fac:	f002 fca6 	bl	80068fc <USB_EP0_OutStart>
 8003fb0:	e006      	b.n	8003fc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	441a      	add	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f004 ff5e 	bl	8008e88 <HAL_PCD_DataOutStageCallback>
 8003fcc:	e046      	b.n	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	4a26      	ldr	r2, [pc, #152]	; (800406c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d124      	bne.n	8004020 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fec:	461a      	mov	r2, r3
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	6093      	str	r3, [r2, #8]
 8003ff4:	e032      	b.n	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	2320      	movs	r3, #32
 8004010:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f004 ff35 	bl	8008e88 <HAL_PCD_DataOutStageCallback>
 800401e:	e01d      	b.n	800405c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d114      	bne.n	8004050 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004048:	461a      	mov	r2, r3
 800404a:	2100      	movs	r1, #0
 800404c:	f002 fc56 	bl	80068fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f004 ff16 	bl	8008e88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	4f54300a 	.word	0x4f54300a
 800406c:	4f54310a 	.word	0x4f54310a

08004070 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	333c      	adds	r3, #60	; 0x3c
 8004088:	3304      	adds	r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d90e      	bls.n	80040c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f004 fecd 	bl	8008e64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d90c      	bls.n	80040ec <PCD_EP_OutSetupPacket_int+0x7c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d108      	bne.n	80040ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040e4:	461a      	mov	r2, r3
 80040e6:	2101      	movs	r1, #1
 80040e8:	f002 fc08 	bl	80068fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	4f54300a 	.word	0x4f54300a

080040fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
 8004108:	4613      	mov	r3, r2
 800410a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800411a:	883b      	ldrh	r3, [r7, #0]
 800411c:	0419      	lsls	r1, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	430a      	orrs	r2, r1
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
 8004128:	e028      	b.n	800417c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4413      	add	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e00d      	b.n	800415a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3340      	adds	r3, #64	; 0x40
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	3301      	adds	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	3b01      	subs	r3, #1
 8004160:	429a      	cmp	r2, r3
 8004162:	d3ec      	bcc.n	800413e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004164:	883b      	ldrh	r3, [r7, #0]
 8004166:	0418      	lsls	r0, r3, #16
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6819      	ldr	r1, [r3, #0]
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	3b01      	subs	r3, #1
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4302      	orrs	r2, r0
 8004174:	3340      	adds	r3, #64	; 0x40
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e267      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d075      	beq.n	80042ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d00c      	beq.n	8004208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d112      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fa:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004206:	d10b      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	4b7e      	ldr	r3, [pc, #504]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05b      	beq.n	80042cc <HAL_RCC_OscConfig+0x108>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d157      	bne.n	80042cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e242      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d106      	bne.n	8004238 <HAL_RCC_OscConfig+0x74>
 800422a:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x98>
 8004242:	4b70      	ldr	r3, [pc, #448]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6f      	ldr	r2, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6c      	ldr	r2, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 800425c:	4b69      	ldr	r3, [pc, #420]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a68      	ldr	r2, [pc, #416]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b66      	ldr	r3, [pc, #408]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a65      	ldr	r2, [pc, #404]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fd fbce 	bl	8001a1c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f7fd fbca 	bl	8001a1c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e207      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fd fbba 	bl	8001a1c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd fbb6 	bl	8001a1c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e1f3      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b51      	ldr	r3, [pc, #324]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0xe8>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1c7      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4937      	ldr	r1, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x244>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fd fb6f 	bl	8001a1c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004342:	f7fd fb6b 	bl	8001a1c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1a8      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4925      	ldr	r1, [pc, #148]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x244>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fb4e 	bl	8001a1c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004384:	f7fd fb4a 	bl	8001a1c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e187      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d036      	beq.n	800441c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x248>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fd fb2e 	bl	8001a1c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fd fb2a 	bl	8001a1c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e167      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x200>
 80043e2:	e01b      	b.n	800441c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x248>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ea:	f7fd fb17 	bl	8001a1c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00e      	b.n	8004410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fd fb13 	bl	8001a1c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d907      	bls.n	8004410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e150      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
 8004404:	40023800 	.word	0x40023800
 8004408:	42470000 	.word	0x42470000
 800440c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ea      	bne.n	80043f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8097 	beq.w	8004558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b81      	ldr	r3, [pc, #516]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b7d      	ldr	r3, [pc, #500]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a7c      	ldr	r2, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b77      	ldr	r3, [pc, #476]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b74      	ldr	r3, [pc, #464]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a73      	ldr	r2, [pc, #460]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fd fad3 	bl	8001a1c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fd facf 	bl	8001a1c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e10c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x2ea>
 80044a0:	4b64      	ldr	r3, [pc, #400]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a63      	ldr	r2, [pc, #396]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x324>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x30c>
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a5e      	ldr	r2, [pc, #376]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a5b      	ldr	r2, [pc, #364]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x324>
 80044d0:	4b58      	ldr	r3, [pc, #352]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a57      	ldr	r2, [pc, #348]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b55      	ldr	r3, [pc, #340]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a54      	ldr	r2, [pc, #336]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fd fa94 	bl	8001a1c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd fa90 	bl	8001a1c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0cb      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	4b49      	ldr	r3, [pc, #292]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RCC_OscConfig+0x334>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fd fa7e 	bl	8001a1c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fd fa7a 	bl	8001a1c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0b5      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453a:	4b3e      	ldr	r3, [pc, #248]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ee      	bne.n	8004524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b39      	ldr	r3, [pc, #228]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	4a38      	ldr	r2, [pc, #224]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a1 	beq.w	80046a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004562:	4b34      	ldr	r3, [pc, #208]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d05c      	beq.n	8004628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d141      	bne.n	80045fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_OscConfig+0x478>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd fa4e 	bl	8001a1c <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fa4a 	bl	8001a1c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e087      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	491b      	ldr	r1, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x478>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fd fa23 	bl	8001a1c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f7fd fa1f 	bl	8001a1c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e05c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x416>
 80045f8:	e054      	b.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_OscConfig+0x478>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd fa0c 	bl	8001a1c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd fa08 	bl	8001a1c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e045      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x444>
 8004626:	e03d      	b.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e038      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
 8004634:	40023800 	.word	0x40023800
 8004638:	40007000 	.word	0x40007000
 800463c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x4ec>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d028      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d121      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d11a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004678:	4293      	cmp	r3, r2
 800467a:	d111      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	3b01      	subs	r3, #1
 800468a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0cc      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b68      	ldr	r3, [pc, #416]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90c      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b63      	ldr	r3, [pc, #396]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b8      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a58      	ldr	r2, [pc, #352]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004720:	4b53      	ldr	r3, [pc, #332]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b50      	ldr	r3, [pc, #320]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	494d      	ldr	r1, [pc, #308]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d044      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d119      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d003      	beq.n	8004772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	2b03      	cmp	r3, #3
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e067      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b37      	ldr	r3, [pc, #220]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4934      	ldr	r1, [pc, #208]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f7fd f93a 	bl	8001a1c <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fd f936 	bl	8001a1c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20c      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e032      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4916      	ldr	r1, [pc, #88]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483a:	f000 f821 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490a      	ldr	r1, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd f89a 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023c00 	.word	0x40023c00
 8004870:	40023800 	.word	0x40023800
 8004874:	0800bc00 	.word	0x0800bc00
 8004878:	20000004 	.word	0x20000004
 800487c:	20000008 	.word	0x20000008

08004880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b094      	sub	sp, #80	; 0x50
 8004886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	2300      	movs	r3, #0
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004890:	2300      	movs	r3, #0
 8004892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004898:	4b79      	ldr	r3, [pc, #484]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d00d      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x40>
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	f200 80e1 	bhi.w	8004a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x34>
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x3a>
 80048b2:	e0db      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b73      	ldr	r3, [pc, #460]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80048b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048b8:	e0db      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ba:	4b72      	ldr	r3, [pc, #456]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80048bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048be:	e0d8      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c0:	4b6f      	ldr	r3, [pc, #444]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ca:	4b6d      	ldr	r3, [pc, #436]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	4b6a      	ldr	r3, [pc, #424]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	2200      	movs	r2, #0
 80048de:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ea:	2300      	movs	r3, #0
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
 80048ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048f2:	4622      	mov	r2, r4
 80048f4:	462b      	mov	r3, r5
 80048f6:	f04f 0000 	mov.w	r0, #0
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	0159      	lsls	r1, r3, #5
 8004900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004904:	0150      	lsls	r0, r2, #5
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4621      	mov	r1, r4
 800490c:	1a51      	subs	r1, r2, r1
 800490e:	6139      	str	r1, [r7, #16]
 8004910:	4629      	mov	r1, r5
 8004912:	eb63 0301 	sbc.w	r3, r3, r1
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004924:	4659      	mov	r1, fp
 8004926:	018b      	lsls	r3, r1, #6
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800492e:	4651      	mov	r1, sl
 8004930:	018a      	lsls	r2, r1, #6
 8004932:	4651      	mov	r1, sl
 8004934:	ebb2 0801 	subs.w	r8, r2, r1
 8004938:	4659      	mov	r1, fp
 800493a:	eb63 0901 	sbc.w	r9, r3, r1
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800494a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800494e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004952:	4690      	mov	r8, r2
 8004954:	4699      	mov	r9, r3
 8004956:	4623      	mov	r3, r4
 8004958:	eb18 0303 	adds.w	r3, r8, r3
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	462b      	mov	r3, r5
 8004960:	eb49 0303 	adc.w	r3, r9, r3
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004972:	4629      	mov	r1, r5
 8004974:	028b      	lsls	r3, r1, #10
 8004976:	4621      	mov	r1, r4
 8004978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800497c:	4621      	mov	r1, r4
 800497e:	028a      	lsls	r2, r1, #10
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004986:	2200      	movs	r2, #0
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
 800498a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004990:	f7fc f8fc 	bl	8000b8c <__aeabi_uldivmod>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4613      	mov	r3, r2
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499c:	e058      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499e:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	2200      	movs	r2, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	4611      	mov	r1, r2
 80049aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	2300      	movs	r3, #0
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	f04f 0000 	mov.w	r0, #0
 80049c0:	f04f 0100 	mov.w	r1, #0
 80049c4:	0159      	lsls	r1, r3, #5
 80049c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ca:	0150      	lsls	r0, r2, #5
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4641      	mov	r1, r8
 80049d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f0:	ebb2 040a 	subs.w	r4, r2, sl
 80049f4:	eb63 050b 	sbc.w	r5, r3, fp
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	00eb      	lsls	r3, r5, #3
 8004a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a06:	00e2      	lsls	r2, r4, #3
 8004a08:	4614      	mov	r4, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	4643      	mov	r3, r8
 8004a0e:	18e3      	adds	r3, r4, r3
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	464b      	mov	r3, r9
 8004a14:	eb45 0303 	adc.w	r3, r5, r3
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a26:	4629      	mov	r1, r5
 8004a28:	028b      	lsls	r3, r1, #10
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a30:	4621      	mov	r1, r4
 8004a32:	028a      	lsls	r2, r1, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	61fa      	str	r2, [r7, #28]
 8004a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a44:	f7fc f8a2 	bl	8000b8c <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3750      	adds	r7, #80	; 0x50
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	00f42400 	.word	0x00f42400

08004a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000004 	.word	0x20000004

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	0800bc10 	.word	0x0800bc10

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffdc 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	0800bc10 	.word	0x0800bc10

08004af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07b      	b.n	8004bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fd34 	bl	80015b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	ea42 0103 	orr.w	r1, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0104 	and.w	r1, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0210 	and.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e03f      	b.n	8004c94 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fc fd09 	bl	8001640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2224      	movs	r2, #36	; 0x24
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c44:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f828 	bl	8004c9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c6a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b0c0      	sub	sp, #256	; 0x100
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	68d9      	ldr	r1, [r3, #12]
 8004cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	ea40 0301 	orr.w	r3, r0, r1
 8004cc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cf4:	f021 010c 	bic.w	r1, r1, #12
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d02:	430b      	orrs	r3, r1
 8004d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d16:	6999      	ldr	r1, [r3, #24]
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	ea40 0301 	orr.w	r3, r0, r1
 8004d22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b8f      	ldr	r3, [pc, #572]	; (8004f68 <UART_SetConfig+0x2cc>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d005      	beq.n	8004d3c <UART_SetConfig+0xa0>
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	4b8d      	ldr	r3, [pc, #564]	; (8004f6c <UART_SetConfig+0x2d0>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d104      	bne.n	8004d46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7ff fec4 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8004d40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d44:	e003      	b.n	8004d4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d46:	f7ff feab 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8004d4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	f040 810c 	bne.w	8004f74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d76:	415b      	adcs	r3, r3
 8004d78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d7e:	4621      	mov	r1, r4
 8004d80:	eb12 0801 	adds.w	r8, r2, r1
 8004d84:	4629      	mov	r1, r5
 8004d86:	eb43 0901 	adc.w	r9, r3, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	4623      	mov	r3, r4
 8004da4:	eb18 0303 	adds.w	r3, r8, r3
 8004da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dac:	462b      	mov	r3, r5
 8004dae:	eb49 0303 	adc.w	r3, r9, r3
 8004db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	18db      	adds	r3, r3, r3
 8004dce:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	eb42 0303 	adc.w	r3, r2, r3
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ddc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004de0:	f7fb fed4 	bl	8000b8c <__aeabi_uldivmod>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	4b61      	ldr	r3, [pc, #388]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004dea:	fba3 2302 	umull	r2, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	011c      	lsls	r4, r3, #4
 8004df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e14:	4641      	mov	r1, r8
 8004e16:	eb12 0a01 	adds.w	sl, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e34:	4692      	mov	sl, r2
 8004e36:	469b      	mov	fp, r3
 8004e38:	4643      	mov	r3, r8
 8004e3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e42:	464b      	mov	r3, r9
 8004e44:	eb4b 0303 	adc.w	r3, fp, r3
 8004e48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e60:	460b      	mov	r3, r1
 8004e62:	18db      	adds	r3, r3, r3
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
 8004e66:	4613      	mov	r3, r2
 8004e68:	eb42 0303 	adc.w	r3, r2, r3
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e76:	f7fb fe89 	bl	8000b8c <__aeabi_uldivmod>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004e82:	fba3 2301 	umull	r2, r3, r3, r1
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2264      	movs	r2, #100	; 0x64
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	1acb      	subs	r3, r1, r3
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e96:	4b36      	ldr	r3, [pc, #216]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004e98:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ea4:	441c      	add	r4, r3
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004eb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004eb8:	4642      	mov	r2, r8
 8004eba:	464b      	mov	r3, r9
 8004ebc:	1891      	adds	r1, r2, r2
 8004ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ec0:	415b      	adcs	r3, r3
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ec8:	4641      	mov	r1, r8
 8004eca:	1851      	adds	r1, r2, r1
 8004ecc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ece:	4649      	mov	r1, r9
 8004ed0:	414b      	adcs	r3, r1
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ee0:	4659      	mov	r1, fp
 8004ee2:	00cb      	lsls	r3, r1, #3
 8004ee4:	4651      	mov	r1, sl
 8004ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eea:	4651      	mov	r1, sl
 8004eec:	00ca      	lsls	r2, r1, #3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	189b      	adds	r3, r3, r2
 8004ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004efc:	464b      	mov	r3, r9
 8004efe:	460a      	mov	r2, r1
 8004f00:	eb42 0303 	adc.w	r3, r2, r3
 8004f04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f22:	4613      	mov	r3, r2
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f32:	f7fb fe2b 	bl	8000b8c <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	2164      	movs	r1, #100	; 0x64
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	3332      	adds	r3, #50	; 0x32
 8004f4e:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <UART_SetConfig+0x2d4>)
 8004f50:	fba2 2303 	umull	r2, r3, r2, r3
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	f003 0207 	and.w	r2, r3, #7
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4422      	add	r2, r4
 8004f62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f64:	e105      	b.n	8005172 <UART_SetConfig+0x4d6>
 8004f66:	bf00      	nop
 8004f68:	40011000 	.word	0x40011000
 8004f6c:	40011400 	.word	0x40011400
 8004f70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f86:	4642      	mov	r2, r8
 8004f88:	464b      	mov	r3, r9
 8004f8a:	1891      	adds	r1, r2, r2
 8004f8c:	6239      	str	r1, [r7, #32]
 8004f8e:	415b      	adcs	r3, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f96:	4641      	mov	r1, r8
 8004f98:	1854      	adds	r4, r2, r1
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	eb43 0501 	adc.w	r5, r3, r1
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	00eb      	lsls	r3, r5, #3
 8004faa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fae:	00e2      	lsls	r2, r4, #3
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	18e3      	adds	r3, r4, r3
 8004fb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	eb45 0303 	adc.w	r3, r5, r3
 8004fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fec:	4621      	mov	r1, r4
 8004fee:	008a      	lsls	r2, r1, #2
 8004ff0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ff4:	f7fb fdca 	bl	8000b8c <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b60      	ldr	r3, [pc, #384]	; (8005180 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	011c      	lsls	r4, r3, #4
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005014:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	1891      	adds	r1, r2, r2
 800501e:	61b9      	str	r1, [r7, #24]
 8005020:	415b      	adcs	r3, r3
 8005022:	61fb      	str	r3, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	4641      	mov	r1, r8
 800502a:	1851      	adds	r1, r2, r1
 800502c:	6139      	str	r1, [r7, #16]
 800502e:	4649      	mov	r1, r9
 8005030:	414b      	adcs	r3, r1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005040:	4659      	mov	r1, fp
 8005042:	00cb      	lsls	r3, r1, #3
 8005044:	4651      	mov	r1, sl
 8005046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504a:	4651      	mov	r1, sl
 800504c:	00ca      	lsls	r2, r1, #3
 800504e:	4610      	mov	r0, r2
 8005050:	4619      	mov	r1, r3
 8005052:	4603      	mov	r3, r0
 8005054:	4642      	mov	r2, r8
 8005056:	189b      	adds	r3, r3, r2
 8005058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800505c:	464b      	mov	r3, r9
 800505e:	460a      	mov	r2, r1
 8005060:	eb42 0303 	adc.w	r3, r2, r3
 8005064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	67bb      	str	r3, [r7, #120]	; 0x78
 8005072:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005080:	4649      	mov	r1, r9
 8005082:	008b      	lsls	r3, r1, #2
 8005084:	4641      	mov	r1, r8
 8005086:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508a:	4641      	mov	r1, r8
 800508c:	008a      	lsls	r2, r1, #2
 800508e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005092:	f7fb fd7b 	bl	8000b8c <__aeabi_uldivmod>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4b39      	ldr	r3, [pc, #228]	; (8005180 <UART_SetConfig+0x4e4>)
 800509c:	fba3 1302 	umull	r1, r3, r3, r2
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	2164      	movs	r1, #100	; 0x64
 80050a4:	fb01 f303 	mul.w	r3, r1, r3
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	3332      	adds	r3, #50	; 0x32
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <UART_SetConfig+0x4e4>)
 80050b0:	fba2 2303 	umull	r2, r3, r2, r3
 80050b4:	095b      	lsrs	r3, r3, #5
 80050b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ba:	441c      	add	r4, r3
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c0:	2200      	movs	r2, #0
 80050c2:	673b      	str	r3, [r7, #112]	; 0x70
 80050c4:	677a      	str	r2, [r7, #116]	; 0x74
 80050c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050ca:	4642      	mov	r2, r8
 80050cc:	464b      	mov	r3, r9
 80050ce:	1891      	adds	r1, r2, r2
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	415b      	adcs	r3, r3
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050da:	4641      	mov	r1, r8
 80050dc:	1851      	adds	r1, r2, r1
 80050de:	6039      	str	r1, [r7, #0]
 80050e0:	4649      	mov	r1, r9
 80050e2:	414b      	adcs	r3, r1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050f2:	4659      	mov	r1, fp
 80050f4:	00cb      	lsls	r3, r1, #3
 80050f6:	4651      	mov	r1, sl
 80050f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fc:	4651      	mov	r1, sl
 80050fe:	00ca      	lsls	r2, r1, #3
 8005100:	4610      	mov	r0, r2
 8005102:	4619      	mov	r1, r3
 8005104:	4603      	mov	r3, r0
 8005106:	4642      	mov	r2, r8
 8005108:	189b      	adds	r3, r3, r2
 800510a:	66bb      	str	r3, [r7, #104]	; 0x68
 800510c:	464b      	mov	r3, r9
 800510e:	460a      	mov	r2, r1
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	663b      	str	r3, [r7, #96]	; 0x60
 8005120:	667a      	str	r2, [r7, #100]	; 0x64
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800512e:	4649      	mov	r1, r9
 8005130:	008b      	lsls	r3, r1, #2
 8005132:	4641      	mov	r1, r8
 8005134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005138:	4641      	mov	r1, r8
 800513a:	008a      	lsls	r2, r1, #2
 800513c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005140:	f7fb fd24 	bl	8000b8c <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <UART_SetConfig+0x4e4>)
 800514a:	fba3 1302 	umull	r1, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2164      	movs	r1, #100	; 0x64
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	3332      	adds	r3, #50	; 0x32
 800515c:	4a08      	ldr	r2, [pc, #32]	; (8005180 <UART_SetConfig+0x4e4>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4422      	add	r2, r4
 8005170:	609a      	str	r2, [r3, #8]
}
 8005172:	bf00      	nop
 8005174:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	51eb851f 	.word	0x51eb851f

08005184 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005184:	b084      	sub	sp, #16
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	f107 001c 	add.w	r0, r7, #28
 8005192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2b01      	cmp	r3, #1
 800519a:	d122      	bne.n	80051e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80051b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d105      	bne.n	80051d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f001 fbee 	bl	80069b8 <USB_CoreReset>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e01a      	b.n	8005218 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fbe2 	bl	80069b8 <USB_CoreReset>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	639a      	str	r2, [r3, #56]	; 0x38
 800520a:	e005      	b.n	8005218 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10b      	bne.n	8005236 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f043 0206 	orr.w	r2, r3, #6
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005242:	b004      	add	sp, #16
 8005244:	4770      	bx	lr
	...

08005248 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d165      	bne.n	8005328 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a41      	ldr	r2, [pc, #260]	; (8005364 <USB_SetTurnaroundTime+0x11c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d906      	bls.n	8005272 <USB_SetTurnaroundTime+0x2a>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a40      	ldr	r2, [pc, #256]	; (8005368 <USB_SetTurnaroundTime+0x120>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d202      	bcs.n	8005272 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800526c:	230f      	movs	r3, #15
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e062      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4a3c      	ldr	r2, [pc, #240]	; (8005368 <USB_SetTurnaroundTime+0x120>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d306      	bcc.n	8005288 <USB_SetTurnaroundTime+0x40>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a3b      	ldr	r2, [pc, #236]	; (800536c <USB_SetTurnaroundTime+0x124>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d202      	bcs.n	8005288 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005282:	230e      	movs	r3, #14
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	e057      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a38      	ldr	r2, [pc, #224]	; (800536c <USB_SetTurnaroundTime+0x124>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d306      	bcc.n	800529e <USB_SetTurnaroundTime+0x56>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a37      	ldr	r2, [pc, #220]	; (8005370 <USB_SetTurnaroundTime+0x128>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d202      	bcs.n	800529e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005298:	230d      	movs	r3, #13
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e04c      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4a33      	ldr	r2, [pc, #204]	; (8005370 <USB_SetTurnaroundTime+0x128>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d306      	bcc.n	80052b4 <USB_SetTurnaroundTime+0x6c>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a32      	ldr	r2, [pc, #200]	; (8005374 <USB_SetTurnaroundTime+0x12c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d802      	bhi.n	80052b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80052ae:	230c      	movs	r3, #12
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e041      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a2f      	ldr	r2, [pc, #188]	; (8005374 <USB_SetTurnaroundTime+0x12c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d906      	bls.n	80052ca <USB_SetTurnaroundTime+0x82>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a2e      	ldr	r2, [pc, #184]	; (8005378 <USB_SetTurnaroundTime+0x130>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d802      	bhi.n	80052ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052c4:	230b      	movs	r3, #11
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e036      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a2a      	ldr	r2, [pc, #168]	; (8005378 <USB_SetTurnaroundTime+0x130>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d906      	bls.n	80052e0 <USB_SetTurnaroundTime+0x98>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a29      	ldr	r2, [pc, #164]	; (800537c <USB_SetTurnaroundTime+0x134>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d802      	bhi.n	80052e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052da:	230a      	movs	r3, #10
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e02b      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a26      	ldr	r2, [pc, #152]	; (800537c <USB_SetTurnaroundTime+0x134>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d906      	bls.n	80052f6 <USB_SetTurnaroundTime+0xae>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a25      	ldr	r2, [pc, #148]	; (8005380 <USB_SetTurnaroundTime+0x138>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d202      	bcs.n	80052f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052f0:	2309      	movs	r3, #9
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e020      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <USB_SetTurnaroundTime+0x138>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d306      	bcc.n	800530c <USB_SetTurnaroundTime+0xc4>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a20      	ldr	r2, [pc, #128]	; (8005384 <USB_SetTurnaroundTime+0x13c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d802      	bhi.n	800530c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005306:	2308      	movs	r3, #8
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e015      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <USB_SetTurnaroundTime+0x13c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d906      	bls.n	8005322 <USB_SetTurnaroundTime+0xda>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <USB_SetTurnaroundTime+0x140>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d202      	bcs.n	8005322 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800531c:	2307      	movs	r3, #7
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e00a      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005322:	2306      	movs	r3, #6
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e007      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800532e:	2309      	movs	r3, #9
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e001      	b.n	8005338 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005334:	2309      	movs	r3, #9
 8005336:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	029b      	lsls	r3, r3, #10
 800534c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	371c      	adds	r7, #28
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	00d8acbf 	.word	0x00d8acbf
 8005368:	00e4e1c0 	.word	0x00e4e1c0
 800536c:	00f42400 	.word	0x00f42400
 8005370:	01067380 	.word	0x01067380
 8005374:	011a499f 	.word	0x011a499f
 8005378:	01312cff 	.word	0x01312cff
 800537c:	014ca43f 	.word	0x014ca43f
 8005380:	016e3600 	.word	0x016e3600
 8005384:	01a6ab1f 	.word	0x01a6ab1f
 8005388:	01e84800 	.word	0x01e84800

0800538c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f043 0201 	orr.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d115      	bne.n	800541e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053fe:	2001      	movs	r0, #1
 8005400:	f7fc fb18 	bl	8001a34 <HAL_Delay>
      ms++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 fa45 	bl	800689a <USB_GetMode>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d01e      	beq.n	8005454 <USB_SetCurrentMode+0x84>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b31      	cmp	r3, #49	; 0x31
 800541a:	d9f0      	bls.n	80053fe <USB_SetCurrentMode+0x2e>
 800541c:	e01a      	b.n	8005454 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d115      	bne.n	8005450 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005430:	2001      	movs	r0, #1
 8005432:	f7fc faff 	bl	8001a34 <HAL_Delay>
      ms++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3301      	adds	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fa2c 	bl	800689a <USB_GetMode>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <USB_SetCurrentMode+0x84>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b31      	cmp	r3, #49	; 0x31
 800544c:	d9f0      	bls.n	8005430 <USB_SetCurrentMode+0x60>
 800544e:	e001      	b.n	8005454 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e005      	b.n	8005460 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b32      	cmp	r3, #50	; 0x32
 8005458:	d101      	bne.n	800545e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005468:	b084      	sub	sp, #16
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005482:	2300      	movs	r3, #0
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e009      	b.n	800549c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3340      	adds	r3, #64	; 0x40
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	2200      	movs	r2, #0
 8005494:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3301      	adds	r3, #1
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b0e      	cmp	r3, #14
 80054a0:	d9f2      	bls.n	8005488 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11c      	bne.n	80054e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b6:	f043 0302 	orr.w	r3, r3, #2
 80054ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
 80054e0:	e00b      	b.n	80054fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550c:	4619      	mov	r1, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005514:	461a      	mov	r2, r3
 8005516:	680b      	ldr	r3, [r1, #0]
 8005518:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10c      	bne.n	800553a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005526:	2100      	movs	r1, #0
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f965 	bl	80057f8 <USB_SetDevSpeed>
 800552e:	e008      	b.n	8005542 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005530:	2101      	movs	r1, #1
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f960 	bl	80057f8 <USB_SetDevSpeed>
 8005538:	e003      	b.n	8005542 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800553a:	2103      	movs	r1, #3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f95b 	bl	80057f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005542:	2110      	movs	r1, #16
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8f3 	bl	8005730 <USB_FlushTxFifo>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f91f 	bl	8005798 <USB_FlushRxFifo>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556a:	461a      	mov	r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	461a      	mov	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e043      	b.n	8005616 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a4:	d118      	bne.n	80055d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b8:	461a      	mov	r2, r3
 80055ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e013      	b.n	80055ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ce:	461a      	mov	r2, r3
 80055d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e008      	b.n	80055ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e4:	461a      	mov	r2, r3
 80055e6:	2300      	movs	r3, #0
 80055e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	461a      	mov	r2, r3
 80055f8:	2300      	movs	r3, #0
 80055fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005608:	461a      	mov	r2, r3
 800560a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800560e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3301      	adds	r3, #1
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d3b7      	bcc.n	800558e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e043      	b.n	80056ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563a:	d118      	bne.n	800566e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e013      	b.n	8005680 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	461a      	mov	r2, r3
 8005666:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e008      	b.n	8005680 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	461a      	mov	r2, r3
 800567c:	2300      	movs	r3, #0
 800567e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	461a      	mov	r2, r3
 80056a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3301      	adds	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d3b7      	bcc.n	8005624 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f043 0210 	orr.w	r2, r3, #16
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <USB_DevInit+0x2c4>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f043 0208 	orr.w	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d107      	bne.n	800571c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005714:	f043 0304 	orr.w	r3, r3, #4
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005728:	b004      	add	sp, #16
 800572a:	4770      	bx	lr
 800572c:	803c3800 	.word	0x803c3800

08005730 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4a13      	ldr	r2, [pc, #76]	; (8005794 <USB_FlushTxFifo+0x64>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e01b      	b.n	8005788 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	daf2      	bge.n	800573e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	019b      	lsls	r3, r3, #6
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a08      	ldr	r2, [pc, #32]	; (8005794 <USB_FlushTxFifo+0x64>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e006      	b.n	8005788 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b20      	cmp	r3, #32
 8005784:	d0f0      	beq.n	8005768 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	00030d40 	.word	0x00030d40

08005798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	3301      	adds	r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <USB_FlushRxFifo+0x5c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e018      	b.n	80057e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	daf2      	bge.n	80057a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2210      	movs	r2, #16
 80057c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <USB_FlushRxFifo+0x5c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d0f0      	beq.n	80057c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	00030d40 	.word	0x00030d40

080057f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0306 	and.w	r3, r3, #6
 8005842:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d102      	bne.n	8005850 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]
 800584e:	e00a      	b.n	8005866 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d002      	beq.n	800585c <USB_GetDevSpeed+0x32>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b06      	cmp	r3, #6
 800585a:	d102      	bne.n	8005862 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800585c:	2302      	movs	r3, #2
 800585e:	75fb      	strb	r3, [r7, #23]
 8005860:	e001      	b.n	8005866 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005862:	230f      	movs	r3, #15
 8005864:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d13a      	bne.n	8005906 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	68f9      	ldr	r1, [r7, #12]
 80058aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d155      	bne.n	8005974 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	791b      	ldrb	r3, [r3, #4]
 80058e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	059b      	lsls	r3, r3, #22
 80058ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058ec:	4313      	orrs	r3, r2
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	e036      	b.n	8005974 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	2101      	movs	r1, #1
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	041b      	lsls	r3, r3, #16
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005924:	4313      	orrs	r3, r2
 8005926:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d11a      	bne.n	8005974 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4413      	add	r3, r2
 8005946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	791b      	ldrb	r3, [r3, #4]
 8005958:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800595a:	430b      	orrs	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005972:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d161      	bne.n	8005a64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b6:	d11f      	bne.n	80059f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	2101      	movs	r1, #1
 8005a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a18:	4013      	ands	r3, r2
 8005a1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	68f9      	ldr	r1, [r7, #12]
 8005a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	0159      	lsls	r1, r3, #5
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4b35      	ldr	r3, [pc, #212]	; (8005b34 <USB_DeactivateEndpoint+0x1b0>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	e060      	b.n	8005b26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7a:	d11f      	bne.n	8005abc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	041b      	lsls	r3, r3, #16
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005adc:	4013      	ands	r3, r2
 8005ade:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	2101      	movs	r1, #1
 8005af2:	fa01 f303 	lsl.w	r3, r1, r3
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	43db      	mvns	r3, r3
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b00:	4013      	ands	r3, r2
 8005b02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	0159      	lsls	r1, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	440b      	add	r3, r1
 8005b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <USB_DeactivateEndpoint+0x1b4>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	ec337800 	.word	0xec337800
 8005b38:	eff37800 	.word	0xeff37800

08005b3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 815c 	bne.w	8005e16 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d132      	bne.n	8005bcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0151      	lsls	r1, r2, #5
 8005b78:	69fa      	ldr	r2, [r7, #28]
 8005b7a:	440a      	add	r2, r1
 8005b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ba8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc4:	0cdb      	lsrs	r3, r3, #19
 8005bc6:	04db      	lsls	r3, r3, #19
 8005bc8:	6113      	str	r3, [r2, #16]
 8005bca:	e074      	b.n	8005cb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	69fa      	ldr	r2, [r7, #28]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	0cdb      	lsrs	r3, r3, #19
 8005be8:	04db      	lsls	r3, r3, #19
 8005bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6999      	ldr	r1, [r3, #24]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	440b      	add	r3, r1
 8005c28:	1e59      	subs	r1, r3, #1
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c32:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005c34:	4b9d      	ldr	r3, [pc, #628]	; (8005eac <USB_EPStartXfer+0x370>)
 8005c36:	400b      	ands	r3, r1
 8005c38:	69b9      	ldr	r1, [r7, #24]
 8005c3a:	0148      	lsls	r0, r1, #5
 8005c3c:	69f9      	ldr	r1, [r7, #28]
 8005c3e:	4401      	add	r1, r0
 8005c40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c44:	4313      	orrs	r3, r2
 8005c46:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	0148      	lsls	r0, r1, #5
 8005c62:	69f9      	ldr	r1, [r7, #28]
 8005c64:	4401      	add	r1, r0
 8005c66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	791b      	ldrb	r3, [r3, #4]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d11f      	bne.n	8005cb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d14b      	bne.n	8005d54 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	791b      	ldrb	r3, [r3, #4]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d128      	bne.n	8005d32 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d110      	bne.n	8005d12 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e00f      	b.n	8005d32 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	e133      	b.n	8005fbc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d015      	beq.n	8005da8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 811b 	beq.w	8005fbc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	2101      	movs	r1, #1
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da2:	4313      	orrs	r3, r2
 8005da4:	634b      	str	r3, [r1, #52]	; 0x34
 8005da6:	e109      	b.n	8005fbc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d110      	bne.n	8005dda <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e00f      	b.n	8005dfa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6919      	ldr	r1, [r3, #16]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	b298      	uxth	r0, r3
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fade 	bl	80063d0 <USB_WritePacket>
 8005e14:	e0d2      	b.n	8005fbc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	69fa      	ldr	r2, [r7, #28]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e30:	0cdb      	lsrs	r3, r3, #19
 8005e32:	04db      	lsls	r3, r3, #19
 8005e34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d126      	bne.n	8005eb0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	69b9      	ldr	r1, [r7, #24]
 8005e7a:	0148      	lsls	r0, r1, #5
 8005e7c:	69f9      	ldr	r1, [r7, #28]
 8005e7e:	4401      	add	r1, r0
 8005e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e84:	4313      	orrs	r3, r2
 8005e86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea6:	6113      	str	r3, [r2, #16]
 8005ea8:	e03a      	b.n	8005f20 <USB_EPStartXfer+0x3e4>
 8005eaa:	bf00      	nop
 8005eac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	8afa      	ldrh	r2, [r7, #22]
 8005ecc:	fb03 f202 	mul.w	r2, r3, r2
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	8afb      	ldrh	r3, [r7, #22]
 8005ee4:	04d9      	lsls	r1, r3, #19
 8005ee6:	4b38      	ldr	r3, [pc, #224]	; (8005fc8 <USB_EPStartXfer+0x48c>)
 8005ee8:	400b      	ands	r3, r1
 8005eea:	69b9      	ldr	r1, [r7, #24]
 8005eec:	0148      	lsls	r0, r1, #5
 8005eee:	69f9      	ldr	r1, [r7, #28]
 8005ef0:	4401      	add	r1, r0
 8005ef2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f10:	69b9      	ldr	r1, [r7, #24]
 8005f12:	0148      	lsls	r0, r1, #5
 8005f14:	69f9      	ldr	r1, [r7, #28]
 8005f16:	4401      	add	r1, r0
 8005f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10d      	bne.n	8005f42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d009      	beq.n	8005f42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6919      	ldr	r1, [r3, #16]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	460a      	mov	r2, r1
 8005f40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	791b      	ldrb	r3, [r3, #4]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d128      	bne.n	8005f9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d110      	bne.n	8005f7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	e00f      	b.n	8005f9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	1ff80000 	.word	0x1ff80000

08005fcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	f040 80ce 	bne.w	800618a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d132      	bne.n	800605c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	0cdb      	lsrs	r3, r3, #19
 8006056:	04db      	lsls	r3, r3, #19
 8006058:	6113      	str	r3, [r2, #16]
 800605a:	e04e      	b.n	80060fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	0cdb      	lsrs	r3, r3, #19
 8006078:	04db      	lsls	r3, r3, #19
 800607a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800609a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800609e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d903      	bls.n	80060b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	691a      	ldr	r2, [r3, #16]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ea:	6939      	ldr	r1, [r7, #16]
 80060ec:	0148      	lsls	r0, r1, #5
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	4401      	add	r1, r0
 80060f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060f6:	4313      	orrs	r3, r2
 80060f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11e      	bne.n	800613e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	e097      	b.n	800626e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006158:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800615c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 8083 	beq.w	800626e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2101      	movs	r1, #1
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	6979      	ldr	r1, [r7, #20]
 8006180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006184:	4313      	orrs	r3, r2
 8006186:	634b      	str	r3, [r1, #52]	; 0x34
 8006188:	e071      	b.n	800626e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a4:	0cdb      	lsrs	r3, r3, #19
 80061a6:	04db      	lsls	r3, r3, #19
 80061a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006204:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621c:	6939      	ldr	r1, [r7, #16]
 800621e:	0148      	lsls	r0, r1, #5
 8006220:	6979      	ldr	r1, [r7, #20]
 8006222:	4401      	add	r1, r0
 8006224:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800622c:	79fb      	ldrb	r3, [r7, #7]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d10d      	bne.n	800624e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d009      	beq.n	800624e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6919      	ldr	r1, [r3, #16]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	460a      	mov	r2, r1
 800624c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006268:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800626c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d14a      	bne.n	8006330 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b2:	f040 8086 	bne.w	80063c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	7812      	ldrb	r2, [r2, #0]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	7812      	ldrb	r2, [r2, #0]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f242 7210 	movw	r2, #10000	; 0x2710
 800630a:	4293      	cmp	r3, r2
 800630c:	d902      	bls.n	8006314 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
          break;
 8006312:	e056      	b.n	80063c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800632c:	d0e7      	beq.n	80062fe <USB_EPStopXfer+0x82>
 800632e:	e048      	b.n	80063c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006348:	d13b      	bne.n	80063c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	7812      	ldrb	r2, [r2, #0]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800636c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006390:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f242 7210 	movw	r2, #10000	; 0x2710
 800639e:	4293      	cmp	r3, r2
 80063a0:	d902      	bls.n	80063a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
          break;
 80063a6:	e00c      	b.n	80063c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c0:	d0e7      	beq.n	8006392 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b089      	sub	sp, #36	; 0x24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4611      	mov	r1, r2
 80063dc:	461a      	mov	r2, r3
 80063de:	460b      	mov	r3, r1
 80063e0:	71fb      	strb	r3, [r7, #7]
 80063e2:	4613      	mov	r3, r2
 80063e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d123      	bne.n	800643e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063f6:	88bb      	ldrh	r3, [r7, #4]
 80063f8:	3303      	adds	r3, #3
 80063fa:	089b      	lsrs	r3, r3, #2
 80063fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	e018      	b.n	8006436 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	031a      	lsls	r2, r3, #12
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4413      	add	r3, r2
 800640c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006410:	461a      	mov	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	3301      	adds	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	3301      	adds	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	3301      	adds	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	429a      	cmp	r2, r3
 800643c:	d3e2      	bcc.n	8006404 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3724      	adds	r7, #36	; 0x24
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800644c:	b480      	push	{r7}
 800644e:	b08b      	sub	sp, #44	; 0x2c
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	089b      	lsrs	r3, r3, #2
 8006466:	b29b      	uxth	r3, r3
 8006468:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e014      	b.n	80064a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	601a      	str	r2, [r3, #0]
    pDest++;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	3301      	adds	r3, #1
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	3301      	adds	r3, #1
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	3301      	adds	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	3301      	adds	r3, #1
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	3301      	adds	r3, #1
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3a      	ldr	r2, [r7, #32]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d3e6      	bcc.n	8006478 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064aa:	8bfb      	ldrh	r3, [r7, #30]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01e      	beq.n	80064ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064b0:	2300      	movs	r3, #0
 80064b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ba:	461a      	mov	r2, r3
 80064bc:	f107 0310 	add.w	r3, r7, #16
 80064c0:	6812      	ldr	r2, [r2, #0]
 80064c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	701a      	strb	r2, [r3, #0]
      i++;
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	3301      	adds	r3, #1
 80064da:	623b      	str	r3, [r7, #32]
      pDest++;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	3301      	adds	r3, #1
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064e2:	8bfb      	ldrh	r3, [r7, #30]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064e8:	8bfb      	ldrh	r3, [r7, #30]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1ea      	bne.n	80064c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	372c      	adds	r7, #44	; 0x2c
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d12c      	bne.n	8006572 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	db12      	blt.n	8006550 <USB_EPSetStall+0x54>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00f      	beq.n	8006550 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	440a      	add	r2, r1
 8006546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800654e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	0151      	lsls	r1, r2, #5
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	440a      	add	r2, r1
 8006566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e02b      	b.n	80065ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	db12      	blt.n	80065aa <USB_EPSetStall+0xae>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00f      	beq.n	80065aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d128      	bne.n	8006646 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006612:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	791b      	ldrb	r3, [r3, #4]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d003      	beq.n	8006624 <USB_EPClearStall+0x4c>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d138      	bne.n	8006696 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e027      	b.n	8006696 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006660:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006664:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	791b      	ldrb	r3, [r3, #4]
 800666a:	2b03      	cmp	r3, #3
 800666c:	d003      	beq.n	8006676 <USB_EPClearStall+0x9e>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	791b      	ldrb	r3, [r3, #4]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d10f      	bne.n	8006696 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006694:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066d8:	68f9      	ldr	r1, [r7, #12]
 80066da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066de:	4313      	orrs	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800670a:	f023 0303 	bic.w	r3, r3, #3
 800670e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671e:	f023 0302 	bic.w	r3, r3, #2
 8006722:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800674c:	f023 0303 	bic.w	r3, r3, #3
 8006750:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006760:	f043 0302 	orr.w	r3, r3, #2
 8006764:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4013      	ands	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800678c:	68fb      	ldr	r3, [r7, #12]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800679a:	b480      	push	{r7}
 800679c:	b085      	sub	sp, #20
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	0c1b      	lsrs	r3, r3, #16
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	4013      	ands	r3, r2
 80067f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	b29b      	uxth	r3, r3
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	4013      	ands	r3, r2
 800682e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006830:	68bb      	ldr	r3, [r7, #8]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800683e:	b480      	push	{r7}
 8006840:	b087      	sub	sp, #28
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006860:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	fa22 f303 	lsr.w	r3, r2, r3
 800686e:	01db      	lsls	r3, r3, #7
 8006870:	b2db      	uxtb	r3, r3
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4313      	orrs	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4013      	ands	r3, r2
 800688a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800688c:	68bb      	ldr	r3, [r7, #8]
}
 800688e:	4618      	mov	r0, r3
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0301 	and.w	r3, r3, #1
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b085      	sub	sp, #20
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068d4:	f023 0307 	bic.w	r3, r3, #7
 80068d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	460b      	mov	r3, r1
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	333c      	adds	r3, #60	; 0x3c
 8006912:	3304      	adds	r3, #4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <USB_EP0_OutStart+0xb8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d90a      	bls.n	8006936 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006930:	d101      	bne.n	8006936 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e037      	b.n	80069a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693c:	461a      	mov	r2, r3
 800693e:	2300      	movs	r3, #0
 8006940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f043 0318 	orr.w	r3, r3, #24
 8006968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006978:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800697c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800697e:	7afb      	ldrb	r3, [r7, #11]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d10f      	bne.n	80069a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	461a      	mov	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	4f54300a 	.word	0x4f54300a

080069b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <USB_CoreReset+0x64>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e01b      	b.n	8006a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	daf2      	bge.n	80069c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	f043 0201 	orr.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3301      	adds	r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <USB_CoreReset+0x64>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e006      	b.n	8006a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d0f0      	beq.n	80069ee <USB_CoreReset+0x36>

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	00030d40 	.word	0x00030d40

08006a20 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a30:	f002 fc8a 	bl	8009348 <USBD_static_malloc>
 8006a34:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	32b0      	adds	r2, #176	; 0xb0
 8006a46:	2100      	movs	r1, #0
 8006a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e0d4      	b.n	8006bfa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a50:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f002 fd08 	bl	800946c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	32b0      	adds	r2, #176	; 0xb0
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32b0      	adds	r2, #176	; 0xb0
 8006a76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7c1b      	ldrb	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d138      	bne.n	8006afa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a88:	4b5e      	ldr	r3, [pc, #376]	; (8006c04 <USBD_CDC_Init+0x1e4>)
 8006a8a:	7819      	ldrb	r1, [r3, #0]
 8006a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a90:	2202      	movs	r2, #2
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f002 fb35 	bl	8009102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a98:	4b5a      	ldr	r3, [pc, #360]	; (8006c04 <USBD_CDC_Init+0x1e4>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	440b      	add	r3, r1
 8006aac:	3324      	adds	r3, #36	; 0x24
 8006aae:	2201      	movs	r2, #1
 8006ab0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ab2:	4b55      	ldr	r3, [pc, #340]	; (8006c08 <USBD_CDC_Init+0x1e8>)
 8006ab4:	7819      	ldrb	r1, [r3, #0]
 8006ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aba:	2202      	movs	r2, #2
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f002 fb20 	bl	8009102 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ac2:	4b51      	ldr	r3, [pc, #324]	; (8006c08 <USBD_CDC_Init+0x1e8>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f003 020f 	and.w	r2, r3, #15
 8006aca:	6879      	ldr	r1, [r7, #4]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ada:	2201      	movs	r2, #1
 8006adc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ade:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <USBD_CDC_Init+0x1ec>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3326      	adds	r3, #38	; 0x26
 8006af4:	2210      	movs	r2, #16
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e035      	b.n	8006b66 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006afa:	4b42      	ldr	r3, [pc, #264]	; (8006c04 <USBD_CDC_Init+0x1e4>)
 8006afc:	7819      	ldrb	r1, [r3, #0]
 8006afe:	2340      	movs	r3, #64	; 0x40
 8006b00:	2202      	movs	r2, #2
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f002 fafd 	bl	8009102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b08:	4b3e      	ldr	r3, [pc, #248]	; (8006c04 <USBD_CDC_Init+0x1e4>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f003 020f 	and.w	r2, r3, #15
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	3324      	adds	r3, #36	; 0x24
 8006b1e:	2201      	movs	r2, #1
 8006b20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b22:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <USBD_CDC_Init+0x1e8>)
 8006b24:	7819      	ldrb	r1, [r3, #0]
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	2202      	movs	r2, #2
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f002 fae9 	bl	8009102 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b30:	4b35      	ldr	r3, [pc, #212]	; (8006c08 <USBD_CDC_Init+0x1e8>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	f003 020f 	and.w	r2, r3, #15
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b48:	2201      	movs	r2, #1
 8006b4a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b4c:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <USBD_CDC_Init+0x1ec>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 020f 	and.w	r2, r3, #15
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	3326      	adds	r3, #38	; 0x26
 8006b62:	2210      	movs	r2, #16
 8006b64:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <USBD_CDC_Init+0x1ec>)
 8006b68:	7819      	ldrb	r1, [r3, #0]
 8006b6a:	2308      	movs	r3, #8
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f002 fac7 	bl	8009102 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b74:	4b25      	ldr	r3, [pc, #148]	; (8006c0c <USBD_CDC_Init+0x1ec>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	33b0      	adds	r3, #176	; 0xb0
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e018      	b.n	8006bfa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	7c1b      	ldrb	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bd0:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <USBD_CDC_Init+0x1e8>)
 8006bd2:	7819      	ldrb	r1, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 fb7e 	bl	80092e0 <USBD_LL_PrepareReceive>
 8006be4:	e008      	b.n	8006bf8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006be6:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <USBD_CDC_Init+0x1e8>)
 8006be8:	7819      	ldrb	r1, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bf0:	2340      	movs	r3, #64	; 0x40
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 fb74 	bl	80092e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000097 	.word	0x20000097
 8006c08:	20000098 	.word	0x20000098
 8006c0c:	20000099 	.word	0x20000099

08006c10 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c1c:	4b3a      	ldr	r3, [pc, #232]	; (8006d08 <USBD_CDC_DeInit+0xf8>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f002 fa93 	bl	800914e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c28:	4b37      	ldr	r3, [pc, #220]	; (8006d08 <USBD_CDC_DeInit+0xf8>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3324      	adds	r3, #36	; 0x24
 8006c3e:	2200      	movs	r2, #0
 8006c40:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c42:	4b32      	ldr	r3, [pc, #200]	; (8006d0c <USBD_CDC_DeInit+0xfc>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 fa80 	bl	800914e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c4e:	4b2f      	ldr	r3, [pc, #188]	; (8006d0c <USBD_CDC_DeInit+0xfc>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c66:	2200      	movs	r2, #0
 8006c68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <USBD_CDC_DeInit+0x100>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f002 fa6c 	bl	800914e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c76:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <USBD_CDC_DeInit+0x100>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	f003 020f 	and.w	r2, r3, #15
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	3324      	adds	r3, #36	; 0x24
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c90:	4b1f      	ldr	r3, [pc, #124]	; (8006d10 <USBD_CDC_DeInit+0x100>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3326      	adds	r3, #38	; 0x26
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	32b0      	adds	r2, #176	; 0xb0
 8006cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01f      	beq.n	8006cfc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	33b0      	adds	r3, #176	; 0xb0
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	32b0      	adds	r2, #176	; 0xb0
 8006cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f002 fb40 	bl	8009364 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	32b0      	adds	r2, #176	; 0xb0
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000097 	.word	0x20000097
 8006d0c:	20000098 	.word	0x20000098
 8006d10:	20000099 	.word	0x20000099

08006d14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	32b0      	adds	r2, #176	; 0xb0
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e0bf      	b.n	8006ec4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d050      	beq.n	8006df2 <USBD_CDC_Setup+0xde>
 8006d50:	2b20      	cmp	r3, #32
 8006d52:	f040 80af 	bne.w	8006eb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88db      	ldrh	r3, [r3, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d03a      	beq.n	8006dd4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da1b      	bge.n	8006da0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	33b0      	adds	r3, #176	; 0xb0
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	88d2      	ldrh	r2, [r2, #6]
 8006d84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88db      	ldrh	r3, [r3, #6]
 8006d8a:	2b07      	cmp	r3, #7
 8006d8c:	bf28      	it	cs
 8006d8e:	2307      	movcs	r3, #7
 8006d90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	89fa      	ldrh	r2, [r7, #14]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fd89 	bl	80088b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d9e:	e090      	b.n	8006ec2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	785a      	ldrb	r2, [r3, #1]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	2b3f      	cmp	r3, #63	; 0x3f
 8006db0:	d803      	bhi.n	8006dba <USBD_CDC_Setup+0xa6>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	88db      	ldrh	r3, [r3, #6]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	e000      	b.n	8006dbc <USBD_CDC_Setup+0xa8>
 8006dba:	2240      	movs	r2, #64	; 0x40
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dc2:	6939      	ldr	r1, [r7, #16]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fd9b 	bl	8008908 <USBD_CtlPrepareRx>
      break;
 8006dd2:	e076      	b.n	8006ec2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	33b0      	adds	r3, #176	; 0xb0
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	7850      	ldrb	r0, [r2, #1]
 8006dea:	2200      	movs	r2, #0
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	4798      	blx	r3
      break;
 8006df0:	e067      	b.n	8006ec2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2b0b      	cmp	r3, #11
 8006df8:	d851      	bhi.n	8006e9e <USBD_CDC_Setup+0x18a>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <USBD_CDC_Setup+0xec>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e31 	.word	0x08006e31
 8006e04:	08006ead 	.word	0x08006ead
 8006e08:	08006e9f 	.word	0x08006e9f
 8006e0c:	08006e9f 	.word	0x08006e9f
 8006e10:	08006e9f 	.word	0x08006e9f
 8006e14:	08006e9f 	.word	0x08006e9f
 8006e18:	08006e9f 	.word	0x08006e9f
 8006e1c:	08006e9f 	.word	0x08006e9f
 8006e20:	08006e9f 	.word	0x08006e9f
 8006e24:	08006e9f 	.word	0x08006e9f
 8006e28:	08006e5b 	.word	0x08006e5b
 8006e2c:	08006e85 	.word	0x08006e85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b03      	cmp	r3, #3
 8006e3a:	d107      	bne.n	8006e4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e3c:	f107 030a 	add.w	r3, r7, #10
 8006e40:	2202      	movs	r2, #2
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fd33 	bl	80088b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e4a:	e032      	b.n	8006eb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fcbd 	bl	80087ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	75fb      	strb	r3, [r7, #23]
          break;
 8006e58:	e02b      	b.n	8006eb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d107      	bne.n	8006e76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e66:	f107 030d 	add.w	r3, r7, #13
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fd1e 	bl	80088b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e74:	e01d      	b.n	8006eb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 fca8 	bl	80087ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	75fb      	strb	r3, [r7, #23]
          break;
 8006e82:	e016      	b.n	8006eb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d00f      	beq.n	8006eb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fc9b 	bl	80087ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e9c:	e008      	b.n	8006eb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fc94 	bl	80087ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eaa:	e002      	b.n	8006eb2 <USBD_CDC_Setup+0x19e>
          break;
 8006eac:	bf00      	nop
 8006eae:	e008      	b.n	8006ec2 <USBD_CDC_Setup+0x1ae>
          break;
 8006eb0:	bf00      	nop
      }
      break;
 8006eb2:	e006      	b.n	8006ec2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f001 fc89 	bl	80087ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ede:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	; 0xb0
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e065      	b.n	8006fc2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	32b0      	adds	r2, #176	; 0xb0
 8006f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 020f 	and.w	r2, r3, #15
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	3318      	adds	r3, #24
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d02f      	beq.n	8006f80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	f003 020f 	and.w	r2, r3, #15
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	3318      	adds	r3, #24
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	f003 010f 	and.w	r1, r3, #15
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	440b      	add	r3, r1
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4403      	add	r3, r0
 8006f48:	3348      	adds	r3, #72	; 0x48
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f50:	fb01 f303 	mul.w	r3, r1, r3
 8006f54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d112      	bne.n	8006f80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 020f 	and.w	r2, r3, #15
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3318      	adds	r3, #24
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f72:	78f9      	ldrb	r1, [r7, #3]
 8006f74:	2300      	movs	r3, #0
 8006f76:	2200      	movs	r2, #0
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f002 f990 	bl	800929e <USBD_LL_Transmit>
 8006f7e:	e01f      	b.n	8006fc0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	33b0      	adds	r3, #176	; 0xb0
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d010      	beq.n	8006fc0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	33b0      	adds	r3, #176	; 0xb0
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	32b0      	adds	r2, #176	; 0xb0
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	32b0      	adds	r2, #176	; 0xb0
 8006ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e01a      	b.n	8007032 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f002 f98e 	bl	8009322 <USBD_LL_GetRxDataSize>
 8007006:	4602      	mov	r2, r0
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	33b0      	adds	r3, #176	; 0xb0
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800702c:	4611      	mov	r1, r2
 800702e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32b0      	adds	r2, #176	; 0xb0
 800704c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007050:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	e025      	b.n	80070a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	33b0      	adds	r3, #176	; 0xb0
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01a      	beq.n	80070a6 <USBD_CDC_EP0_RxReady+0x6c>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d015      	beq.n	80070a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	33b0      	adds	r3, #176	; 0xb0
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007092:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800709a:	b292      	uxth	r2, r2
 800709c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	22ff      	movs	r2, #255	; 0xff
 80070a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070b8:	2182      	movs	r1, #130	; 0x82
 80070ba:	4818      	ldr	r0, [pc, #96]	; (800711c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070bc:	f000 fd4f 	bl	8007b5e <USBD_GetEpDesc>
 80070c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070c2:	2101      	movs	r1, #1
 80070c4:	4815      	ldr	r0, [pc, #84]	; (800711c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070c6:	f000 fd4a 	bl	8007b5e <USBD_GetEpDesc>
 80070ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070cc:	2181      	movs	r1, #129	; 0x81
 80070ce:	4813      	ldr	r0, [pc, #76]	; (800711c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070d0:	f000 fd45 	bl	8007b5e <USBD_GetEpDesc>
 80070d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2210      	movs	r2, #16
 80070e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f0:	711a      	strb	r2, [r3, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d006      	beq.n	800710a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007104:	711a      	strb	r2, [r3, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2243      	movs	r2, #67	; 0x43
 800710e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007110:	4b02      	ldr	r3, [pc, #8]	; (800711c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000054 	.word	0x20000054

08007120 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007128:	2182      	movs	r1, #130	; 0x82
 800712a:	4818      	ldr	r0, [pc, #96]	; (800718c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800712c:	f000 fd17 	bl	8007b5e <USBD_GetEpDesc>
 8007130:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007132:	2101      	movs	r1, #1
 8007134:	4815      	ldr	r0, [pc, #84]	; (800718c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007136:	f000 fd12 	bl	8007b5e <USBD_GetEpDesc>
 800713a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800713c:	2181      	movs	r1, #129	; 0x81
 800713e:	4813      	ldr	r0, [pc, #76]	; (800718c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007140:	f000 fd0d 	bl	8007b5e <USBD_GetEpDesc>
 8007144:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2210      	movs	r2, #16
 8007150:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d006      	beq.n	8007166 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2200      	movs	r2, #0
 800715c:	711a      	strb	r2, [r3, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f042 0202 	orr.w	r2, r2, #2
 8007164:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d006      	beq.n	800717a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	711a      	strb	r2, [r3, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f042 0202 	orr.w	r2, r2, #2
 8007178:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2243      	movs	r2, #67	; 0x43
 800717e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000054 	.word	0x20000054

08007190 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007198:	2182      	movs	r1, #130	; 0x82
 800719a:	4818      	ldr	r0, [pc, #96]	; (80071fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800719c:	f000 fcdf 	bl	8007b5e <USBD_GetEpDesc>
 80071a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071a2:	2101      	movs	r1, #1
 80071a4:	4815      	ldr	r0, [pc, #84]	; (80071fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071a6:	f000 fcda 	bl	8007b5e <USBD_GetEpDesc>
 80071aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071ac:	2181      	movs	r1, #129	; 0x81
 80071ae:	4813      	ldr	r0, [pc, #76]	; (80071fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071b0:	f000 fcd5 	bl	8007b5e <USBD_GetEpDesc>
 80071b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d002      	beq.n	80071c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2210      	movs	r2, #16
 80071c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d0:	711a      	strb	r2, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d006      	beq.n	80071ea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e4:	711a      	strb	r2, [r3, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2243      	movs	r2, #67	; 0x43
 80071ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071f0:	4b02      	ldr	r3, [pc, #8]	; (80071fc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20000054 	.word	0x20000054

08007200 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	220a      	movs	r2, #10
 800720c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800720e:	4b03      	ldr	r3, [pc, #12]	; (800721c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	20000010 	.word	0x20000010

08007220 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	e009      	b.n	8007248 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	33b0      	adds	r3, #176	; 0xb0
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	32b0      	adds	r2, #176	; 0xb0
 800726a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007276:	2303      	movs	r3, #3
 8007278:	e008      	b.n	800728c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32b0      	adds	r2, #176	; 0xb0
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e004      	b.n	80072c6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32b0      	adds	r2, #176	; 0xb0
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	32b0      	adds	r2, #176	; 0xb0
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	e025      	b.n	8007352 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11f      	bne.n	8007350 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2201      	movs	r2, #1
 8007314:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007318:	4b10      	ldr	r3, [pc, #64]	; (800735c <USBD_CDC_TransmitPacket+0x88>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f003 020f 	and.w	r2, r3, #15
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4403      	add	r3, r0
 8007332:	3318      	adds	r3, #24
 8007334:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <USBD_CDC_TransmitPacket+0x88>)
 8007338:	7819      	ldrb	r1, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 ffa9 	bl	800929e <USBD_LL_Transmit>

    ret = USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000097 	.word	0x20000097

08007360 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32b0      	adds	r2, #176	; 0xb0
 8007372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007376:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	32b0      	adds	r2, #176	; 0xb0
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800738a:	2303      	movs	r3, #3
 800738c:	e018      	b.n	80073c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7c1b      	ldrb	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <USBD_CDC_ReceivePacket+0x68>)
 8007398:	7819      	ldrb	r1, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 ff9b 	bl	80092e0 <USBD_LL_PrepareReceive>
 80073aa:	e008      	b.n	80073be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <USBD_CDC_ReceivePacket+0x68>)
 80073ae:	7819      	ldrb	r1, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073b6:	2340      	movs	r3, #64	; 0x40
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 ff91 	bl	80092e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000098 	.word	0x20000098

080073cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4613      	mov	r3, r2
 80073d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e01f      	b.n	8007424 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	79fa      	ldrb	r2, [r7, #7]
 8007416:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f001 fe0b 	bl	8009034 <USBD_LL_Init>
 800741e:	4603      	mov	r3, r0
 8007420:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007440:	2303      	movs	r3, #3
 8007442:	e025      	b.n	8007490 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32ae      	adds	r2, #174	; 0xae
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00f      	beq.n	8007480 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32ae      	adds	r2, #174	; 0xae
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	f107 020e 	add.w	r2, r7, #14
 8007474:	4610      	mov	r0, r2
 8007476:	4798      	blx	r3
 8007478:	4602      	mov	r2, r0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fe13 	bl	80090cc <USBD_LL_Start>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	4611      	mov	r1, r2
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	4611      	mov	r1, r2
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007524:	2303      	movs	r3, #3
 8007526:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b084      	sub	sp, #16
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	4618      	mov	r0, r3
 8007546:	f001 f908 	bl	800875a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007566:	f003 031f 	and.w	r3, r3, #31
 800756a:	2b02      	cmp	r3, #2
 800756c:	d01a      	beq.n	80075a4 <USBD_LL_SetupStage+0x72>
 800756e:	2b02      	cmp	r3, #2
 8007570:	d822      	bhi.n	80075b8 <USBD_LL_SetupStage+0x86>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <USBD_LL_SetupStage+0x4a>
 8007576:	2b01      	cmp	r3, #1
 8007578:	d00a      	beq.n	8007590 <USBD_LL_SetupStage+0x5e>
 800757a:	e01d      	b.n	80075b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb5f 	bl	8007c48 <USBD_StdDevReq>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
      break;
 800758e:	e020      	b.n	80075d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fbc7 	bl	8007d2c <USBD_StdItfReq>
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
      break;
 80075a2:	e016      	b.n	80075d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fc29 	bl	8007e04 <USBD_StdEPReq>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]
      break;
 80075b6:	e00c      	b.n	80075d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fde0 	bl	800918c <USBD_LL_StallEP>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73fb      	strb	r3, [r7, #15]
      break;
 80075d0:	bf00      	nop
  }

  return ret;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	460b      	mov	r3, r1
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d16e      	bne.n	80076d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007602:	2b03      	cmp	r3, #3
 8007604:	f040 8098 	bne.w	8007738 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	429a      	cmp	r2, r3
 8007612:	d913      	bls.n	800763c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	4293      	cmp	r3, r2
 800762c:	bf28      	it	cs
 800762e:	4613      	movcs	r3, r2
 8007630:	461a      	mov	r2, r3
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f001 f984 	bl	8008942 <USBD_CtlContinueRx>
 800763a:	e07d      	b.n	8007738 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	2b02      	cmp	r3, #2
 8007648:	d014      	beq.n	8007674 <USBD_LL_DataOutStage+0x98>
 800764a:	2b02      	cmp	r3, #2
 800764c:	d81d      	bhi.n	800768a <USBD_LL_DataOutStage+0xae>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <USBD_LL_DataOutStage+0x7c>
 8007652:	2b01      	cmp	r3, #1
 8007654:	d003      	beq.n	800765e <USBD_LL_DataOutStage+0x82>
 8007656:	e018      	b.n	800768a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	75bb      	strb	r3, [r7, #22]
            break;
 800765c:	e018      	b.n	8007690 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007664:	b2db      	uxtb	r3, r3
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fa5e 	bl	8007b2a <USBD_CoreFindIF>
 800766e:	4603      	mov	r3, r0
 8007670:	75bb      	strb	r3, [r7, #22]
            break;
 8007672:	e00d      	b.n	8007690 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800767a:	b2db      	uxtb	r3, r3
 800767c:	4619      	mov	r1, r3
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 fa60 	bl	8007b44 <USBD_CoreFindEP>
 8007684:	4603      	mov	r3, r0
 8007686:	75bb      	strb	r3, [r7, #22]
            break;
 8007688:	e002      	b.n	8007690 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	75bb      	strb	r3, [r7, #22]
            break;
 800768e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007690:	7dbb      	ldrb	r3, [r7, #22]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d119      	bne.n	80076ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d113      	bne.n	80076ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076a2:	7dba      	ldrb	r2, [r7, #22]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	32ae      	adds	r2, #174	; 0xae
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80076b2:	7dba      	ldrb	r2, [r7, #22]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076ba:	7dba      	ldrb	r2, [r7, #22]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	32ae      	adds	r2, #174	; 0xae
 80076c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f001 f94a 	bl	8008964 <USBD_CtlSendStatus>
 80076d0:	e032      	b.n	8007738 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fa31 	bl	8007b44 <USBD_CoreFindEP>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076e6:	7dbb      	ldrb	r3, [r7, #22]
 80076e8:	2bff      	cmp	r3, #255	; 0xff
 80076ea:	d025      	beq.n	8007738 <USBD_LL_DataOutStage+0x15c>
 80076ec:	7dbb      	ldrb	r3, [r7, #22]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d122      	bne.n	8007738 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d117      	bne.n	800772e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076fe:	7dba      	ldrb	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	32ae      	adds	r2, #174	; 0xae
 8007704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00f      	beq.n	800772e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800770e:	7dba      	ldrb	r2, [r7, #22]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007716:	7dba      	ldrb	r2, [r7, #22]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	32ae      	adds	r2, #174	; 0xae
 800771c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	7afa      	ldrb	r2, [r7, #11]
 8007724:	4611      	mov	r1, r2
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	4798      	blx	r3
 800772a:	4603      	mov	r3, r0
 800772c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007734:	7dfb      	ldrb	r3, [r7, #23]
 8007736:	e000      	b.n	800773a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b086      	sub	sp, #24
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	460b      	mov	r3, r1
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d16f      	bne.n	8007836 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3314      	adds	r3, #20
 800775a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007762:	2b02      	cmp	r3, #2
 8007764:	d15a      	bne.n	800781c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	429a      	cmp	r2, r3
 8007770:	d914      	bls.n	800779c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	461a      	mov	r2, r3
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f001 f8ac 	bl	80088e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800778e:	2300      	movs	r3, #0
 8007790:	2200      	movs	r2, #0
 8007792:	2100      	movs	r1, #0
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f001 fda3 	bl	80092e0 <USBD_LL_PrepareReceive>
 800779a:	e03f      	b.n	800781c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d11c      	bne.n	80077e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d316      	bcc.n	80077e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077be:	429a      	cmp	r2, r3
 80077c0:	d20f      	bcs.n	80077e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077c2:	2200      	movs	r2, #0
 80077c4:	2100      	movs	r1, #0
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f001 f88d 	bl	80088e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077d4:	2300      	movs	r3, #0
 80077d6:	2200      	movs	r2, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f001 fd80 	bl	80092e0 <USBD_LL_PrepareReceive>
 80077e0:	e01c      	b.n	800781c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d10f      	bne.n	800780e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d009      	beq.n	800780e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800780e:	2180      	movs	r1, #128	; 0x80
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f001 fcbb 	bl	800918c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f001 f8b7 	bl	800898a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d03a      	beq.n	800789c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff fe42 	bl	80074b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007834:	e032      	b.n	800789c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800783c:	b2db      	uxtb	r3, r3
 800783e:	4619      	mov	r1, r3
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f97f 	bl	8007b44 <USBD_CoreFindEP>
 8007846:	4603      	mov	r3, r0
 8007848:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	2bff      	cmp	r3, #255	; 0xff
 800784e:	d025      	beq.n	800789c <USBD_LL_DataInStage+0x15a>
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d122      	bne.n	800789c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d11c      	bne.n	800789c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007862:	7dfa      	ldrb	r2, [r7, #23]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	32ae      	adds	r2, #174	; 0xae
 8007868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d014      	beq.n	800789c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007872:	7dfa      	ldrb	r2, [r7, #23]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800787a:	7dfa      	ldrb	r2, [r7, #23]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	32ae      	adds	r2, #174	; 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	7afa      	ldrb	r2, [r7, #11]
 8007888:	4611      	mov	r1, r2
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007892:	7dbb      	ldrb	r3, [r7, #22]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007898:	7dbb      	ldrb	r3, [r7, #22]
 800789a:	e000      	b.n	800789e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d014      	beq.n	800790c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00e      	beq.n	800790c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6852      	ldr	r2, [r2, #4]
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	4611      	mov	r1, r2
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 fbf5 	bl	8009102 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2240      	movs	r2, #64	; 0x40
 8007924:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	2200      	movs	r2, #0
 800792c:	2180      	movs	r1, #128	; 0x80
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fbe7 	bl	8009102 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2240      	movs	r2, #64	; 0x40
 800793e:	621a      	str	r2, [r3, #32]

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007978:	b2da      	uxtb	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2204      	movs	r2, #4
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d106      	bne.n	80079b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d110      	bne.n	80079fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32ae      	adds	r2, #174	; 0xae
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e01c      	b.n	8007a62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d115      	bne.n	8007a60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	32ae      	adds	r2, #174	; 0xae
 8007a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	32ae      	adds	r2, #174	; 0xae
 8007a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	460b      	mov	r3, r1
 8007a74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	32ae      	adds	r2, #174	; 0xae
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e01c      	b.n	8007ac6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d115      	bne.n	8007ac4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32ae      	adds	r2, #174	; 0xae
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32ae      	adds	r2, #174	; 0xae
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	78fa      	ldrb	r2, [r7, #3]
 8007abe:	4611      	mov	r1, r2
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00e      	beq.n	8007b20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6852      	ldr	r2, [r2, #4]
 8007b0e:	b2d2      	uxtb	r2, r2
 8007b10:	4611      	mov	r1, r2
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d920      	bls.n	8007bc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007b8e:	e013      	b.n	8007bb8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007b90:	f107 030a 	add.w	r3, r7, #10
 8007b94:	4619      	mov	r1, r3
 8007b96:	6978      	ldr	r0, [r7, #20]
 8007b98:	f000 f81b 	bl	8007bd2 <USBD_GetNextDesc>
 8007b9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	2b05      	cmp	r3, #5
 8007ba4:	d108      	bne.n	8007bb8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	789b      	ldrb	r3, [r3, #2]
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d008      	beq.n	8007bc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	885b      	ldrh	r3, [r3, #2]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	897b      	ldrh	r3, [r7, #10]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d8e5      	bhi.n	8007b90 <USBD_GetEpDesc+0x32>
 8007bc4:	e000      	b.n	8007bc8 <USBD_GetEpDesc+0x6a>
          break;
 8007bc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007bc8:	693b      	ldr	r3, [r7, #16]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	881a      	ldrh	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	4413      	add	r3, r2
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	3301      	adds	r3, #1
 8007c22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c2a:	8a3b      	ldrh	r3, [r7, #16]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	b21a      	sxth	r2, r3
 8007c30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	b21b      	sxth	r3, r3
 8007c38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c5e:	2b40      	cmp	r3, #64	; 0x40
 8007c60:	d005      	beq.n	8007c6e <USBD_StdDevReq+0x26>
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	d857      	bhi.n	8007d16 <USBD_StdDevReq+0xce>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00f      	beq.n	8007c8a <USBD_StdDevReq+0x42>
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d153      	bne.n	8007d16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	32ae      	adds	r2, #174	; 0xae
 8007c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
      break;
 8007c88:	e04a      	b.n	8007d20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b09      	cmp	r3, #9
 8007c90:	d83b      	bhi.n	8007d0a <USBD_StdDevReq+0xc2>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBD_StdDevReq+0x50>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d0b 	.word	0x08007d0b
 8007ca4:	08007cf7 	.word	0x08007cf7
 8007ca8:	08007d0b 	.word	0x08007d0b
 8007cac:	08007ccb 	.word	0x08007ccb
 8007cb0:	08007cc1 	.word	0x08007cc1
 8007cb4:	08007d0b 	.word	0x08007d0b
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cd5 	.word	0x08007cd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa3c 	bl	8008140 <USBD_GetDescriptor>
          break;
 8007cc8:	e024      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fba1 	bl	8008414 <USBD_SetAddress>
          break;
 8007cd2:	e01f      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fbe0 	bl	800849c <USBD_SetConfig>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
          break;
 8007ce0:	e018      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fc83 	bl	80085f0 <USBD_GetConfig>
          break;
 8007cea:	e013      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fcb4 	bl	800865c <USBD_GetStatus>
          break;
 8007cf4:	e00e      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fce3 	bl	80086c4 <USBD_SetFeature>
          break;
 8007cfe:	e009      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fd07 	bl	8008716 <USBD_ClrFeature>
          break;
 8007d08:	e004      	b.n	8007d14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fd5e 	bl	80087ce <USBD_CtlError>
          break;
 8007d12:	bf00      	nop
      }
      break;
 8007d14:	e004      	b.n	8007d20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fd58 	bl	80087ce <USBD_CtlError>
      break;
 8007d1e:	bf00      	nop
  }

  return ret;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop

08007d2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d005      	beq.n	8007d52 <USBD_StdItfReq+0x26>
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	d852      	bhi.n	8007df0 <USBD_StdItfReq+0xc4>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <USBD_StdItfReq+0x26>
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d14e      	bne.n	8007df0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d840      	bhi.n	8007de2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d836      	bhi.n	8007dd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	889b      	ldrh	r3, [r3, #4]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fed9 	bl	8007b2a <USBD_CoreFindIF>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2bff      	cmp	r3, #255	; 0xff
 8007d80:	d01d      	beq.n	8007dbe <USBD_StdItfReq+0x92>
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d11a      	bne.n	8007dbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007d88:	7bba      	ldrb	r2, [r7, #14]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	32ae      	adds	r2, #174	; 0xae
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00f      	beq.n	8007db8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007d98:	7bba      	ldrb	r2, [r7, #14]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007da0:	7bba      	ldrb	r2, [r7, #14]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	32ae      	adds	r2, #174	; 0xae
 8007da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	4798      	blx	r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007db6:	e004      	b.n	8007dc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007db8:	2303      	movs	r3, #3
 8007dba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dbc:	e001      	b.n	8007dc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d110      	bne.n	8007dec <USBD_StdItfReq+0xc0>
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fdc7 	bl	8008964 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dd6:	e009      	b.n	8007dec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fcf7 	bl	80087ce <USBD_CtlError>
          break;
 8007de0:	e004      	b.n	8007dec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fcf2 	bl	80087ce <USBD_CtlError>
          break;
 8007dea:	e000      	b.n	8007dee <USBD_StdItfReq+0xc2>
          break;
 8007dec:	bf00      	nop
      }
      break;
 8007dee:	e004      	b.n	8007dfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fceb 	bl	80087ce <USBD_CtlError>
      break;
 8007df8:	bf00      	nop
  }

  return ret;
 8007dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	889b      	ldrh	r3, [r3, #4]
 8007e16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d007      	beq.n	8007e34 <USBD_StdEPReq+0x30>
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	f200 817f 	bhi.w	8008128 <USBD_StdEPReq+0x324>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d02a      	beq.n	8007e84 <USBD_StdEPReq+0x80>
 8007e2e:	2b20      	cmp	r3, #32
 8007e30:	f040 817a 	bne.w	8008128 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fe83 	bl	8007b44 <USBD_CoreFindEP>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e42:	7b7b      	ldrb	r3, [r7, #13]
 8007e44:	2bff      	cmp	r3, #255	; 0xff
 8007e46:	f000 8174 	beq.w	8008132 <USBD_StdEPReq+0x32e>
 8007e4a:	7b7b      	ldrb	r3, [r7, #13]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 8170 	bne.w	8008132 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007e52:	7b7a      	ldrb	r2, [r7, #13]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e5a:	7b7a      	ldrb	r2, [r7, #13]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	32ae      	adds	r2, #174	; 0xae
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 8163 	beq.w	8008132 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e6c:	7b7a      	ldrb	r2, [r7, #13]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	; 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	4798      	blx	r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e82:	e156      	b.n	8008132 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d008      	beq.n	8007e9e <USBD_StdEPReq+0x9a>
 8007e8c:	2b03      	cmp	r3, #3
 8007e8e:	f300 8145 	bgt.w	800811c <USBD_StdEPReq+0x318>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 809b 	beq.w	8007fce <USBD_StdEPReq+0x1ca>
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d03c      	beq.n	8007f16 <USBD_StdEPReq+0x112>
 8007e9c:	e13e      	b.n	800811c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d002      	beq.n	8007eb0 <USBD_StdEPReq+0xac>
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d016      	beq.n	8007edc <USBD_StdEPReq+0xd8>
 8007eae:	e02c      	b.n	8007f0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00d      	beq.n	8007ed2 <USBD_StdEPReq+0xce>
 8007eb6:	7bbb      	ldrb	r3, [r7, #14]
 8007eb8:	2b80      	cmp	r3, #128	; 0x80
 8007eba:	d00a      	beq.n	8007ed2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 f963 	bl	800918c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ec6:	2180      	movs	r1, #128	; 0x80
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 f95f 	bl	800918c <USBD_LL_StallEP>
 8007ece:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ed0:	e020      	b.n	8007f14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc7a 	bl	80087ce <USBD_CtlError>
              break;
 8007eda:	e01b      	b.n	8007f14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	885b      	ldrh	r3, [r3, #2]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10e      	bne.n	8007f02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <USBD_StdEPReq+0xfe>
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d008      	beq.n	8007f02 <USBD_StdEPReq+0xfe>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	88db      	ldrh	r3, [r3, #6]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f001 f945 	bl	800918c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fd2e 	bl	8008964 <USBD_CtlSendStatus>

              break;
 8007f08:	e004      	b.n	8007f14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fc5e 	bl	80087ce <USBD_CtlError>
              break;
 8007f12:	bf00      	nop
          }
          break;
 8007f14:	e107      	b.n	8008126 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d002      	beq.n	8007f28 <USBD_StdEPReq+0x124>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d016      	beq.n	8007f54 <USBD_StdEPReq+0x150>
 8007f26:	e04b      	b.n	8007fc0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00d      	beq.n	8007f4a <USBD_StdEPReq+0x146>
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	2b80      	cmp	r3, #128	; 0x80
 8007f32:	d00a      	beq.n	8007f4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f927 	bl	800918c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 f923 	bl	800918c <USBD_LL_StallEP>
 8007f46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f48:	e040      	b.n	8007fcc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fc3e 	bl	80087ce <USBD_CtlError>
              break;
 8007f52:	e03b      	b.n	8007fcc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	885b      	ldrh	r3, [r3, #2]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d136      	bne.n	8007fca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 f92d 	bl	80091ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fcf7 	bl	8008964 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fde2 	bl	8007b44 <USBD_CoreFindEP>
 8007f80:	4603      	mov	r3, r0
 8007f82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f84:	7b7b      	ldrb	r3, [r7, #13]
 8007f86:	2bff      	cmp	r3, #255	; 0xff
 8007f88:	d01f      	beq.n	8007fca <USBD_StdEPReq+0x1c6>
 8007f8a:	7b7b      	ldrb	r3, [r7, #13]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d11c      	bne.n	8007fca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007f90:	7b7a      	ldrb	r2, [r7, #13]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007f98:	7b7a      	ldrb	r2, [r7, #13]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	32ae      	adds	r2, #174	; 0xae
 8007f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fa8:	7b7a      	ldrb	r2, [r7, #13]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	32ae      	adds	r2, #174	; 0xae
 8007fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fbe:	e004      	b.n	8007fca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fc03 	bl	80087ce <USBD_CtlError>
              break;
 8007fc8:	e000      	b.n	8007fcc <USBD_StdEPReq+0x1c8>
              break;
 8007fca:	bf00      	nop
          }
          break;
 8007fcc:	e0ab      	b.n	8008126 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d002      	beq.n	8007fe0 <USBD_StdEPReq+0x1dc>
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d032      	beq.n	8008044 <USBD_StdEPReq+0x240>
 8007fde:	e097      	b.n	8008110 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d007      	beq.n	8007ff6 <USBD_StdEPReq+0x1f2>
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d004      	beq.n	8007ff6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fbed 	bl	80087ce <USBD_CtlError>
                break;
 8007ff4:	e091      	b.n	800811a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	da0b      	bge.n	8008016 <USBD_StdEPReq+0x212>
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	3310      	adds	r3, #16
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	3304      	adds	r3, #4
 8008014:	e00b      	b.n	800802e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800801c:	4613      	mov	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	4413      	add	r3, r2
 800802c:	3304      	adds	r3, #4
 800802e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2202      	movs	r2, #2
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fc37 	bl	80088b0 <USBD_CtlSendData>
              break;
 8008042:	e06a      	b.n	800811a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da11      	bge.n	8008070 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	f003 020f 	and.w	r2, r3, #15
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d117      	bne.n	8008096 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fbb0 	bl	80087ce <USBD_CtlError>
                  break;
 800806e:	e054      	b.n	800811a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008070:	7bbb      	ldrb	r3, [r7, #14]
 8008072:	f003 020f 	and.w	r2, r3, #15
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb9d 	bl	80087ce <USBD_CtlError>
                  break;
 8008094:	e041      	b.n	800811a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008096:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	da0b      	bge.n	80080b6 <USBD_StdEPReq+0x2b2>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a4:	4613      	mov	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4413      	add	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	3310      	adds	r3, #16
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	e00b      	b.n	80080ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	4413      	add	r3, r2
 80080cc:	3304      	adds	r3, #4
 80080ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <USBD_StdEPReq+0x2d8>
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d103      	bne.n	80080e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	e00e      	b.n	8008102 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 f88d 	bl	8009208 <USBD_LL_IsStallEP>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2201      	movs	r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e002      	b.n	8008102 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2202      	movs	r2, #2
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fbd1 	bl	80088b0 <USBD_CtlSendData>
              break;
 800810e:	e004      	b.n	800811a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fb5b 	bl	80087ce <USBD_CtlError>
              break;
 8008118:	bf00      	nop
          }
          break;
 800811a:	e004      	b.n	8008126 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fb55 	bl	80087ce <USBD_CtlError>
          break;
 8008124:	bf00      	nop
      }
      break;
 8008126:	e005      	b.n	8008134 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fb4f 	bl	80087ce <USBD_CtlError>
      break;
 8008130:	e000      	b.n	8008134 <USBD_StdEPReq+0x330>
      break;
 8008132:	bf00      	nop
  }

  return ret;
 8008134:	7bfb      	ldrb	r3, [r7, #15]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	885b      	ldrh	r3, [r3, #2]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	2b06      	cmp	r3, #6
 8008162:	f200 8128 	bhi.w	80083b6 <USBD_GetDescriptor+0x276>
 8008166:	a201      	add	r2, pc, #4	; (adr r2, 800816c <USBD_GetDescriptor+0x2c>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	08008189 	.word	0x08008189
 8008170:	080081a1 	.word	0x080081a1
 8008174:	080081e1 	.word	0x080081e1
 8008178:	080083b7 	.word	0x080083b7
 800817c:	080083b7 	.word	0x080083b7
 8008180:	08008357 	.word	0x08008357
 8008184:	08008383 	.word	0x08008383
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
      break;
 800819e:	e112      	b.n	80083c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7c1b      	ldrb	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10d      	bne.n	80081c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f107 0208 	add.w	r2, r7, #8
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
 80081b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3301      	adds	r3, #1
 80081be:	2202      	movs	r2, #2
 80081c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081c2:	e100      	b.n	80083c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081cc:	f107 0208 	add.w	r2, r7, #8
 80081d0:	4610      	mov	r0, r2
 80081d2:	4798      	blx	r3
 80081d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3301      	adds	r3, #1
 80081da:	2202      	movs	r2, #2
 80081dc:	701a      	strb	r2, [r3, #0]
      break;
 80081de:	e0f2      	b.n	80083c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	885b      	ldrh	r3, [r3, #2]
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b05      	cmp	r3, #5
 80081e8:	f200 80ac 	bhi.w	8008344 <USBD_GetDescriptor+0x204>
 80081ec:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <USBD_GetDescriptor+0xb4>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	0800820d 	.word	0x0800820d
 80081f8:	08008241 	.word	0x08008241
 80081fc:	08008275 	.word	0x08008275
 8008200:	080082a9 	.word	0x080082a9
 8008204:	080082dd 	.word	0x080082dd
 8008208:	08008311 	.word	0x08008311
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	7c12      	ldrb	r2, [r2, #16]
 8008224:	f107 0108 	add.w	r1, r7, #8
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
 800822c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800822e:	e091      	b.n	8008354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 facb 	bl	80087ce <USBD_CtlError>
            err++;
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	3301      	adds	r3, #1
 800823c:	72fb      	strb	r3, [r7, #11]
          break;
 800823e:	e089      	b.n	8008354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00b      	beq.n	8008264 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7c12      	ldrb	r2, [r2, #16]
 8008258:	f107 0108 	add.w	r1, r7, #8
 800825c:	4610      	mov	r0, r2
 800825e:	4798      	blx	r3
 8008260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008262:	e077      	b.n	8008354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fab1 	bl	80087ce <USBD_CtlError>
            err++;
 800826c:	7afb      	ldrb	r3, [r7, #11]
 800826e:	3301      	adds	r3, #1
 8008270:	72fb      	strb	r3, [r7, #11]
          break;
 8008272:	e06f      	b.n	8008354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00b      	beq.n	8008298 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008296:	e05d      	b.n	8008354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fa97 	bl	80087ce <USBD_CtlError>
            err++;
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	3301      	adds	r3, #1
 80082a4:	72fb      	strb	r3, [r7, #11]
          break;
 80082a6:	e055      	b.n	8008354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ca:	e043      	b.n	8008354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fa7d 	bl	80087ce <USBD_CtlError>
            err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
          break;
 80082da:	e03b      	b.n	8008354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fe:	e029      	b.n	8008354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa63 	bl	80087ce <USBD_CtlError>
            err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
          break;
 800830e:	e021      	b.n	8008354 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008332:	e00f      	b.n	8008354 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa49 	bl	80087ce <USBD_CtlError>
            err++;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	3301      	adds	r3, #1
 8008340:	72fb      	strb	r3, [r7, #11]
          break;
 8008342:	e007      	b.n	8008354 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa41 	bl	80087ce <USBD_CtlError>
          err++;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	3301      	adds	r3, #1
 8008350:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008352:	bf00      	nop
      }
      break;
 8008354:	e037      	b.n	80083c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7c1b      	ldrb	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008366:	f107 0208 	add.w	r2, r7, #8
 800836a:	4610      	mov	r0, r2
 800836c:	4798      	blx	r3
 800836e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008370:	e029      	b.n	80083c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fa2a 	bl	80087ce <USBD_CtlError>
        err++;
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	3301      	adds	r3, #1
 800837e:	72fb      	strb	r3, [r7, #11]
      break;
 8008380:	e021      	b.n	80083c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	7c1b      	ldrb	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10d      	bne.n	80083a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	f107 0208 	add.w	r2, r7, #8
 8008396:	4610      	mov	r0, r2
 8008398:	4798      	blx	r3
 800839a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	2207      	movs	r2, #7
 80083a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083a4:	e00f      	b.n	80083c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa10 	bl	80087ce <USBD_CtlError>
        err++;
 80083ae:	7afb      	ldrb	r3, [r7, #11]
 80083b0:	3301      	adds	r3, #1
 80083b2:	72fb      	strb	r3, [r7, #11]
      break;
 80083b4:	e007      	b.n	80083c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fa08 	bl	80087ce <USBD_CtlError>
      err++;
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	3301      	adds	r3, #1
 80083c2:	72fb      	strb	r3, [r7, #11]
      break;
 80083c4:	bf00      	nop
  }

  if (err != 0U)
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d11e      	bne.n	800840a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	88db      	ldrh	r3, [r3, #6]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d016      	beq.n	8008402 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083d4:	893b      	ldrh	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	88da      	ldrh	r2, [r3, #6]
 80083de:	893b      	ldrh	r3, [r7, #8]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	bf28      	it	cs
 80083e4:	4613      	movcs	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083ea:	893b      	ldrh	r3, [r7, #8]
 80083ec:	461a      	mov	r2, r3
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa5d 	bl	80088b0 <USBD_CtlSendData>
 80083f6:	e009      	b.n	800840c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9e7 	bl	80087ce <USBD_CtlError>
 8008400:	e004      	b.n	800840c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 faae 	bl	8008964 <USBD_CtlSendStatus>
 8008408:	e000      	b.n	800840c <USBD_GetDescriptor+0x2cc>
    return;
 800840a:	bf00      	nop
  }
}
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop

08008414 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	889b      	ldrh	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d131      	bne.n	800848a <USBD_SetAddress+0x76>
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	88db      	ldrh	r3, [r3, #6]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d12d      	bne.n	800848a <USBD_SetAddress+0x76>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	885b      	ldrh	r3, [r3, #2]
 8008432:	2b7f      	cmp	r3, #127	; 0x7f
 8008434:	d829      	bhi.n	800848a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008440:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b03      	cmp	r3, #3
 800844c:	d104      	bne.n	8008458 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f9bc 	bl	80087ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008456:	e01d      	b.n	8008494 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	7bfa      	ldrb	r2, [r7, #15]
 800845c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fefb 	bl	8009260 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa7a 	bl	8008964 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2202      	movs	r2, #2
 800847a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847e:	e009      	b.n	8008494 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008488:	e004      	b.n	8008494 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f99e 	bl	80087ce <USBD_CtlError>
  }
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	4b4e      	ldr	r3, [pc, #312]	; (80085ec <USBD_SetConfig+0x150>)
 80084b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084b4:	4b4d      	ldr	r3, [pc, #308]	; (80085ec <USBD_SetConfig+0x150>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d905      	bls.n	80084c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f985 	bl	80087ce <USBD_CtlError>
    return USBD_FAIL;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e08c      	b.n	80085e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d002      	beq.n	80084da <USBD_SetConfig+0x3e>
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d029      	beq.n	800852c <USBD_SetConfig+0x90>
 80084d8:	e075      	b.n	80085c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084da:	4b44      	ldr	r3, [pc, #272]	; (80085ec <USBD_SetConfig+0x150>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d020      	beq.n	8008524 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80084e2:	4b42      	ldr	r3, [pc, #264]	; (80085ec <USBD_SetConfig+0x150>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084ec:	4b3f      	ldr	r3, [pc, #252]	; (80085ec <USBD_SetConfig+0x150>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fe ffe7 	bl	80074c6 <USBD_SetClassConfig>
 80084f8:	4603      	mov	r3, r0
 80084fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d008      	beq.n	8008514 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f962 	bl	80087ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008512:	e065      	b.n	80085e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fa25 	bl	8008964 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2203      	movs	r2, #3
 800851e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008522:	e05d      	b.n	80085e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fa1d 	bl	8008964 <USBD_CtlSendStatus>
      break;
 800852a:	e059      	b.n	80085e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800852c:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <USBD_SetConfig+0x150>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d112      	bne.n	800855a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800853c:	4b2b      	ldr	r3, [pc, #172]	; (80085ec <USBD_SetConfig+0x150>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <USBD_SetConfig+0x150>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fe ffd6 	bl	80074fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa06 	bl	8008964 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008558:	e042      	b.n	80085e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800855a:	4b24      	ldr	r3, [pc, #144]	; (80085ec <USBD_SetConfig+0x150>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	429a      	cmp	r2, r3
 8008566:	d02a      	beq.n	80085be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fe ffc4 	bl	80074fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008576:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <USBD_SetConfig+0x150>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <USBD_SetConfig+0x150>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f7fe ff9d 	bl	80074c6 <USBD_SetClassConfig>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00f      	beq.n	80085b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f918 	bl	80087ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fe ffa9 	bl	80074fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085b4:	e014      	b.n	80085e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f9d4 	bl	8008964 <USBD_CtlSendStatus>
      break;
 80085bc:	e010      	b.n	80085e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9d0 	bl	8008964 <USBD_CtlSendStatus>
      break;
 80085c4:	e00c      	b.n	80085e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f900 	bl	80087ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <USBD_SetConfig+0x150>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7fe ff92 	bl	80074fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085da:	2303      	movs	r3, #3
 80085dc:	73fb      	strb	r3, [r7, #15]
      break;
 80085de:	bf00      	nop
  }

  return ret;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000330 	.word	0x20000330

080085f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	88db      	ldrh	r3, [r3, #6]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d004      	beq.n	800860c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f8e2 	bl	80087ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800860a:	e023      	b.n	8008654 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b02      	cmp	r3, #2
 8008616:	dc02      	bgt.n	800861e <USBD_GetConfig+0x2e>
 8008618:	2b00      	cmp	r3, #0
 800861a:	dc03      	bgt.n	8008624 <USBD_GetConfig+0x34>
 800861c:	e015      	b.n	800864a <USBD_GetConfig+0x5a>
 800861e:	2b03      	cmp	r3, #3
 8008620:	d00b      	beq.n	800863a <USBD_GetConfig+0x4a>
 8008622:	e012      	b.n	800864a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3308      	adds	r3, #8
 800862e:	2201      	movs	r2, #1
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f93c 	bl	80088b0 <USBD_CtlSendData>
        break;
 8008638:	e00c      	b.n	8008654 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3304      	adds	r3, #4
 800863e:	2201      	movs	r2, #1
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f934 	bl	80088b0 <USBD_CtlSendData>
        break;
 8008648:	e004      	b.n	8008654 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f8be 	bl	80087ce <USBD_CtlError>
        break;
 8008652:	bf00      	nop
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800866c:	b2db      	uxtb	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	2b02      	cmp	r3, #2
 8008672:	d81e      	bhi.n	80086b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	88db      	ldrh	r3, [r3, #6]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d004      	beq.n	8008686 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f8a5 	bl	80087ce <USBD_CtlError>
        break;
 8008684:	e01a      	b.n	80086bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f043 0202 	orr.w	r2, r3, #2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	330c      	adds	r3, #12
 80086a6:	2202      	movs	r2, #2
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f900 	bl	80088b0 <USBD_CtlSendData>
      break;
 80086b0:	e004      	b.n	80086bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f88a 	bl	80087ce <USBD_CtlError>
      break;
 80086ba:	bf00      	nop
  }
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d107      	bne.n	80086e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f940 	bl	8008964 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80086e4:	e013      	b.n	800870e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	885b      	ldrh	r3, [r3, #2]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d10b      	bne.n	8008706 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	889b      	ldrh	r3, [r3, #4]
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f930 	bl	8008964 <USBD_CtlSendStatus>
}
 8008704:	e003      	b.n	800870e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f860 	bl	80087ce <USBD_CtlError>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008726:	b2db      	uxtb	r3, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	2b02      	cmp	r3, #2
 800872c:	d80b      	bhi.n	8008746 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	885b      	ldrh	r3, [r3, #2]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d10c      	bne.n	8008750 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f910 	bl	8008964 <USBD_CtlSendStatus>
      }
      break;
 8008744:	e004      	b.n	8008750 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f840 	bl	80087ce <USBD_CtlError>
      break;
 800874e:	e000      	b.n	8008752 <USBD_ClrFeature+0x3c>
      break;
 8008750:	bf00      	nop
  }
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f7ff fa41 	bl	8007c0c <SWAPBYTE>
 800878a:	4603      	mov	r3, r0
 800878c:	461a      	mov	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3301      	adds	r3, #1
 800879c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f7ff fa34 	bl	8007c0c <SWAPBYTE>
 80087a4:	4603      	mov	r3, r0
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3301      	adds	r3, #1
 80087b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fa27 	bl	8007c0c <SWAPBYTE>
 80087be:	4603      	mov	r3, r0
 80087c0:	461a      	mov	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	80da      	strh	r2, [r3, #6]
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087d8:	2180      	movs	r1, #128	; 0x80
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fcd6 	bl	800918c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80087e0:	2100      	movs	r1, #0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fcd2 	bl	800918c <USBD_LL_StallEP>
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d036      	beq.n	8008874 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800880a:	6938      	ldr	r0, [r7, #16]
 800880c:	f000 f836 	bl	800887c <USBD_GetLen>
 8008810:	4603      	mov	r3, r0
 8008812:	3301      	adds	r3, #1
 8008814:	b29b      	uxth	r3, r3
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	4413      	add	r3, r2
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	701a      	strb	r2, [r3, #0]
  idx++;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	3301      	adds	r3, #1
 800882e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	4413      	add	r3, r2
 8008836:	2203      	movs	r2, #3
 8008838:	701a      	strb	r2, [r3, #0]
  idx++;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	3301      	adds	r3, #1
 800883e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008840:	e013      	b.n	800886a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	4413      	add	r3, r2
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	7812      	ldrb	r2, [r2, #0]
 800884c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3301      	adds	r3, #1
 8008852:	613b      	str	r3, [r7, #16]
    idx++;
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	3301      	adds	r3, #1
 8008858:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	4413      	add	r3, r2
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
    idx++;
 8008864:	7dfb      	ldrb	r3, [r7, #23]
 8008866:	3301      	adds	r3, #1
 8008868:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e7      	bne.n	8008842 <USBD_GetString+0x52>
 8008872:	e000      	b.n	8008876 <USBD_GetString+0x86>
    return;
 8008874:	bf00      	nop
  }
}
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800888c:	e005      	b.n	800889a <USBD_GetLen+0x1e>
  {
    len++;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	3301      	adds	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	3301      	adds	r3, #1
 8008898:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f5      	bne.n	800888e <USBD_GetLen+0x12>
  }

  return len;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2202      	movs	r2, #2
 80088c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	2100      	movs	r1, #0
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fce1 	bl	800929e <USBD_LL_Transmit>

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	2100      	movs	r1, #0
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fcd0 	bl	800929e <USBD_LL_Transmit>

  return USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2203      	movs	r2, #3
 8008918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	2100      	movs	r1, #0
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fcd4 	bl	80092e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	2100      	movs	r1, #0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fcc3 	bl	80092e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2204      	movs	r2, #4
 8008970:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008974:	2300      	movs	r3, #0
 8008976:	2200      	movs	r2, #0
 8008978:	2100      	movs	r1, #0
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fc8f 	bl	800929e <USBD_LL_Transmit>

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b082      	sub	sp, #8
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2205      	movs	r2, #5
 8008996:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800899a:	2300      	movs	r3, #0
 800899c:	2200      	movs	r2, #0
 800899e:	2100      	movs	r1, #0
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fc9d 	bl	80092e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089b4:	2200      	movs	r2, #0
 80089b6:	4912      	ldr	r1, [pc, #72]	; (8008a00 <MX_USB_DEVICE_Init+0x50>)
 80089b8:	4812      	ldr	r0, [pc, #72]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089ba:	f7fe fd07 	bl	80073cc <USBD_Init>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089c4:	f7f8 fcbc 	bl	8001340 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80089c8:	490f      	ldr	r1, [pc, #60]	; (8008a08 <MX_USB_DEVICE_Init+0x58>)
 80089ca:	480e      	ldr	r0, [pc, #56]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089cc:	f7fe fd2e 	bl	800742c <USBD_RegisterClass>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80089d6:	f7f8 fcb3 	bl	8001340 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80089da:	490c      	ldr	r1, [pc, #48]	; (8008a0c <MX_USB_DEVICE_Init+0x5c>)
 80089dc:	4809      	ldr	r0, [pc, #36]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089de:	f7fe fc1f 	bl	8007220 <USBD_CDC_RegisterInterface>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80089e8:	f7f8 fcaa 	bl	8001340 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089ec:	4805      	ldr	r0, [pc, #20]	; (8008a04 <MX_USB_DEVICE_Init+0x54>)
 80089ee:	f7fe fd53 	bl	8007498 <USBD_Start>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80089f8:	f7f8 fca2 	bl	8001340 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089fc:	bf00      	nop
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200000b0 	.word	0x200000b0
 8008a04:	20000334 	.word	0x20000334
 8008a08:	2000001c 	.word	0x2000001c
 8008a0c:	2000009c 	.word	0x2000009c

08008a10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	4905      	ldr	r1, [pc, #20]	; (8008a2c <CDC_Init_FS+0x1c>)
 8008a18:	4805      	ldr	r0, [pc, #20]	; (8008a30 <CDC_Init_FS+0x20>)
 8008a1a:	f7fe fc1b 	bl	8007254 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a1e:	4905      	ldr	r1, [pc, #20]	; (8008a34 <CDC_Init_FS+0x24>)
 8008a20:	4803      	ldr	r0, [pc, #12]	; (8008a30 <CDC_Init_FS+0x20>)
 8008a22:	f7fe fc39 	bl	8007298 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	20000a10 	.word	0x20000a10
 8008a30:	20000334 	.word	0x20000334
 8008a34:	20000610 	.word	0x20000610

08008a38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	6039      	str	r1, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
 8008a54:	4613      	mov	r3, r2
 8008a56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b23      	cmp	r3, #35	; 0x23
 8008a5c:	d84a      	bhi.n	8008af4 <CDC_Control_FS+0xac>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <CDC_Control_FS+0x1c>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008af5 	.word	0x08008af5
 8008a68:	08008af5 	.word	0x08008af5
 8008a6c:	08008af5 	.word	0x08008af5
 8008a70:	08008af5 	.word	0x08008af5
 8008a74:	08008af5 	.word	0x08008af5
 8008a78:	08008af5 	.word	0x08008af5
 8008a7c:	08008af5 	.word	0x08008af5
 8008a80:	08008af5 	.word	0x08008af5
 8008a84:	08008af5 	.word	0x08008af5
 8008a88:	08008af5 	.word	0x08008af5
 8008a8c:	08008af5 	.word	0x08008af5
 8008a90:	08008af5 	.word	0x08008af5
 8008a94:	08008af5 	.word	0x08008af5
 8008a98:	08008af5 	.word	0x08008af5
 8008a9c:	08008af5 	.word	0x08008af5
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008af5 	.word	0x08008af5
 8008aa8:	08008af5 	.word	0x08008af5
 8008aac:	08008af5 	.word	0x08008af5
 8008ab0:	08008af5 	.word	0x08008af5
 8008ab4:	08008af5 	.word	0x08008af5
 8008ab8:	08008af5 	.word	0x08008af5
 8008abc:	08008af5 	.word	0x08008af5
 8008ac0:	08008af5 	.word	0x08008af5
 8008ac4:	08008af5 	.word	0x08008af5
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	08008af5 	.word	0x08008af5
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008af5 	.word	0x08008af5
 8008adc:	08008af5 	.word	0x08008af5
 8008ae0:	08008af5 	.word	0x08008af5
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008af5 	.word	0x08008af5
 8008aec:	08008af5 	.word	0x08008af5
 8008af0:	08008af5 	.word	0x08008af5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008af4:	bf00      	nop
  }

  return (USBD_OK);
 8008af6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4805      	ldr	r0, [pc, #20]	; (8008b28 <CDC_Receive_FS+0x24>)
 8008b12:	f7fe fbc1 	bl	8007298 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b16:	4804      	ldr	r0, [pc, #16]	; (8008b28 <CDC_Receive_FS+0x24>)
 8008b18:	f7fe fc22 	bl	8007360 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000334 	.word	0x20000334

08008b2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b3c:	4b0d      	ldr	r3, [pc, #52]	; (8008b74 <CDC_Transmit_FS+0x48>)
 8008b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e00b      	b.n	8008b6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b52:	887b      	ldrh	r3, [r7, #2]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	4806      	ldr	r0, [pc, #24]	; (8008b74 <CDC_Transmit_FS+0x48>)
 8008b5a:	f7fe fb7b 	bl	8007254 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b5e:	4805      	ldr	r0, [pc, #20]	; (8008b74 <CDC_Transmit_FS+0x48>)
 8008b60:	f7fe fbb8 	bl	80072d4 <USBD_CDC_TransmitPacket>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000334 	.word	0x20000334

08008b78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4613      	mov	r3, r2
 8008b84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
	...

08008b9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2212      	movs	r2, #18
 8008bac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bae:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	200000cc 	.word	0x200000cc

08008bc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	2204      	movs	r2, #4
 8008bd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bd2:	4b03      	ldr	r3, [pc, #12]	; (8008be0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	200000e0 	.word	0x200000e0

08008be4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d105      	bne.n	8008c02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	4907      	ldr	r1, [pc, #28]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bfa:	4808      	ldr	r0, [pc, #32]	; (8008c1c <USBD_FS_ProductStrDescriptor+0x38>)
 8008bfc:	f7ff fdf8 	bl	80087f0 <USBD_GetString>
 8008c00:	e004      	b.n	8008c0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	4904      	ldr	r1, [pc, #16]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c06:	4805      	ldr	r0, [pc, #20]	; (8008c1c <USBD_FS_ProductStrDescriptor+0x38>)
 8008c08:	f7ff fdf2 	bl	80087f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000e10 	.word	0x20000e10
 8008c1c:	0800bbb8 	.word	0x0800bbb8

08008c20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	4603      	mov	r3, r0
 8008c28:	6039      	str	r1, [r7, #0]
 8008c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	4904      	ldr	r1, [pc, #16]	; (8008c40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c30:	4804      	ldr	r0, [pc, #16]	; (8008c44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c32:	f7ff fddd 	bl	80087f0 <USBD_GetString>
  return USBD_StrDesc;
 8008c36:	4b02      	ldr	r3, [pc, #8]	; (8008c40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000e10 	.word	0x20000e10
 8008c44:	0800bbd0 	.word	0x0800bbd0

08008c48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	221a      	movs	r2, #26
 8008c58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c5a:	f000 f843 	bl	8008ce4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c5e:	4b02      	ldr	r3, [pc, #8]	; (8008c68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	200000e4 	.word	0x200000e4

08008c6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4907      	ldr	r1, [pc, #28]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c82:	4808      	ldr	r0, [pc, #32]	; (8008ca4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c84:	f7ff fdb4 	bl	80087f0 <USBD_GetString>
 8008c88:	e004      	b.n	8008c94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4904      	ldr	r1, [pc, #16]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c8e:	4805      	ldr	r0, [pc, #20]	; (8008ca4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c90:	f7ff fdae 	bl	80087f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000e10 	.word	0x20000e10
 8008ca4:	0800bbe4 	.word	0x0800bbe4

08008ca8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d105      	bne.n	8008cc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	4907      	ldr	r1, [pc, #28]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cbe:	4808      	ldr	r0, [pc, #32]	; (8008ce0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008cc0:	f7ff fd96 	bl	80087f0 <USBD_GetString>
 8008cc4:	e004      	b.n	8008cd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4904      	ldr	r1, [pc, #16]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008cca:	4805      	ldr	r0, [pc, #20]	; (8008ce0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ccc:	f7ff fd90 	bl	80087f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000e10 	.word	0x20000e10
 8008ce0:	0800bbf0 	.word	0x0800bbf0

08008ce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cea:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <Get_SerialNum+0x44>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cf0:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <Get_SerialNum+0x48>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cf6:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <Get_SerialNum+0x4c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	4909      	ldr	r1, [pc, #36]	; (8008d34 <Get_SerialNum+0x50>)
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f814 	bl	8008d3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d14:	2204      	movs	r2, #4
 8008d16:	4908      	ldr	r1, [pc, #32]	; (8008d38 <Get_SerialNum+0x54>)
 8008d18:	68b8      	ldr	r0, [r7, #8]
 8008d1a:	f000 f80f 	bl	8008d3c <IntToUnicode>
  }
}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	1fff7a10 	.word	0x1fff7a10
 8008d2c:	1fff7a14 	.word	0x1fff7a14
 8008d30:	1fff7a18 	.word	0x1fff7a18
 8008d34:	200000e6 	.word	0x200000e6
 8008d38:	200000f6 	.word	0x200000f6

08008d3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75fb      	strb	r3, [r7, #23]
 8008d52:	e027      	b.n	8008da4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	0f1b      	lsrs	r3, r3, #28
 8008d58:	2b09      	cmp	r3, #9
 8008d5a:	d80b      	bhi.n	8008d74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	0f1b      	lsrs	r3, r3, #28
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4619      	mov	r1, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3230      	adds	r2, #48	; 0x30
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e00a      	b.n	8008d8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	0f1b      	lsrs	r3, r3, #28
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	4619      	mov	r1, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	440b      	add	r3, r1
 8008d84:	3237      	adds	r2, #55	; 0x37
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	011b      	lsls	r3, r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	3301      	adds	r3, #1
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	4413      	add	r3, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	3301      	adds	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
 8008da4:	7dfa      	ldrb	r2, [r7, #23]
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3d3      	bcc.n	8008d54 <IntToUnicode+0x18>
  }
}
 8008dac:	bf00      	nop
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dc4:	f107 0314 	add.w	r3, r7, #20
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	605a      	str	r2, [r3, #4]
 8008dce:	609a      	str	r2, [r3, #8]
 8008dd0:	60da      	str	r2, [r3, #12]
 8008dd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ddc:	d13a      	bne.n	8008e54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dde:	2300      	movs	r3, #0
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	4b1e      	ldr	r3, [pc, #120]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	4a1d      	ldr	r2, [pc, #116]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008de8:	f043 0301 	orr.w	r3, r3, #1
 8008dec:	6313      	str	r3, [r2, #48]	; 0x30
 8008dee:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df2:	f003 0301 	and.w	r3, r3, #1
 8008df6:	613b      	str	r3, [r7, #16]
 8008df8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008dfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e00:	2302      	movs	r3, #2
 8008e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e0c:	230a      	movs	r3, #10
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	4619      	mov	r1, r3
 8008e16:	4812      	ldr	r0, [pc, #72]	; (8008e60 <HAL_PCD_MspInit+0xa4>)
 8008e18:	f7f9 fc8e 	bl	8002738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e1c:	4b0f      	ldr	r3, [pc, #60]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e20:	4a0e      	ldr	r2, [pc, #56]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e26:	6353      	str	r3, [r2, #52]	; 0x34
 8008e28:	2300      	movs	r3, #0
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e30:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e36:	6453      	str	r3, [r2, #68]	; 0x44
 8008e38:	4b08      	ldr	r3, [pc, #32]	; (8008e5c <HAL_PCD_MspInit+0xa0>)
 8008e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e44:	2200      	movs	r2, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	2043      	movs	r0, #67	; 0x43
 8008e4a:	f7f9 f954 	bl	80020f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e4e:	2043      	movs	r0, #67	; 0x43
 8008e50:	f7f9 f96d 	bl	800212e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e54:	bf00      	nop
 8008e56:	3728      	adds	r7, #40	; 0x28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	40020000 	.word	0x40020000

08008e64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe fb59 	bl	8007532 <USBD_LL_SetupStage>
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f7fe fb93 	bl	80075dc <USBD_LL_DataOutStage>
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	334c      	adds	r3, #76	; 0x4c
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	f7fe fc2c 	bl	8007742 <USBD_LL_DataInStage>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b082      	sub	sp, #8
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fe fd60 	bl	80079c6 <USBD_LL_SOF>
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f16:	2301      	movs	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d001      	beq.n	8008f26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f22:	f7f8 fa0d 	bl	8001340 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f2c:	7bfa      	ldrb	r2, [r7, #15]
 8008f2e:	4611      	mov	r1, r2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fd0a 	bl	800794a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe fcb2 	bl	80078a6 <USBD_LL_Reset>
}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fd05 	bl	800796a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f72:	f043 0301 	orr.w	r3, r3, #1
 8008f76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f80:	4b04      	ldr	r3, [pc, #16]	; (8008f94 <HAL_PCD_SuspendCallback+0x48>)
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	4a03      	ldr	r2, [pc, #12]	; (8008f94 <HAL_PCD_SuspendCallback+0x48>)
 8008f86:	f043 0306 	orr.w	r3, r3, #6
 8008f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	e000ed00 	.word	0xe000ed00

08008f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe fcf5 	bl	8007996 <USBD_LL_Resume>
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fc6:	78fa      	ldrb	r2, [r7, #3]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe fd4d 	bl	8007a6a <USBD_LL_IsoOUTIncomplete>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008fea:	78fa      	ldrb	r2, [r7, #3]
 8008fec:	4611      	mov	r1, r2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd09 	bl	8007a06 <USBD_LL_IsoINIncomplete>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fd5f 	bl	8007ace <USBD_LL_DevConnected>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe fd5c 	bl	8007ae4 <USBD_LL_DevDisconnected>
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d13c      	bne.n	80090be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009044:	4a20      	ldr	r2, [pc, #128]	; (80090c8 <USBD_LL_Init+0x94>)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a1e      	ldr	r2, [pc, #120]	; (80090c8 <USBD_LL_Init+0x94>)
 8009050:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009054:	4b1c      	ldr	r3, [pc, #112]	; (80090c8 <USBD_LL_Init+0x94>)
 8009056:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800905a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800905c:	4b1a      	ldr	r3, [pc, #104]	; (80090c8 <USBD_LL_Init+0x94>)
 800905e:	2204      	movs	r2, #4
 8009060:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009062:	4b19      	ldr	r3, [pc, #100]	; (80090c8 <USBD_LL_Init+0x94>)
 8009064:	2202      	movs	r2, #2
 8009066:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009068:	4b17      	ldr	r3, [pc, #92]	; (80090c8 <USBD_LL_Init+0x94>)
 800906a:	2200      	movs	r2, #0
 800906c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800906e:	4b16      	ldr	r3, [pc, #88]	; (80090c8 <USBD_LL_Init+0x94>)
 8009070:	2202      	movs	r2, #2
 8009072:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009074:	4b14      	ldr	r3, [pc, #80]	; (80090c8 <USBD_LL_Init+0x94>)
 8009076:	2200      	movs	r2, #0
 8009078:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800907a:	4b13      	ldr	r3, [pc, #76]	; (80090c8 <USBD_LL_Init+0x94>)
 800907c:	2200      	movs	r2, #0
 800907e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009080:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <USBD_LL_Init+0x94>)
 8009082:	2200      	movs	r2, #0
 8009084:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009086:	4b10      	ldr	r3, [pc, #64]	; (80090c8 <USBD_LL_Init+0x94>)
 8009088:	2200      	movs	r2, #0
 800908a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800908c:	4b0e      	ldr	r3, [pc, #56]	; (80090c8 <USBD_LL_Init+0x94>)
 800908e:	2200      	movs	r2, #0
 8009090:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009092:	480d      	ldr	r0, [pc, #52]	; (80090c8 <USBD_LL_Init+0x94>)
 8009094:	f7f9 fe18 	bl	8002cc8 <HAL_PCD_Init>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800909e:	f7f8 f94f 	bl	8001340 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090a2:	2180      	movs	r1, #128	; 0x80
 80090a4:	4808      	ldr	r0, [pc, #32]	; (80090c8 <USBD_LL_Init+0x94>)
 80090a6:	f7fb f870 	bl	800418a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090aa:	2240      	movs	r2, #64	; 0x40
 80090ac:	2100      	movs	r1, #0
 80090ae:	4806      	ldr	r0, [pc, #24]	; (80090c8 <USBD_LL_Init+0x94>)
 80090b0:	f7fb f824 	bl	80040fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090b4:	2280      	movs	r2, #128	; 0x80
 80090b6:	2101      	movs	r1, #1
 80090b8:	4803      	ldr	r0, [pc, #12]	; (80090c8 <USBD_LL_Init+0x94>)
 80090ba:	f7fb f81f 	bl	80040fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20001010 	.word	0x20001010

080090cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f9 ff0d 	bl	8002f02 <HAL_PCD_Start>
 80090e8:	4603      	mov	r3, r0
 80090ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f942 	bl	8009378 <USBD_Get_USB_Status>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	461a      	mov	r2, r3
 8009110:	4603      	mov	r3, r0
 8009112:	70fb      	strb	r3, [r7, #3]
 8009114:	460b      	mov	r3, r1
 8009116:	70bb      	strb	r3, [r7, #2]
 8009118:	4613      	mov	r3, r2
 800911a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800912a:	78bb      	ldrb	r3, [r7, #2]
 800912c:	883a      	ldrh	r2, [r7, #0]
 800912e:	78f9      	ldrb	r1, [r7, #3]
 8009130:	f7fa fbde 	bl	80038f0 <HAL_PCD_EP_Open>
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f91c 	bl	8009378 <USBD_Get_USB_Status>
 8009140:	4603      	mov	r3, r0
 8009142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009144:	7bbb      	ldrb	r3, [r7, #14]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b084      	sub	sp, #16
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
 8009156:	460b      	mov	r3, r1
 8009158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7fa fc27 	bl	80039c0 <HAL_PCD_EP_Close>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	4618      	mov	r0, r3
 800917a:	f000 f8fd 	bl	8009378 <USBD_Get_USB_Status>
 800917e:	4603      	mov	r3, r0
 8009180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009182:	7bbb      	ldrb	r3, [r7, #14]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fa fcff 	bl	8003bae <HAL_PCD_EP_SetStall>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f8de 	bl	8009378 <USBD_Get_USB_Status>
 80091bc:	4603      	mov	r3, r0
 80091be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	460b      	mov	r3, r1
 80091d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091e4:	78fa      	ldrb	r2, [r7, #3]
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fa fd44 	bl	8003c76 <HAL_PCD_EP_ClrStall>
 80091ee:	4603      	mov	r3, r0
 80091f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f000 f8bf 	bl	8009378 <USBD_Get_USB_Status>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800921a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800921c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009220:	2b00      	cmp	r3, #0
 8009222:	da0b      	bge.n	800923c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922a:	68f9      	ldr	r1, [r7, #12]
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	333e      	adds	r3, #62	; 0x3e
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	e00b      	b.n	8009254 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	4613      	mov	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	4611      	mov	r1, r2
 800927e:	4618      	mov	r0, r3
 8009280:	f7fa fb11 	bl	80038a6 <HAL_PCD_SetAddress>
 8009284:	4603      	mov	r3, r0
 8009286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 f874 	bl	8009378 <USBD_Get_USB_Status>
 8009290:	4603      	mov	r3, r0
 8009292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009294:	7bbb      	ldrb	r3, [r7, #14]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b086      	sub	sp, #24
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	460b      	mov	r3, r1
 80092ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092bc:	7af9      	ldrb	r1, [r7, #11]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f7fa fc2a 	bl	8003b1a <HAL_PCD_EP_Transmit>
 80092c6:	4603      	mov	r3, r0
 80092c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 f853 	bl	8009378 <USBD_Get_USB_Status>
 80092d2:	4603      	mov	r3, r0
 80092d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	603b      	str	r3, [r7, #0]
 80092ec:	460b      	mov	r3, r1
 80092ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80092fe:	7af9      	ldrb	r1, [r7, #11]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	f7fa fba6 	bl	8003a54 <HAL_PCD_EP_Receive>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f832 	bl	8009378 <USBD_Get_USB_Status>
 8009314:	4603      	mov	r3, r0
 8009316:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009318:	7dbb      	ldrb	r3, [r7, #22]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	460b      	mov	r3, r1
 800932c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009334:	78fa      	ldrb	r2, [r7, #3]
 8009336:	4611      	mov	r1, r2
 8009338:	4618      	mov	r0, r3
 800933a:	f7fa fbd6 	bl	8003aea <HAL_PCD_EP_GetRxCount>
 800933e:	4603      	mov	r3, r0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009350:	4b03      	ldr	r3, [pc, #12]	; (8009360 <USBD_static_malloc+0x18>)
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000151c 	.word	0x2000151c

08009364 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]

}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d817      	bhi.n	80093bc <USBD_Get_USB_Status+0x44>
 800938c:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <USBD_Get_USB_Status+0x1c>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	080093a5 	.word	0x080093a5
 8009398:	080093ab 	.word	0x080093ab
 800939c:	080093b1 	.word	0x080093b1
 80093a0:	080093b7 	.word	0x080093b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	e00b      	b.n	80093c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093aa:	2303      	movs	r3, #3
 80093ac:	73fb      	strb	r3, [r7, #15]
    break;
 80093ae:	e008      	b.n	80093c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093b0:	2301      	movs	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
    break;
 80093b4:	e005      	b.n	80093c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ba:	e002      	b.n	80093c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093bc:	2303      	movs	r3, #3
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	bf00      	nop
  }
  return usb_status;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <gcvt>:
 80093d0:	b530      	push	{r4, r5, lr}
 80093d2:	2200      	movs	r2, #0
 80093d4:	b085      	sub	sp, #20
 80093d6:	460c      	mov	r4, r1
 80093d8:	4605      	mov	r5, r0
 80093da:	2300      	movs	r3, #0
 80093dc:	ec51 0b10 	vmov	r0, r1, d0
 80093e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80093e4:	f7f7 fb82 	bl	8000aec <__aeabi_dcmplt>
 80093e8:	ed9d 0b02 	vldr	d0, [sp, #8]
 80093ec:	4622      	mov	r2, r4
 80093ee:	b118      	cbz	r0, 80093f8 <gcvt+0x28>
 80093f0:	232d      	movs	r3, #45	; 0x2d
 80093f2:	f802 3b01 	strb.w	r3, [r2], #1
 80093f6:	3d01      	subs	r5, #1
 80093f8:	2300      	movs	r3, #0
 80093fa:	4806      	ldr	r0, [pc, #24]	; (8009414 <gcvt+0x44>)
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	4629      	mov	r1, r5
 8009400:	2367      	movs	r3, #103	; 0x67
 8009402:	6800      	ldr	r0, [r0, #0]
 8009404:	f000 f8b4 	bl	8009570 <_gcvt>
 8009408:	2800      	cmp	r0, #0
 800940a:	bf14      	ite	ne
 800940c:	4620      	movne	r0, r4
 800940e:	2000      	moveq	r0, #0
 8009410:	b005      	add	sp, #20
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	20000100 	.word	0x20000100

08009418 <__errno>:
 8009418:	4b01      	ldr	r3, [pc, #4]	; (8009420 <__errno+0x8>)
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20000100 	.word	0x20000100

08009424 <__libc_init_array>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	4d0d      	ldr	r5, [pc, #52]	; (800945c <__libc_init_array+0x38>)
 8009428:	4c0d      	ldr	r4, [pc, #52]	; (8009460 <__libc_init_array+0x3c>)
 800942a:	1b64      	subs	r4, r4, r5
 800942c:	10a4      	asrs	r4, r4, #2
 800942e:	2600      	movs	r6, #0
 8009430:	42a6      	cmp	r6, r4
 8009432:	d109      	bne.n	8009448 <__libc_init_array+0x24>
 8009434:	4d0b      	ldr	r5, [pc, #44]	; (8009464 <__libc_init_array+0x40>)
 8009436:	4c0c      	ldr	r4, [pc, #48]	; (8009468 <__libc_init_array+0x44>)
 8009438:	f002 fb9e 	bl	800bb78 <_init>
 800943c:	1b64      	subs	r4, r4, r5
 800943e:	10a4      	asrs	r4, r4, #2
 8009440:	2600      	movs	r6, #0
 8009442:	42a6      	cmp	r6, r4
 8009444:	d105      	bne.n	8009452 <__libc_init_array+0x2e>
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	f855 3b04 	ldr.w	r3, [r5], #4
 800944c:	4798      	blx	r3
 800944e:	3601      	adds	r6, #1
 8009450:	e7ee      	b.n	8009430 <__libc_init_array+0xc>
 8009452:	f855 3b04 	ldr.w	r3, [r5], #4
 8009456:	4798      	blx	r3
 8009458:	3601      	adds	r6, #1
 800945a:	e7f2      	b.n	8009442 <__libc_init_array+0x1e>
 800945c:	0800bee8 	.word	0x0800bee8
 8009460:	0800bee8 	.word	0x0800bee8
 8009464:	0800bee8 	.word	0x0800bee8
 8009468:	0800beec 	.word	0x0800beec

0800946c <memset>:
 800946c:	4402      	add	r2, r0
 800946e:	4603      	mov	r3, r0
 8009470:	4293      	cmp	r3, r2
 8009472:	d100      	bne.n	8009476 <memset+0xa>
 8009474:	4770      	bx	lr
 8009476:	f803 1b01 	strb.w	r1, [r3], #1
 800947a:	e7f9      	b.n	8009470 <memset+0x4>

0800947c <print_e>:
 800947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800947e:	b087      	sub	sp, #28
 8009480:	ec43 2b10 	vmov	d0, r2, r3
 8009484:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009486:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800948a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800948c:	ab04      	add	r3, sp, #16
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	ab03      	add	r3, sp, #12
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	1c62      	adds	r2, r4, #1
 8009496:	ab05      	add	r3, sp, #20
 8009498:	460f      	mov	r7, r1
 800949a:	2102      	movs	r1, #2
 800949c:	f000 fe38 	bl	800a110 <_dtoa_r>
 80094a0:	9a05      	ldr	r2, [sp, #20]
 80094a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d105      	bne.n	80094b6 <print_e+0x3a>
 80094aa:	4601      	mov	r1, r0
 80094ac:	4638      	mov	r0, r7
 80094ae:	f000 fd7b 	bl	8009fa8 <strcpy>
 80094b2:	b007      	add	sp, #28
 80094b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094b6:	463b      	mov	r3, r7
 80094b8:	7801      	ldrb	r1, [r0, #0]
 80094ba:	f803 1b01 	strb.w	r1, [r3], #1
 80094be:	2c00      	cmp	r4, #0
 80094c0:	bfc8      	it	gt
 80094c2:	2501      	movgt	r5, #1
 80094c4:	212e      	movs	r1, #46	; 0x2e
 80094c6:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 80094ca:	b10f      	cbz	r7, 80094d0 <print_e+0x54>
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	dc37      	bgt.n	8009540 <print_e+0xc4>
 80094d0:	2e67      	cmp	r6, #103	; 0x67
 80094d2:	d046      	beq.n	8009562 <print_e+0xe6>
 80094d4:	2e47      	cmp	r6, #71	; 0x47
 80094d6:	d046      	beq.n	8009566 <print_e+0xea>
 80094d8:	212e      	movs	r1, #46	; 0x2e
 80094da:	2030      	movs	r0, #48	; 0x30
 80094dc:	2c00      	cmp	r4, #0
 80094de:	dc38      	bgt.n	8009552 <print_e+0xd6>
 80094e0:	1e51      	subs	r1, r2, #1
 80094e2:	2900      	cmp	r1, #0
 80094e4:	bfb8      	it	lt
 80094e6:	f1c2 0201 	rsblt	r2, r2, #1
 80094ea:	4618      	mov	r0, r3
 80094ec:	9105      	str	r1, [sp, #20]
 80094ee:	bfac      	ite	ge
 80094f0:	222b      	movge	r2, #43	; 0x2b
 80094f2:	9205      	strlt	r2, [sp, #20]
 80094f4:	f800 6b02 	strb.w	r6, [r0], #2
 80094f8:	bfa8      	it	ge
 80094fa:	705a      	strbge	r2, [r3, #1]
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	bfbc      	itt	lt
 8009500:	212d      	movlt	r1, #45	; 0x2d
 8009502:	7059      	strblt	r1, [r3, #1]
 8009504:	2a63      	cmp	r2, #99	; 0x63
 8009506:	dd0b      	ble.n	8009520 <print_e+0xa4>
 8009508:	2164      	movs	r1, #100	; 0x64
 800950a:	fb92 f1f1 	sdiv	r1, r2, r1
 800950e:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8009512:	1cd8      	adds	r0, r3, #3
 8009514:	709c      	strb	r4, [r3, #2]
 8009516:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800951a:	fb03 2201 	mla	r2, r3, r1, r2
 800951e:	9205      	str	r2, [sp, #20]
 8009520:	9b05      	ldr	r3, [sp, #20]
 8009522:	220a      	movs	r2, #10
 8009524:	fb93 f2f2 	sdiv	r2, r3, r2
 8009528:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800952c:	7001      	strb	r1, [r0, #0]
 800952e:	f06f 0109 	mvn.w	r1, #9
 8009532:	fb01 3302 	mla	r3, r1, r2, r3
 8009536:	3330      	adds	r3, #48	; 0x30
 8009538:	7043      	strb	r3, [r0, #1]
 800953a:	2300      	movs	r3, #0
 800953c:	7083      	strb	r3, [r0, #2]
 800953e:	e7b8      	b.n	80094b2 <print_e+0x36>
 8009540:	b10d      	cbz	r5, 8009546 <print_e+0xca>
 8009542:	f803 1b01 	strb.w	r1, [r3], #1
 8009546:	7805      	ldrb	r5, [r0, #0]
 8009548:	f803 5b01 	strb.w	r5, [r3], #1
 800954c:	3c01      	subs	r4, #1
 800954e:	2500      	movs	r5, #0
 8009550:	e7b9      	b.n	80094c6 <print_e+0x4a>
 8009552:	b10d      	cbz	r5, 8009558 <print_e+0xdc>
 8009554:	f803 1b01 	strb.w	r1, [r3], #1
 8009558:	f803 0b01 	strb.w	r0, [r3], #1
 800955c:	3c01      	subs	r4, #1
 800955e:	2500      	movs	r5, #0
 8009560:	e7bc      	b.n	80094dc <print_e+0x60>
 8009562:	2665      	movs	r6, #101	; 0x65
 8009564:	e7bc      	b.n	80094e0 <print_e+0x64>
 8009566:	2645      	movs	r6, #69	; 0x45
 8009568:	e7ba      	b.n	80094e0 <print_e+0x64>
 800956a:	0000      	movs	r0, r0
 800956c:	0000      	movs	r0, r0
	...

08009570 <_gcvt>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	ec55 4b10 	vmov	r4, r5, d0
 8009578:	b088      	sub	sp, #32
 800957a:	4681      	mov	r9, r0
 800957c:	4688      	mov	r8, r1
 800957e:	4616      	mov	r6, r2
 8009580:	469a      	mov	sl, r3
 8009582:	ee10 0a10 	vmov	r0, s0
 8009586:	2200      	movs	r2, #0
 8009588:	2300      	movs	r3, #0
 800958a:	4629      	mov	r1, r5
 800958c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800958e:	f7f7 faad 	bl	8000aec <__aeabi_dcmplt>
 8009592:	b110      	cbz	r0, 800959a <_gcvt+0x2a>
 8009594:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009598:	461d      	mov	r5, r3
 800959a:	2200      	movs	r2, #0
 800959c:	2300      	movs	r3, #0
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f7 fa99 	bl	8000ad8 <__aeabi_dcmpeq>
 80095a6:	b138      	cbz	r0, 80095b8 <_gcvt+0x48>
 80095a8:	2330      	movs	r3, #48	; 0x30
 80095aa:	7033      	strb	r3, [r6, #0]
 80095ac:	2300      	movs	r3, #0
 80095ae:	7073      	strb	r3, [r6, #1]
 80095b0:	4630      	mov	r0, r6
 80095b2:	b008      	add	sp, #32
 80095b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b8:	a34b      	add	r3, pc, #300	; (adr r3, 80096e8 <_gcvt+0x178>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f7 fa9d 	bl	8000b00 <__aeabi_dcmple>
 80095c6:	b158      	cbz	r0, 80095e0 <_gcvt+0x70>
 80095c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80095cc:	9100      	str	r1, [sp, #0]
 80095ce:	e9cd a701 	strd	sl, r7, [sp, #4]
 80095d2:	4622      	mov	r2, r4
 80095d4:	462b      	mov	r3, r5
 80095d6:	4631      	mov	r1, r6
 80095d8:	4648      	mov	r0, r9
 80095da:	f7ff ff4f 	bl	800947c <print_e>
 80095de:	e7e7      	b.n	80095b0 <_gcvt+0x40>
 80095e0:	4640      	mov	r0, r8
 80095e2:	f000 fc09 	bl	8009df8 <_mprec_log10>
 80095e6:	4622      	mov	r2, r4
 80095e8:	ec51 0b10 	vmov	r0, r1, d0
 80095ec:	462b      	mov	r3, r5
 80095ee:	f7f7 fa87 	bl	8000b00 <__aeabi_dcmple>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d1e8      	bne.n	80095c8 <_gcvt+0x58>
 80095f6:	ab07      	add	r3, sp, #28
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	ab06      	add	r3, sp, #24
 80095fc:	9300      	str	r3, [sp, #0]
 80095fe:	4642      	mov	r2, r8
 8009600:	ab05      	add	r3, sp, #20
 8009602:	ec45 4b10 	vmov	d0, r4, r5
 8009606:	2102      	movs	r1, #2
 8009608:	4648      	mov	r0, r9
 800960a:	f000 fd81 	bl	800a110 <_dtoa_r>
 800960e:	9a05      	ldr	r2, [sp, #20]
 8009610:	f242 730f 	movw	r3, #9999	; 0x270f
 8009614:	429a      	cmp	r2, r3
 8009616:	d00e      	beq.n	8009636 <_gcvt+0xc6>
 8009618:	4633      	mov	r3, r6
 800961a:	44b0      	add	r8, r6
 800961c:	4605      	mov	r5, r0
 800961e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009622:	9c05      	ldr	r4, [sp, #20]
 8009624:	eba8 0203 	sub.w	r2, r8, r3
 8009628:	b109      	cbz	r1, 800962e <_gcvt+0xbe>
 800962a:	2c00      	cmp	r4, #0
 800962c:	dc08      	bgt.n	8009640 <_gcvt+0xd0>
 800962e:	2100      	movs	r1, #0
 8009630:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009634:	e00d      	b.n	8009652 <_gcvt+0xe2>
 8009636:	4601      	mov	r1, r0
 8009638:	4630      	mov	r0, r6
 800963a:	f000 fcb5 	bl	8009fa8 <strcpy>
 800963e:	e7b7      	b.n	80095b0 <_gcvt+0x40>
 8009640:	3c01      	subs	r4, #1
 8009642:	f803 1b01 	strb.w	r1, [r3], #1
 8009646:	9405      	str	r4, [sp, #20]
 8009648:	e7e8      	b.n	800961c <_gcvt+0xac>
 800964a:	f803 cb01 	strb.w	ip, [r3], #1
 800964e:	3a01      	subs	r2, #1
 8009650:	2101      	movs	r1, #1
 8009652:	2c00      	cmp	r4, #0
 8009654:	4620      	mov	r0, r4
 8009656:	dc2a      	bgt.n	80096ae <_gcvt+0x13e>
 8009658:	b101      	cbz	r1, 800965c <_gcvt+0xec>
 800965a:	9405      	str	r4, [sp, #20]
 800965c:	b90f      	cbnz	r7, 8009662 <_gcvt+0xf2>
 800965e:	7829      	ldrb	r1, [r5, #0]
 8009660:	b311      	cbz	r1, 80096a8 <_gcvt+0x138>
 8009662:	42b3      	cmp	r3, r6
 8009664:	bf04      	itt	eq
 8009666:	2130      	moveq	r1, #48	; 0x30
 8009668:	f803 1b01 	strbeq.w	r1, [r3], #1
 800966c:	212e      	movs	r1, #46	; 0x2e
 800966e:	7019      	strb	r1, [r3, #0]
 8009670:	9905      	ldr	r1, [sp, #20]
 8009672:	4618      	mov	r0, r3
 8009674:	2400      	movs	r4, #0
 8009676:	eba1 0c03 	sub.w	ip, r1, r3
 800967a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800967e:	eb1c 0f00 	cmn.w	ip, r0
 8009682:	d41c      	bmi.n	80096be <_gcvt+0x14e>
 8009684:	2900      	cmp	r1, #0
 8009686:	f1c1 0000 	rsb	r0, r1, #0
 800968a:	bfc8      	it	gt
 800968c:	2000      	movgt	r0, #0
 800968e:	f100 0c01 	add.w	ip, r0, #1
 8009692:	4463      	add	r3, ip
 8009694:	4401      	add	r1, r0
 8009696:	b104      	cbz	r4, 800969a <_gcvt+0x12a>
 8009698:	9105      	str	r1, [sp, #20]
 800969a:	1e69      	subs	r1, r5, #1
 800969c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096a0:	b108      	cbz	r0, 80096a6 <_gcvt+0x136>
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	dc0f      	bgt.n	80096c6 <_gcvt+0x156>
 80096a6:	b9df      	cbnz	r7, 80096e0 <_gcvt+0x170>
 80096a8:	2200      	movs	r2, #0
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	e780      	b.n	80095b0 <_gcvt+0x40>
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80096b4:	dcc9      	bgt.n	800964a <_gcvt+0xda>
 80096b6:	2900      	cmp	r1, #0
 80096b8:	d0d0      	beq.n	800965c <_gcvt+0xec>
 80096ba:	9005      	str	r0, [sp, #20]
 80096bc:	e7ce      	b.n	800965c <_gcvt+0xec>
 80096be:	f800 ef01 	strb.w	lr, [r0, #1]!
 80096c2:	2401      	movs	r4, #1
 80096c4:	e7db      	b.n	800967e <_gcvt+0x10e>
 80096c6:	f803 0b01 	strb.w	r0, [r3], #1
 80096ca:	3a01      	subs	r2, #1
 80096cc:	e7e6      	b.n	800969c <_gcvt+0x12c>
 80096ce:	f801 5b01 	strb.w	r5, [r1], #1
 80096d2:	1a60      	subs	r0, r4, r1
 80096d4:	2800      	cmp	r0, #0
 80096d6:	dcfa      	bgt.n	80096ce <_gcvt+0x15e>
 80096d8:	2a00      	cmp	r2, #0
 80096da:	bfa8      	it	ge
 80096dc:	189b      	addge	r3, r3, r2
 80096de:	e7e3      	b.n	80096a8 <_gcvt+0x138>
 80096e0:	4619      	mov	r1, r3
 80096e2:	189c      	adds	r4, r3, r2
 80096e4:	2530      	movs	r5, #48	; 0x30
 80096e6:	e7f4      	b.n	80096d2 <_gcvt+0x162>
 80096e8:	eb1c432d 	.word	0xeb1c432d
 80096ec:	3f1a36e2 	.word	0x3f1a36e2

080096f0 <_Balloc>:
 80096f0:	b570      	push	{r4, r5, r6, lr}
 80096f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096f4:	4604      	mov	r4, r0
 80096f6:	460d      	mov	r5, r1
 80096f8:	b976      	cbnz	r6, 8009718 <_Balloc+0x28>
 80096fa:	2010      	movs	r0, #16
 80096fc:	f001 fb08 	bl	800ad10 <malloc>
 8009700:	4602      	mov	r2, r0
 8009702:	6260      	str	r0, [r4, #36]	; 0x24
 8009704:	b920      	cbnz	r0, 8009710 <_Balloc+0x20>
 8009706:	4b18      	ldr	r3, [pc, #96]	; (8009768 <_Balloc+0x78>)
 8009708:	4818      	ldr	r0, [pc, #96]	; (800976c <_Balloc+0x7c>)
 800970a:	2166      	movs	r1, #102	; 0x66
 800970c:	f000 fc54 	bl	8009fb8 <__assert_func>
 8009710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009714:	6006      	str	r6, [r0, #0]
 8009716:	60c6      	str	r6, [r0, #12]
 8009718:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800971a:	68f3      	ldr	r3, [r6, #12]
 800971c:	b183      	cbz	r3, 8009740 <_Balloc+0x50>
 800971e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009726:	b9b8      	cbnz	r0, 8009758 <_Balloc+0x68>
 8009728:	2101      	movs	r1, #1
 800972a:	fa01 f605 	lsl.w	r6, r1, r5
 800972e:	1d72      	adds	r2, r6, #5
 8009730:	0092      	lsls	r2, r2, #2
 8009732:	4620      	mov	r0, r4
 8009734:	f000 fb7e 	bl	8009e34 <_calloc_r>
 8009738:	b160      	cbz	r0, 8009754 <_Balloc+0x64>
 800973a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800973e:	e00e      	b.n	800975e <_Balloc+0x6e>
 8009740:	2221      	movs	r2, #33	; 0x21
 8009742:	2104      	movs	r1, #4
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fb75 	bl	8009e34 <_calloc_r>
 800974a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800974c:	60f0      	str	r0, [r6, #12]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e4      	bne.n	800971e <_Balloc+0x2e>
 8009754:	2000      	movs	r0, #0
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	6802      	ldr	r2, [r0, #0]
 800975a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800975e:	2300      	movs	r3, #0
 8009760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009764:	e7f7      	b.n	8009756 <_Balloc+0x66>
 8009766:	bf00      	nop
 8009768:	0800bc24 	.word	0x0800bc24
 800976c:	0800bc3b 	.word	0x0800bc3b

08009770 <_Bfree>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b976      	cbnz	r6, 8009798 <_Bfree+0x28>
 800977a:	2010      	movs	r0, #16
 800977c:	f001 fac8 	bl	800ad10 <malloc>
 8009780:	4602      	mov	r2, r0
 8009782:	6268      	str	r0, [r5, #36]	; 0x24
 8009784:	b920      	cbnz	r0, 8009790 <_Bfree+0x20>
 8009786:	4b09      	ldr	r3, [pc, #36]	; (80097ac <_Bfree+0x3c>)
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <_Bfree+0x40>)
 800978a:	218a      	movs	r1, #138	; 0x8a
 800978c:	f000 fc14 	bl	8009fb8 <__assert_func>
 8009790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009794:	6006      	str	r6, [r0, #0]
 8009796:	60c6      	str	r6, [r0, #12]
 8009798:	b13c      	cbz	r4, 80097aa <_Bfree+0x3a>
 800979a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800979c:	6862      	ldr	r2, [r4, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097a4:	6021      	str	r1, [r4, #0]
 80097a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	0800bc24 	.word	0x0800bc24
 80097b0:	0800bc3b 	.word	0x0800bc3b

080097b4 <__multadd>:
 80097b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b8:	690d      	ldr	r5, [r1, #16]
 80097ba:	4607      	mov	r7, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	461e      	mov	r6, r3
 80097c0:	f101 0c14 	add.w	ip, r1, #20
 80097c4:	2000      	movs	r0, #0
 80097c6:	f8dc 3000 	ldr.w	r3, [ip]
 80097ca:	b299      	uxth	r1, r3
 80097cc:	fb02 6101 	mla	r1, r2, r1, r6
 80097d0:	0c1e      	lsrs	r6, r3, #16
 80097d2:	0c0b      	lsrs	r3, r1, #16
 80097d4:	fb02 3306 	mla	r3, r2, r6, r3
 80097d8:	b289      	uxth	r1, r1
 80097da:	3001      	adds	r0, #1
 80097dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097e0:	4285      	cmp	r5, r0
 80097e2:	f84c 1b04 	str.w	r1, [ip], #4
 80097e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097ea:	dcec      	bgt.n	80097c6 <__multadd+0x12>
 80097ec:	b30e      	cbz	r6, 8009832 <__multadd+0x7e>
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	42ab      	cmp	r3, r5
 80097f2:	dc19      	bgt.n	8009828 <__multadd+0x74>
 80097f4:	6861      	ldr	r1, [r4, #4]
 80097f6:	4638      	mov	r0, r7
 80097f8:	3101      	adds	r1, #1
 80097fa:	f7ff ff79 	bl	80096f0 <_Balloc>
 80097fe:	4680      	mov	r8, r0
 8009800:	b928      	cbnz	r0, 800980e <__multadd+0x5a>
 8009802:	4602      	mov	r2, r0
 8009804:	4b0c      	ldr	r3, [pc, #48]	; (8009838 <__multadd+0x84>)
 8009806:	480d      	ldr	r0, [pc, #52]	; (800983c <__multadd+0x88>)
 8009808:	21b5      	movs	r1, #181	; 0xb5
 800980a:	f000 fbd5 	bl	8009fb8 <__assert_func>
 800980e:	6922      	ldr	r2, [r4, #16]
 8009810:	3202      	adds	r2, #2
 8009812:	f104 010c 	add.w	r1, r4, #12
 8009816:	0092      	lsls	r2, r2, #2
 8009818:	300c      	adds	r0, #12
 800981a:	f001 fa81 	bl	800ad20 <memcpy>
 800981e:	4621      	mov	r1, r4
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff ffa5 	bl	8009770 <_Bfree>
 8009826:	4644      	mov	r4, r8
 8009828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800982c:	3501      	adds	r5, #1
 800982e:	615e      	str	r6, [r3, #20]
 8009830:	6125      	str	r5, [r4, #16]
 8009832:	4620      	mov	r0, r4
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	0800bc97 	.word	0x0800bc97
 800983c:	0800bc3b 	.word	0x0800bc3b

08009840 <__hi0bits>:
 8009840:	0c03      	lsrs	r3, r0, #16
 8009842:	041b      	lsls	r3, r3, #16
 8009844:	b9d3      	cbnz	r3, 800987c <__hi0bits+0x3c>
 8009846:	0400      	lsls	r0, r0, #16
 8009848:	2310      	movs	r3, #16
 800984a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800984e:	bf04      	itt	eq
 8009850:	0200      	lsleq	r0, r0, #8
 8009852:	3308      	addeq	r3, #8
 8009854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009858:	bf04      	itt	eq
 800985a:	0100      	lsleq	r0, r0, #4
 800985c:	3304      	addeq	r3, #4
 800985e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009862:	bf04      	itt	eq
 8009864:	0080      	lsleq	r0, r0, #2
 8009866:	3302      	addeq	r3, #2
 8009868:	2800      	cmp	r0, #0
 800986a:	db05      	blt.n	8009878 <__hi0bits+0x38>
 800986c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009870:	f103 0301 	add.w	r3, r3, #1
 8009874:	bf08      	it	eq
 8009876:	2320      	moveq	r3, #32
 8009878:	4618      	mov	r0, r3
 800987a:	4770      	bx	lr
 800987c:	2300      	movs	r3, #0
 800987e:	e7e4      	b.n	800984a <__hi0bits+0xa>

08009880 <__lo0bits>:
 8009880:	6803      	ldr	r3, [r0, #0]
 8009882:	f013 0207 	ands.w	r2, r3, #7
 8009886:	4601      	mov	r1, r0
 8009888:	d00b      	beq.n	80098a2 <__lo0bits+0x22>
 800988a:	07da      	lsls	r2, r3, #31
 800988c:	d423      	bmi.n	80098d6 <__lo0bits+0x56>
 800988e:	0798      	lsls	r0, r3, #30
 8009890:	bf49      	itett	mi
 8009892:	085b      	lsrmi	r3, r3, #1
 8009894:	089b      	lsrpl	r3, r3, #2
 8009896:	2001      	movmi	r0, #1
 8009898:	600b      	strmi	r3, [r1, #0]
 800989a:	bf5c      	itt	pl
 800989c:	600b      	strpl	r3, [r1, #0]
 800989e:	2002      	movpl	r0, #2
 80098a0:	4770      	bx	lr
 80098a2:	b298      	uxth	r0, r3
 80098a4:	b9a8      	cbnz	r0, 80098d2 <__lo0bits+0x52>
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	2010      	movs	r0, #16
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	b90a      	cbnz	r2, 80098b2 <__lo0bits+0x32>
 80098ae:	3008      	adds	r0, #8
 80098b0:	0a1b      	lsrs	r3, r3, #8
 80098b2:	071a      	lsls	r2, r3, #28
 80098b4:	bf04      	itt	eq
 80098b6:	091b      	lsreq	r3, r3, #4
 80098b8:	3004      	addeq	r0, #4
 80098ba:	079a      	lsls	r2, r3, #30
 80098bc:	bf04      	itt	eq
 80098be:	089b      	lsreq	r3, r3, #2
 80098c0:	3002      	addeq	r0, #2
 80098c2:	07da      	lsls	r2, r3, #31
 80098c4:	d403      	bmi.n	80098ce <__lo0bits+0x4e>
 80098c6:	085b      	lsrs	r3, r3, #1
 80098c8:	f100 0001 	add.w	r0, r0, #1
 80098cc:	d005      	beq.n	80098da <__lo0bits+0x5a>
 80098ce:	600b      	str	r3, [r1, #0]
 80098d0:	4770      	bx	lr
 80098d2:	4610      	mov	r0, r2
 80098d4:	e7e9      	b.n	80098aa <__lo0bits+0x2a>
 80098d6:	2000      	movs	r0, #0
 80098d8:	4770      	bx	lr
 80098da:	2020      	movs	r0, #32
 80098dc:	4770      	bx	lr
	...

080098e0 <__i2b>:
 80098e0:	b510      	push	{r4, lr}
 80098e2:	460c      	mov	r4, r1
 80098e4:	2101      	movs	r1, #1
 80098e6:	f7ff ff03 	bl	80096f0 <_Balloc>
 80098ea:	4602      	mov	r2, r0
 80098ec:	b928      	cbnz	r0, 80098fa <__i2b+0x1a>
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <__i2b+0x24>)
 80098f0:	4805      	ldr	r0, [pc, #20]	; (8009908 <__i2b+0x28>)
 80098f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098f6:	f000 fb5f 	bl	8009fb8 <__assert_func>
 80098fa:	2301      	movs	r3, #1
 80098fc:	6144      	str	r4, [r0, #20]
 80098fe:	6103      	str	r3, [r0, #16]
 8009900:	bd10      	pop	{r4, pc}
 8009902:	bf00      	nop
 8009904:	0800bc97 	.word	0x0800bc97
 8009908:	0800bc3b 	.word	0x0800bc3b

0800990c <__multiply>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	4691      	mov	r9, r2
 8009912:	690a      	ldr	r2, [r1, #16]
 8009914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009918:	429a      	cmp	r2, r3
 800991a:	bfb8      	it	lt
 800991c:	460b      	movlt	r3, r1
 800991e:	460c      	mov	r4, r1
 8009920:	bfbc      	itt	lt
 8009922:	464c      	movlt	r4, r9
 8009924:	4699      	movlt	r9, r3
 8009926:	6927      	ldr	r7, [r4, #16]
 8009928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800992c:	68a3      	ldr	r3, [r4, #8]
 800992e:	6861      	ldr	r1, [r4, #4]
 8009930:	eb07 060a 	add.w	r6, r7, sl
 8009934:	42b3      	cmp	r3, r6
 8009936:	b085      	sub	sp, #20
 8009938:	bfb8      	it	lt
 800993a:	3101      	addlt	r1, #1
 800993c:	f7ff fed8 	bl	80096f0 <_Balloc>
 8009940:	b930      	cbnz	r0, 8009950 <__multiply+0x44>
 8009942:	4602      	mov	r2, r0
 8009944:	4b44      	ldr	r3, [pc, #272]	; (8009a58 <__multiply+0x14c>)
 8009946:	4845      	ldr	r0, [pc, #276]	; (8009a5c <__multiply+0x150>)
 8009948:	f240 115d 	movw	r1, #349	; 0x15d
 800994c:	f000 fb34 	bl	8009fb8 <__assert_func>
 8009950:	f100 0514 	add.w	r5, r0, #20
 8009954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009958:	462b      	mov	r3, r5
 800995a:	2200      	movs	r2, #0
 800995c:	4543      	cmp	r3, r8
 800995e:	d321      	bcc.n	80099a4 <__multiply+0x98>
 8009960:	f104 0314 	add.w	r3, r4, #20
 8009964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009968:	f109 0314 	add.w	r3, r9, #20
 800996c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009970:	9202      	str	r2, [sp, #8]
 8009972:	1b3a      	subs	r2, r7, r4
 8009974:	3a15      	subs	r2, #21
 8009976:	f022 0203 	bic.w	r2, r2, #3
 800997a:	3204      	adds	r2, #4
 800997c:	f104 0115 	add.w	r1, r4, #21
 8009980:	428f      	cmp	r7, r1
 8009982:	bf38      	it	cc
 8009984:	2204      	movcc	r2, #4
 8009986:	9201      	str	r2, [sp, #4]
 8009988:	9a02      	ldr	r2, [sp, #8]
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	429a      	cmp	r2, r3
 800998e:	d80c      	bhi.n	80099aa <__multiply+0x9e>
 8009990:	2e00      	cmp	r6, #0
 8009992:	dd03      	ble.n	800999c <__multiply+0x90>
 8009994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009998:	2b00      	cmp	r3, #0
 800999a:	d05a      	beq.n	8009a52 <__multiply+0x146>
 800999c:	6106      	str	r6, [r0, #16]
 800999e:	b005      	add	sp, #20
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	f843 2b04 	str.w	r2, [r3], #4
 80099a8:	e7d8      	b.n	800995c <__multiply+0x50>
 80099aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80099ae:	f1ba 0f00 	cmp.w	sl, #0
 80099b2:	d024      	beq.n	80099fe <__multiply+0xf2>
 80099b4:	f104 0e14 	add.w	lr, r4, #20
 80099b8:	46a9      	mov	r9, r5
 80099ba:	f04f 0c00 	mov.w	ip, #0
 80099be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80099c2:	f8d9 1000 	ldr.w	r1, [r9]
 80099c6:	fa1f fb82 	uxth.w	fp, r2
 80099ca:	b289      	uxth	r1, r1
 80099cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80099d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80099d4:	f8d9 2000 	ldr.w	r2, [r9]
 80099d8:	4461      	add	r1, ip
 80099da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099de:	fb0a c20b 	mla	r2, sl, fp, ip
 80099e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099e6:	b289      	uxth	r1, r1
 80099e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099ec:	4577      	cmp	r7, lr
 80099ee:	f849 1b04 	str.w	r1, [r9], #4
 80099f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099f6:	d8e2      	bhi.n	80099be <__multiply+0xb2>
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	f845 c002 	str.w	ip, [r5, r2]
 80099fe:	9a03      	ldr	r2, [sp, #12]
 8009a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a04:	3304      	adds	r3, #4
 8009a06:	f1b9 0f00 	cmp.w	r9, #0
 8009a0a:	d020      	beq.n	8009a4e <__multiply+0x142>
 8009a0c:	6829      	ldr	r1, [r5, #0]
 8009a0e:	f104 0c14 	add.w	ip, r4, #20
 8009a12:	46ae      	mov	lr, r5
 8009a14:	f04f 0a00 	mov.w	sl, #0
 8009a18:	f8bc b000 	ldrh.w	fp, [ip]
 8009a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a20:	fb09 220b 	mla	r2, r9, fp, r2
 8009a24:	4492      	add	sl, r2
 8009a26:	b289      	uxth	r1, r1
 8009a28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009a34:	f8be 1000 	ldrh.w	r1, [lr]
 8009a38:	0c12      	lsrs	r2, r2, #16
 8009a3a:	fb09 1102 	mla	r1, r9, r2, r1
 8009a3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009a42:	4567      	cmp	r7, ip
 8009a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a48:	d8e6      	bhi.n	8009a18 <__multiply+0x10c>
 8009a4a:	9a01      	ldr	r2, [sp, #4]
 8009a4c:	50a9      	str	r1, [r5, r2]
 8009a4e:	3504      	adds	r5, #4
 8009a50:	e79a      	b.n	8009988 <__multiply+0x7c>
 8009a52:	3e01      	subs	r6, #1
 8009a54:	e79c      	b.n	8009990 <__multiply+0x84>
 8009a56:	bf00      	nop
 8009a58:	0800bc97 	.word	0x0800bc97
 8009a5c:	0800bc3b 	.word	0x0800bc3b

08009a60 <__pow5mult>:
 8009a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a64:	4615      	mov	r5, r2
 8009a66:	f012 0203 	ands.w	r2, r2, #3
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	d007      	beq.n	8009a80 <__pow5mult+0x20>
 8009a70:	4c25      	ldr	r4, [pc, #148]	; (8009b08 <__pow5mult+0xa8>)
 8009a72:	3a01      	subs	r2, #1
 8009a74:	2300      	movs	r3, #0
 8009a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a7a:	f7ff fe9b 	bl	80097b4 <__multadd>
 8009a7e:	4607      	mov	r7, r0
 8009a80:	10ad      	asrs	r5, r5, #2
 8009a82:	d03d      	beq.n	8009b00 <__pow5mult+0xa0>
 8009a84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a86:	b97c      	cbnz	r4, 8009aa8 <__pow5mult+0x48>
 8009a88:	2010      	movs	r0, #16
 8009a8a:	f001 f941 	bl	800ad10 <malloc>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	6270      	str	r0, [r6, #36]	; 0x24
 8009a92:	b928      	cbnz	r0, 8009aa0 <__pow5mult+0x40>
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <__pow5mult+0xac>)
 8009a96:	481e      	ldr	r0, [pc, #120]	; (8009b10 <__pow5mult+0xb0>)
 8009a98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a9c:	f000 fa8c 	bl	8009fb8 <__assert_func>
 8009aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aa4:	6004      	str	r4, [r0, #0]
 8009aa6:	60c4      	str	r4, [r0, #12]
 8009aa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ab0:	b94c      	cbnz	r4, 8009ac6 <__pow5mult+0x66>
 8009ab2:	f240 2171 	movw	r1, #625	; 0x271
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f7ff ff12 	bl	80098e0 <__i2b>
 8009abc:	2300      	movs	r3, #0
 8009abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	6003      	str	r3, [r0, #0]
 8009ac6:	f04f 0900 	mov.w	r9, #0
 8009aca:	07eb      	lsls	r3, r5, #31
 8009acc:	d50a      	bpl.n	8009ae4 <__pow5mult+0x84>
 8009ace:	4639      	mov	r1, r7
 8009ad0:	4622      	mov	r2, r4
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f7ff ff1a 	bl	800990c <__multiply>
 8009ad8:	4639      	mov	r1, r7
 8009ada:	4680      	mov	r8, r0
 8009adc:	4630      	mov	r0, r6
 8009ade:	f7ff fe47 	bl	8009770 <_Bfree>
 8009ae2:	4647      	mov	r7, r8
 8009ae4:	106d      	asrs	r5, r5, #1
 8009ae6:	d00b      	beq.n	8009b00 <__pow5mult+0xa0>
 8009ae8:	6820      	ldr	r0, [r4, #0]
 8009aea:	b938      	cbnz	r0, 8009afc <__pow5mult+0x9c>
 8009aec:	4622      	mov	r2, r4
 8009aee:	4621      	mov	r1, r4
 8009af0:	4630      	mov	r0, r6
 8009af2:	f7ff ff0b 	bl	800990c <__multiply>
 8009af6:	6020      	str	r0, [r4, #0]
 8009af8:	f8c0 9000 	str.w	r9, [r0]
 8009afc:	4604      	mov	r4, r0
 8009afe:	e7e4      	b.n	8009aca <__pow5mult+0x6a>
 8009b00:	4638      	mov	r0, r7
 8009b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b06:	bf00      	nop
 8009b08:	0800bd98 	.word	0x0800bd98
 8009b0c:	0800bc24 	.word	0x0800bc24
 8009b10:	0800bc3b 	.word	0x0800bc3b

08009b14 <__lshift>:
 8009b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b18:	460c      	mov	r4, r1
 8009b1a:	6849      	ldr	r1, [r1, #4]
 8009b1c:	6923      	ldr	r3, [r4, #16]
 8009b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b22:	68a3      	ldr	r3, [r4, #8]
 8009b24:	4607      	mov	r7, r0
 8009b26:	4691      	mov	r9, r2
 8009b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b2c:	f108 0601 	add.w	r6, r8, #1
 8009b30:	42b3      	cmp	r3, r6
 8009b32:	db0b      	blt.n	8009b4c <__lshift+0x38>
 8009b34:	4638      	mov	r0, r7
 8009b36:	f7ff fddb 	bl	80096f0 <_Balloc>
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	b948      	cbnz	r0, 8009b52 <__lshift+0x3e>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <__lshift+0xd8>)
 8009b42:	482b      	ldr	r0, [pc, #172]	; (8009bf0 <__lshift+0xdc>)
 8009b44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b48:	f000 fa36 	bl	8009fb8 <__assert_func>
 8009b4c:	3101      	adds	r1, #1
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	e7ee      	b.n	8009b30 <__lshift+0x1c>
 8009b52:	2300      	movs	r3, #0
 8009b54:	f100 0114 	add.w	r1, r0, #20
 8009b58:	f100 0210 	add.w	r2, r0, #16
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	4553      	cmp	r3, sl
 8009b60:	db37      	blt.n	8009bd2 <__lshift+0xbe>
 8009b62:	6920      	ldr	r0, [r4, #16]
 8009b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b68:	f104 0314 	add.w	r3, r4, #20
 8009b6c:	f019 091f 	ands.w	r9, r9, #31
 8009b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b78:	d02f      	beq.n	8009bda <__lshift+0xc6>
 8009b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b7e:	468a      	mov	sl, r1
 8009b80:	f04f 0c00 	mov.w	ip, #0
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	fa02 f209 	lsl.w	r2, r2, r9
 8009b8a:	ea42 020c 	orr.w	r2, r2, ip
 8009b8e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b96:	4298      	cmp	r0, r3
 8009b98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b9c:	d8f2      	bhi.n	8009b84 <__lshift+0x70>
 8009b9e:	1b03      	subs	r3, r0, r4
 8009ba0:	3b15      	subs	r3, #21
 8009ba2:	f023 0303 	bic.w	r3, r3, #3
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	f104 0215 	add.w	r2, r4, #21
 8009bac:	4290      	cmp	r0, r2
 8009bae:	bf38      	it	cc
 8009bb0:	2304      	movcc	r3, #4
 8009bb2:	f841 c003 	str.w	ip, [r1, r3]
 8009bb6:	f1bc 0f00 	cmp.w	ip, #0
 8009bba:	d001      	beq.n	8009bc0 <__lshift+0xac>
 8009bbc:	f108 0602 	add.w	r6, r8, #2
 8009bc0:	3e01      	subs	r6, #1
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	612e      	str	r6, [r5, #16]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f7ff fdd2 	bl	8009770 <_Bfree>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	e7c1      	b.n	8009b5e <__lshift+0x4a>
 8009bda:	3904      	subs	r1, #4
 8009bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009be4:	4298      	cmp	r0, r3
 8009be6:	d8f9      	bhi.n	8009bdc <__lshift+0xc8>
 8009be8:	e7ea      	b.n	8009bc0 <__lshift+0xac>
 8009bea:	bf00      	nop
 8009bec:	0800bc97 	.word	0x0800bc97
 8009bf0:	0800bc3b 	.word	0x0800bc3b

08009bf4 <__mcmp>:
 8009bf4:	b530      	push	{r4, r5, lr}
 8009bf6:	6902      	ldr	r2, [r0, #16]
 8009bf8:	690c      	ldr	r4, [r1, #16]
 8009bfa:	1b12      	subs	r2, r2, r4
 8009bfc:	d10e      	bne.n	8009c1c <__mcmp+0x28>
 8009bfe:	f100 0314 	add.w	r3, r0, #20
 8009c02:	3114      	adds	r1, #20
 8009c04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c14:	42a5      	cmp	r5, r4
 8009c16:	d003      	beq.n	8009c20 <__mcmp+0x2c>
 8009c18:	d305      	bcc.n	8009c26 <__mcmp+0x32>
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	bd30      	pop	{r4, r5, pc}
 8009c20:	4283      	cmp	r3, r0
 8009c22:	d3f3      	bcc.n	8009c0c <__mcmp+0x18>
 8009c24:	e7fa      	b.n	8009c1c <__mcmp+0x28>
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2a:	e7f7      	b.n	8009c1c <__mcmp+0x28>

08009c2c <__mdiff>:
 8009c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	460c      	mov	r4, r1
 8009c32:	4606      	mov	r6, r0
 8009c34:	4611      	mov	r1, r2
 8009c36:	4620      	mov	r0, r4
 8009c38:	4690      	mov	r8, r2
 8009c3a:	f7ff ffdb 	bl	8009bf4 <__mcmp>
 8009c3e:	1e05      	subs	r5, r0, #0
 8009c40:	d110      	bne.n	8009c64 <__mdiff+0x38>
 8009c42:	4629      	mov	r1, r5
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff fd53 	bl	80096f0 <_Balloc>
 8009c4a:	b930      	cbnz	r0, 8009c5a <__mdiff+0x2e>
 8009c4c:	4b3a      	ldr	r3, [pc, #232]	; (8009d38 <__mdiff+0x10c>)
 8009c4e:	4602      	mov	r2, r0
 8009c50:	f240 2132 	movw	r1, #562	; 0x232
 8009c54:	4839      	ldr	r0, [pc, #228]	; (8009d3c <__mdiff+0x110>)
 8009c56:	f000 f9af 	bl	8009fb8 <__assert_func>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	bfa4      	itt	ge
 8009c66:	4643      	movge	r3, r8
 8009c68:	46a0      	movge	r8, r4
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c70:	bfa6      	itte	ge
 8009c72:	461c      	movge	r4, r3
 8009c74:	2500      	movge	r5, #0
 8009c76:	2501      	movlt	r5, #1
 8009c78:	f7ff fd3a 	bl	80096f0 <_Balloc>
 8009c7c:	b920      	cbnz	r0, 8009c88 <__mdiff+0x5c>
 8009c7e:	4b2e      	ldr	r3, [pc, #184]	; (8009d38 <__mdiff+0x10c>)
 8009c80:	4602      	mov	r2, r0
 8009c82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c86:	e7e5      	b.n	8009c54 <__mdiff+0x28>
 8009c88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c8c:	6926      	ldr	r6, [r4, #16]
 8009c8e:	60c5      	str	r5, [r0, #12]
 8009c90:	f104 0914 	add.w	r9, r4, #20
 8009c94:	f108 0514 	add.w	r5, r8, #20
 8009c98:	f100 0e14 	add.w	lr, r0, #20
 8009c9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ca4:	f108 0210 	add.w	r2, r8, #16
 8009ca8:	46f2      	mov	sl, lr
 8009caa:	2100      	movs	r1, #0
 8009cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cb4:	fa1f f883 	uxth.w	r8, r3
 8009cb8:	fa11 f18b 	uxtah	r1, r1, fp
 8009cbc:	0c1b      	lsrs	r3, r3, #16
 8009cbe:	eba1 0808 	sub.w	r8, r1, r8
 8009cc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cca:	fa1f f888 	uxth.w	r8, r8
 8009cce:	1419      	asrs	r1, r3, #16
 8009cd0:	454e      	cmp	r6, r9
 8009cd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cd6:	f84a 3b04 	str.w	r3, [sl], #4
 8009cda:	d8e7      	bhi.n	8009cac <__mdiff+0x80>
 8009cdc:	1b33      	subs	r3, r6, r4
 8009cde:	3b15      	subs	r3, #21
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	3415      	adds	r4, #21
 8009ce8:	42a6      	cmp	r6, r4
 8009cea:	bf38      	it	cc
 8009cec:	2304      	movcc	r3, #4
 8009cee:	441d      	add	r5, r3
 8009cf0:	4473      	add	r3, lr
 8009cf2:	469e      	mov	lr, r3
 8009cf4:	462e      	mov	r6, r5
 8009cf6:	4566      	cmp	r6, ip
 8009cf8:	d30e      	bcc.n	8009d18 <__mdiff+0xec>
 8009cfa:	f10c 0203 	add.w	r2, ip, #3
 8009cfe:	1b52      	subs	r2, r2, r5
 8009d00:	f022 0203 	bic.w	r2, r2, #3
 8009d04:	3d03      	subs	r5, #3
 8009d06:	45ac      	cmp	ip, r5
 8009d08:	bf38      	it	cc
 8009d0a:	2200      	movcc	r2, #0
 8009d0c:	441a      	add	r2, r3
 8009d0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d12:	b17b      	cbz	r3, 8009d34 <__mdiff+0x108>
 8009d14:	6107      	str	r7, [r0, #16]
 8009d16:	e7a3      	b.n	8009c60 <__mdiff+0x34>
 8009d18:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d1c:	fa11 f288 	uxtah	r2, r1, r8
 8009d20:	1414      	asrs	r4, r2, #16
 8009d22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d26:	b292      	uxth	r2, r2
 8009d28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d2c:	f84e 2b04 	str.w	r2, [lr], #4
 8009d30:	1421      	asrs	r1, r4, #16
 8009d32:	e7e0      	b.n	8009cf6 <__mdiff+0xca>
 8009d34:	3f01      	subs	r7, #1
 8009d36:	e7ea      	b.n	8009d0e <__mdiff+0xe2>
 8009d38:	0800bc97 	.word	0x0800bc97
 8009d3c:	0800bc3b 	.word	0x0800bc3b

08009d40 <__d2b>:
 8009d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d44:	4689      	mov	r9, r1
 8009d46:	2101      	movs	r1, #1
 8009d48:	ec57 6b10 	vmov	r6, r7, d0
 8009d4c:	4690      	mov	r8, r2
 8009d4e:	f7ff fccf 	bl	80096f0 <_Balloc>
 8009d52:	4604      	mov	r4, r0
 8009d54:	b930      	cbnz	r0, 8009d64 <__d2b+0x24>
 8009d56:	4602      	mov	r2, r0
 8009d58:	4b25      	ldr	r3, [pc, #148]	; (8009df0 <__d2b+0xb0>)
 8009d5a:	4826      	ldr	r0, [pc, #152]	; (8009df4 <__d2b+0xb4>)
 8009d5c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d60:	f000 f92a 	bl	8009fb8 <__assert_func>
 8009d64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d6c:	bb35      	cbnz	r5, 8009dbc <__d2b+0x7c>
 8009d6e:	2e00      	cmp	r6, #0
 8009d70:	9301      	str	r3, [sp, #4]
 8009d72:	d028      	beq.n	8009dc6 <__d2b+0x86>
 8009d74:	4668      	mov	r0, sp
 8009d76:	9600      	str	r6, [sp, #0]
 8009d78:	f7ff fd82 	bl	8009880 <__lo0bits>
 8009d7c:	9900      	ldr	r1, [sp, #0]
 8009d7e:	b300      	cbz	r0, 8009dc2 <__d2b+0x82>
 8009d80:	9a01      	ldr	r2, [sp, #4]
 8009d82:	f1c0 0320 	rsb	r3, r0, #32
 8009d86:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	40c2      	lsrs	r2, r0
 8009d8e:	6163      	str	r3, [r4, #20]
 8009d90:	9201      	str	r2, [sp, #4]
 8009d92:	9b01      	ldr	r3, [sp, #4]
 8009d94:	61a3      	str	r3, [r4, #24]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bf14      	ite	ne
 8009d9a:	2202      	movne	r2, #2
 8009d9c:	2201      	moveq	r2, #1
 8009d9e:	6122      	str	r2, [r4, #16]
 8009da0:	b1d5      	cbz	r5, 8009dd8 <__d2b+0x98>
 8009da2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009da6:	4405      	add	r5, r0
 8009da8:	f8c9 5000 	str.w	r5, [r9]
 8009dac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009db0:	f8c8 0000 	str.w	r0, [r8]
 8009db4:	4620      	mov	r0, r4
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dc0:	e7d5      	b.n	8009d6e <__d2b+0x2e>
 8009dc2:	6161      	str	r1, [r4, #20]
 8009dc4:	e7e5      	b.n	8009d92 <__d2b+0x52>
 8009dc6:	a801      	add	r0, sp, #4
 8009dc8:	f7ff fd5a 	bl	8009880 <__lo0bits>
 8009dcc:	9b01      	ldr	r3, [sp, #4]
 8009dce:	6163      	str	r3, [r4, #20]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	6122      	str	r2, [r4, #16]
 8009dd4:	3020      	adds	r0, #32
 8009dd6:	e7e3      	b.n	8009da0 <__d2b+0x60>
 8009dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009de0:	f8c9 0000 	str.w	r0, [r9]
 8009de4:	6918      	ldr	r0, [r3, #16]
 8009de6:	f7ff fd2b 	bl	8009840 <__hi0bits>
 8009dea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dee:	e7df      	b.n	8009db0 <__d2b+0x70>
 8009df0:	0800bc97 	.word	0x0800bc97
 8009df4:	0800bc3b 	.word	0x0800bc3b

08009df8 <_mprec_log10>:
 8009df8:	2817      	cmp	r0, #23
 8009dfa:	b5d0      	push	{r4, r6, r7, lr}
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	dc07      	bgt.n	8009e10 <_mprec_log10+0x18>
 8009e00:	4809      	ldr	r0, [pc, #36]	; (8009e28 <_mprec_log10+0x30>)
 8009e02:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8009e06:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009e0a:	ec41 0b10 	vmov	d0, r0, r1
 8009e0e:	bdd0      	pop	{r4, r6, r7, pc}
 8009e10:	4906      	ldr	r1, [pc, #24]	; (8009e2c <_mprec_log10+0x34>)
 8009e12:	4f07      	ldr	r7, [pc, #28]	; (8009e30 <_mprec_log10+0x38>)
 8009e14:	2000      	movs	r0, #0
 8009e16:	2600      	movs	r6, #0
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	f7f6 fbf4 	bl	8000608 <__aeabi_dmul>
 8009e20:	3c01      	subs	r4, #1
 8009e22:	d1f9      	bne.n	8009e18 <_mprec_log10+0x20>
 8009e24:	e7f1      	b.n	8009e0a <_mprec_log10+0x12>
 8009e26:	bf00      	nop
 8009e28:	0800bcd0 	.word	0x0800bcd0
 8009e2c:	3ff00000 	.word	0x3ff00000
 8009e30:	40240000 	.word	0x40240000

08009e34 <_calloc_r>:
 8009e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e36:	fba1 2402 	umull	r2, r4, r1, r2
 8009e3a:	b94c      	cbnz	r4, 8009e50 <_calloc_r+0x1c>
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	9201      	str	r2, [sp, #4]
 8009e40:	f000 f82e 	bl	8009ea0 <_malloc_r>
 8009e44:	9a01      	ldr	r2, [sp, #4]
 8009e46:	4605      	mov	r5, r0
 8009e48:	b930      	cbnz	r0, 8009e58 <_calloc_r+0x24>
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	b003      	add	sp, #12
 8009e4e:	bd30      	pop	{r4, r5, pc}
 8009e50:	220c      	movs	r2, #12
 8009e52:	6002      	str	r2, [r0, #0]
 8009e54:	2500      	movs	r5, #0
 8009e56:	e7f8      	b.n	8009e4a <_calloc_r+0x16>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	f7ff fb07 	bl	800946c <memset>
 8009e5e:	e7f4      	b.n	8009e4a <_calloc_r+0x16>

08009e60 <sbrk_aligned>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	4e0e      	ldr	r6, [pc, #56]	; (8009e9c <sbrk_aligned+0x3c>)
 8009e64:	460c      	mov	r4, r1
 8009e66:	6831      	ldr	r1, [r6, #0]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	b911      	cbnz	r1, 8009e72 <sbrk_aligned+0x12>
 8009e6c:	f000 f88c 	bl	8009f88 <_sbrk_r>
 8009e70:	6030      	str	r0, [r6, #0]
 8009e72:	4621      	mov	r1, r4
 8009e74:	4628      	mov	r0, r5
 8009e76:	f000 f887 	bl	8009f88 <_sbrk_r>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	d00a      	beq.n	8009e94 <sbrk_aligned+0x34>
 8009e7e:	1cc4      	adds	r4, r0, #3
 8009e80:	f024 0403 	bic.w	r4, r4, #3
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	d007      	beq.n	8009e98 <sbrk_aligned+0x38>
 8009e88:	1a21      	subs	r1, r4, r0
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f87c 	bl	8009f88 <_sbrk_r>
 8009e90:	3001      	adds	r0, #1
 8009e92:	d101      	bne.n	8009e98 <sbrk_aligned+0x38>
 8009e94:	f04f 34ff 	mov.w	r4, #4294967295
 8009e98:	4620      	mov	r0, r4
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	20001740 	.word	0x20001740

08009ea0 <_malloc_r>:
 8009ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea4:	1ccd      	adds	r5, r1, #3
 8009ea6:	f025 0503 	bic.w	r5, r5, #3
 8009eaa:	3508      	adds	r5, #8
 8009eac:	2d0c      	cmp	r5, #12
 8009eae:	bf38      	it	cc
 8009eb0:	250c      	movcc	r5, #12
 8009eb2:	2d00      	cmp	r5, #0
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	db01      	blt.n	8009ebc <_malloc_r+0x1c>
 8009eb8:	42a9      	cmp	r1, r5
 8009eba:	d905      	bls.n	8009ec8 <_malloc_r+0x28>
 8009ebc:	230c      	movs	r3, #12
 8009ebe:	603b      	str	r3, [r7, #0]
 8009ec0:	2600      	movs	r6, #0
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec8:	4e2e      	ldr	r6, [pc, #184]	; (8009f84 <_malloc_r+0xe4>)
 8009eca:	f000 ff37 	bl	800ad3c <__malloc_lock>
 8009ece:	6833      	ldr	r3, [r6, #0]
 8009ed0:	461c      	mov	r4, r3
 8009ed2:	bb34      	cbnz	r4, 8009f22 <_malloc_r+0x82>
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f7ff ffc2 	bl	8009e60 <sbrk_aligned>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	4604      	mov	r4, r0
 8009ee0:	d14d      	bne.n	8009f7e <_malloc_r+0xde>
 8009ee2:	6834      	ldr	r4, [r6, #0]
 8009ee4:	4626      	mov	r6, r4
 8009ee6:	2e00      	cmp	r6, #0
 8009ee8:	d140      	bne.n	8009f6c <_malloc_r+0xcc>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	4631      	mov	r1, r6
 8009eee:	4638      	mov	r0, r7
 8009ef0:	eb04 0803 	add.w	r8, r4, r3
 8009ef4:	f000 f848 	bl	8009f88 <_sbrk_r>
 8009ef8:	4580      	cmp	r8, r0
 8009efa:	d13a      	bne.n	8009f72 <_malloc_r+0xd2>
 8009efc:	6821      	ldr	r1, [r4, #0]
 8009efe:	3503      	adds	r5, #3
 8009f00:	1a6d      	subs	r5, r5, r1
 8009f02:	f025 0503 	bic.w	r5, r5, #3
 8009f06:	3508      	adds	r5, #8
 8009f08:	2d0c      	cmp	r5, #12
 8009f0a:	bf38      	it	cc
 8009f0c:	250c      	movcc	r5, #12
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff ffa5 	bl	8009e60 <sbrk_aligned>
 8009f16:	3001      	adds	r0, #1
 8009f18:	d02b      	beq.n	8009f72 <_malloc_r+0xd2>
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	442b      	add	r3, r5
 8009f1e:	6023      	str	r3, [r4, #0]
 8009f20:	e00e      	b.n	8009f40 <_malloc_r+0xa0>
 8009f22:	6822      	ldr	r2, [r4, #0]
 8009f24:	1b52      	subs	r2, r2, r5
 8009f26:	d41e      	bmi.n	8009f66 <_malloc_r+0xc6>
 8009f28:	2a0b      	cmp	r2, #11
 8009f2a:	d916      	bls.n	8009f5a <_malloc_r+0xba>
 8009f2c:	1961      	adds	r1, r4, r5
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	6025      	str	r5, [r4, #0]
 8009f32:	bf18      	it	ne
 8009f34:	6059      	strne	r1, [r3, #4]
 8009f36:	6863      	ldr	r3, [r4, #4]
 8009f38:	bf08      	it	eq
 8009f3a:	6031      	streq	r1, [r6, #0]
 8009f3c:	5162      	str	r2, [r4, r5]
 8009f3e:	604b      	str	r3, [r1, #4]
 8009f40:	4638      	mov	r0, r7
 8009f42:	f104 060b 	add.w	r6, r4, #11
 8009f46:	f000 feff 	bl	800ad48 <__malloc_unlock>
 8009f4a:	f026 0607 	bic.w	r6, r6, #7
 8009f4e:	1d23      	adds	r3, r4, #4
 8009f50:	1af2      	subs	r2, r6, r3
 8009f52:	d0b6      	beq.n	8009ec2 <_malloc_r+0x22>
 8009f54:	1b9b      	subs	r3, r3, r6
 8009f56:	50a3      	str	r3, [r4, r2]
 8009f58:	e7b3      	b.n	8009ec2 <_malloc_r+0x22>
 8009f5a:	6862      	ldr	r2, [r4, #4]
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	bf0c      	ite	eq
 8009f60:	6032      	streq	r2, [r6, #0]
 8009f62:	605a      	strne	r2, [r3, #4]
 8009f64:	e7ec      	b.n	8009f40 <_malloc_r+0xa0>
 8009f66:	4623      	mov	r3, r4
 8009f68:	6864      	ldr	r4, [r4, #4]
 8009f6a:	e7b2      	b.n	8009ed2 <_malloc_r+0x32>
 8009f6c:	4634      	mov	r4, r6
 8009f6e:	6876      	ldr	r6, [r6, #4]
 8009f70:	e7b9      	b.n	8009ee6 <_malloc_r+0x46>
 8009f72:	230c      	movs	r3, #12
 8009f74:	603b      	str	r3, [r7, #0]
 8009f76:	4638      	mov	r0, r7
 8009f78:	f000 fee6 	bl	800ad48 <__malloc_unlock>
 8009f7c:	e7a1      	b.n	8009ec2 <_malloc_r+0x22>
 8009f7e:	6025      	str	r5, [r4, #0]
 8009f80:	e7de      	b.n	8009f40 <_malloc_r+0xa0>
 8009f82:	bf00      	nop
 8009f84:	2000173c 	.word	0x2000173c

08009f88 <_sbrk_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d06      	ldr	r5, [pc, #24]	; (8009fa4 <_sbrk_r+0x1c>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	602b      	str	r3, [r5, #0]
 8009f94:	f7f7 fc6a 	bl	800186c <_sbrk>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_sbrk_r+0x1a>
 8009f9c:	682b      	ldr	r3, [r5, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_sbrk_r+0x1a>
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	20001744 	.word	0x20001744

08009fa8 <strcpy>:
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fae:	f803 2b01 	strb.w	r2, [r3], #1
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d1f9      	bne.n	8009faa <strcpy+0x2>
 8009fb6:	4770      	bx	lr

08009fb8 <__assert_func>:
 8009fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fba:	4614      	mov	r4, r2
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	4b09      	ldr	r3, [pc, #36]	; (8009fe4 <__assert_func+0x2c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	68d8      	ldr	r0, [r3, #12]
 8009fc6:	b14c      	cbz	r4, 8009fdc <__assert_func+0x24>
 8009fc8:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <__assert_func+0x30>)
 8009fca:	9100      	str	r1, [sp, #0]
 8009fcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fd0:	4906      	ldr	r1, [pc, #24]	; (8009fec <__assert_func+0x34>)
 8009fd2:	462b      	mov	r3, r5
 8009fd4:	f000 fe8a 	bl	800acec <fiprintf>
 8009fd8:	f001 fab6 	bl	800b548 <abort>
 8009fdc:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <__assert_func+0x38>)
 8009fde:	461c      	mov	r4, r3
 8009fe0:	e7f3      	b.n	8009fca <__assert_func+0x12>
 8009fe2:	bf00      	nop
 8009fe4:	20000100 	.word	0x20000100
 8009fe8:	0800bda4 	.word	0x0800bda4
 8009fec:	0800bdb1 	.word	0x0800bdb1
 8009ff0:	0800bddf 	.word	0x0800bddf

08009ff4 <quorem>:
 8009ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	6903      	ldr	r3, [r0, #16]
 8009ffa:	690c      	ldr	r4, [r1, #16]
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	4607      	mov	r7, r0
 800a000:	f2c0 8081 	blt.w	800a106 <quorem+0x112>
 800a004:	3c01      	subs	r4, #1
 800a006:	f101 0814 	add.w	r8, r1, #20
 800a00a:	f100 0514 	add.w	r5, r0, #20
 800a00e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a018:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a01c:	3301      	adds	r3, #1
 800a01e:	429a      	cmp	r2, r3
 800a020:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a024:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a028:	fbb2 f6f3 	udiv	r6, r2, r3
 800a02c:	d331      	bcc.n	800a092 <quorem+0x9e>
 800a02e:	f04f 0e00 	mov.w	lr, #0
 800a032:	4640      	mov	r0, r8
 800a034:	46ac      	mov	ip, r5
 800a036:	46f2      	mov	sl, lr
 800a038:	f850 2b04 	ldr.w	r2, [r0], #4
 800a03c:	b293      	uxth	r3, r2
 800a03e:	fb06 e303 	mla	r3, r6, r3, lr
 800a042:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a046:	b29b      	uxth	r3, r3
 800a048:	ebaa 0303 	sub.w	r3, sl, r3
 800a04c:	f8dc a000 	ldr.w	sl, [ip]
 800a050:	0c12      	lsrs	r2, r2, #16
 800a052:	fa13 f38a 	uxtah	r3, r3, sl
 800a056:	fb06 e202 	mla	r2, r6, r2, lr
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	9b00      	ldr	r3, [sp, #0]
 800a05e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a062:	b292      	uxth	r2, r2
 800a064:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a06c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a070:	4581      	cmp	r9, r0
 800a072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a076:	f84c 3b04 	str.w	r3, [ip], #4
 800a07a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a07e:	d2db      	bcs.n	800a038 <quorem+0x44>
 800a080:	f855 300b 	ldr.w	r3, [r5, fp]
 800a084:	b92b      	cbnz	r3, 800a092 <quorem+0x9e>
 800a086:	9b01      	ldr	r3, [sp, #4]
 800a088:	3b04      	subs	r3, #4
 800a08a:	429d      	cmp	r5, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	d32e      	bcc.n	800a0ee <quorem+0xfa>
 800a090:	613c      	str	r4, [r7, #16]
 800a092:	4638      	mov	r0, r7
 800a094:	f7ff fdae 	bl	8009bf4 <__mcmp>
 800a098:	2800      	cmp	r0, #0
 800a09a:	db24      	blt.n	800a0e6 <quorem+0xf2>
 800a09c:	3601      	adds	r6, #1
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0a8:	f8d0 e000 	ldr.w	lr, [r0]
 800a0ac:	b293      	uxth	r3, r2
 800a0ae:	ebac 0303 	sub.w	r3, ip, r3
 800a0b2:	0c12      	lsrs	r2, r2, #16
 800a0b4:	fa13 f38e 	uxtah	r3, r3, lr
 800a0b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c6:	45c1      	cmp	r9, r8
 800a0c8:	f840 3b04 	str.w	r3, [r0], #4
 800a0cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0d0:	d2e8      	bcs.n	800a0a4 <quorem+0xb0>
 800a0d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0da:	b922      	cbnz	r2, 800a0e6 <quorem+0xf2>
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	d30a      	bcc.n	800a0fa <quorem+0x106>
 800a0e4:	613c      	str	r4, [r7, #16]
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	b003      	add	sp, #12
 800a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	d1cc      	bne.n	800a090 <quorem+0x9c>
 800a0f6:	3c01      	subs	r4, #1
 800a0f8:	e7c7      	b.n	800a08a <quorem+0x96>
 800a0fa:	6812      	ldr	r2, [r2, #0]
 800a0fc:	3b04      	subs	r3, #4
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	d1f0      	bne.n	800a0e4 <quorem+0xf0>
 800a102:	3c01      	subs	r4, #1
 800a104:	e7eb      	b.n	800a0de <quorem+0xea>
 800a106:	2000      	movs	r0, #0
 800a108:	e7ee      	b.n	800a0e8 <quorem+0xf4>
 800a10a:	0000      	movs	r0, r0
 800a10c:	0000      	movs	r0, r0
	...

0800a110 <_dtoa_r>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	ed2d 8b04 	vpush	{d8-d9}
 800a118:	ec57 6b10 	vmov	r6, r7, d0
 800a11c:	b093      	sub	sp, #76	; 0x4c
 800a11e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a120:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a124:	9106      	str	r1, [sp, #24]
 800a126:	ee10 aa10 	vmov	sl, s0
 800a12a:	4604      	mov	r4, r0
 800a12c:	9209      	str	r2, [sp, #36]	; 0x24
 800a12e:	930c      	str	r3, [sp, #48]	; 0x30
 800a130:	46bb      	mov	fp, r7
 800a132:	b975      	cbnz	r5, 800a152 <_dtoa_r+0x42>
 800a134:	2010      	movs	r0, #16
 800a136:	f000 fdeb 	bl	800ad10 <malloc>
 800a13a:	4602      	mov	r2, r0
 800a13c:	6260      	str	r0, [r4, #36]	; 0x24
 800a13e:	b920      	cbnz	r0, 800a14a <_dtoa_r+0x3a>
 800a140:	4ba7      	ldr	r3, [pc, #668]	; (800a3e0 <_dtoa_r+0x2d0>)
 800a142:	21ea      	movs	r1, #234	; 0xea
 800a144:	48a7      	ldr	r0, [pc, #668]	; (800a3e4 <_dtoa_r+0x2d4>)
 800a146:	f7ff ff37 	bl	8009fb8 <__assert_func>
 800a14a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a14e:	6005      	str	r5, [r0, #0]
 800a150:	60c5      	str	r5, [r0, #12]
 800a152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	b151      	cbz	r1, 800a16e <_dtoa_r+0x5e>
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	604a      	str	r2, [r1, #4]
 800a15c:	2301      	movs	r3, #1
 800a15e:	4093      	lsls	r3, r2
 800a160:	608b      	str	r3, [r1, #8]
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff fb04 	bl	8009770 <_Bfree>
 800a168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a16a:	2200      	movs	r2, #0
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	1e3b      	subs	r3, r7, #0
 800a170:	bfaa      	itet	ge
 800a172:	2300      	movge	r3, #0
 800a174:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a178:	f8c8 3000 	strge.w	r3, [r8]
 800a17c:	4b9a      	ldr	r3, [pc, #616]	; (800a3e8 <_dtoa_r+0x2d8>)
 800a17e:	bfbc      	itt	lt
 800a180:	2201      	movlt	r2, #1
 800a182:	f8c8 2000 	strlt.w	r2, [r8]
 800a186:	ea33 030b 	bics.w	r3, r3, fp
 800a18a:	d11b      	bne.n	800a1c4 <_dtoa_r+0xb4>
 800a18c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a18e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a198:	4333      	orrs	r3, r6
 800a19a:	f000 8592 	beq.w	800acc2 <_dtoa_r+0xbb2>
 800a19e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1a0:	b963      	cbnz	r3, 800a1bc <_dtoa_r+0xac>
 800a1a2:	4b92      	ldr	r3, [pc, #584]	; (800a3ec <_dtoa_r+0x2dc>)
 800a1a4:	e022      	b.n	800a1ec <_dtoa_r+0xdc>
 800a1a6:	4b92      	ldr	r3, [pc, #584]	; (800a3f0 <_dtoa_r+0x2e0>)
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	9801      	ldr	r0, [sp, #4]
 800a1b2:	b013      	add	sp, #76	; 0x4c
 800a1b4:	ecbd 8b04 	vpop	{d8-d9}
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	4b8b      	ldr	r3, [pc, #556]	; (800a3ec <_dtoa_r+0x2dc>)
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	3303      	adds	r3, #3
 800a1c2:	e7f3      	b.n	800a1ac <_dtoa_r+0x9c>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	4659      	mov	r1, fp
 800a1cc:	f7f6 fc84 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1d0:	ec4b ab19 	vmov	d9, sl, fp
 800a1d4:	4680      	mov	r8, r0
 800a1d6:	b158      	cbz	r0, 800a1f0 <_dtoa_r+0xe0>
 800a1d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1da:	2301      	movs	r3, #1
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	f000 856b 	beq.w	800acbc <_dtoa_r+0xbac>
 800a1e6:	4883      	ldr	r0, [pc, #524]	; (800a3f4 <_dtoa_r+0x2e4>)
 800a1e8:	6018      	str	r0, [r3, #0]
 800a1ea:	1e43      	subs	r3, r0, #1
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	e7df      	b.n	800a1b0 <_dtoa_r+0xa0>
 800a1f0:	ec4b ab10 	vmov	d0, sl, fp
 800a1f4:	aa10      	add	r2, sp, #64	; 0x40
 800a1f6:	a911      	add	r1, sp, #68	; 0x44
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7ff fda1 	bl	8009d40 <__d2b>
 800a1fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a202:	ee08 0a10 	vmov	s16, r0
 800a206:	2d00      	cmp	r5, #0
 800a208:	f000 8084 	beq.w	800a314 <_dtoa_r+0x204>
 800a20c:	ee19 3a90 	vmov	r3, s19
 800a210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a214:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a218:	4656      	mov	r6, sl
 800a21a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a21e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a222:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a226:	4b74      	ldr	r3, [pc, #464]	; (800a3f8 <_dtoa_r+0x2e8>)
 800a228:	2200      	movs	r2, #0
 800a22a:	4630      	mov	r0, r6
 800a22c:	4639      	mov	r1, r7
 800a22e:	f7f6 f833 	bl	8000298 <__aeabi_dsub>
 800a232:	a365      	add	r3, pc, #404	; (adr r3, 800a3c8 <_dtoa_r+0x2b8>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f7f6 f9e6 	bl	8000608 <__aeabi_dmul>
 800a23c:	a364      	add	r3, pc, #400	; (adr r3, 800a3d0 <_dtoa_r+0x2c0>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f7f6 f82b 	bl	800029c <__adddf3>
 800a246:	4606      	mov	r6, r0
 800a248:	4628      	mov	r0, r5
 800a24a:	460f      	mov	r7, r1
 800a24c:	f7f6 f972 	bl	8000534 <__aeabi_i2d>
 800a250:	a361      	add	r3, pc, #388	; (adr r3, 800a3d8 <_dtoa_r+0x2c8>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f6 f9d7 	bl	8000608 <__aeabi_dmul>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4630      	mov	r0, r6
 800a260:	4639      	mov	r1, r7
 800a262:	f7f6 f81b 	bl	800029c <__adddf3>
 800a266:	4606      	mov	r6, r0
 800a268:	460f      	mov	r7, r1
 800a26a:	f7f6 fc67 	bl	8000b3c <__aeabi_d2iz>
 800a26e:	2200      	movs	r2, #0
 800a270:	9000      	str	r0, [sp, #0]
 800a272:	2300      	movs	r3, #0
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	f7f6 fc38 	bl	8000aec <__aeabi_dcmplt>
 800a27c:	b150      	cbz	r0, 800a294 <_dtoa_r+0x184>
 800a27e:	9800      	ldr	r0, [sp, #0]
 800a280:	f7f6 f958 	bl	8000534 <__aeabi_i2d>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	f7f6 fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800a28c:	b910      	cbnz	r0, 800a294 <_dtoa_r+0x184>
 800a28e:	9b00      	ldr	r3, [sp, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	9b00      	ldr	r3, [sp, #0]
 800a296:	2b16      	cmp	r3, #22
 800a298:	d85a      	bhi.n	800a350 <_dtoa_r+0x240>
 800a29a:	9a00      	ldr	r2, [sp, #0]
 800a29c:	4b57      	ldr	r3, [pc, #348]	; (800a3fc <_dtoa_r+0x2ec>)
 800a29e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	ec51 0b19 	vmov	r0, r1, d9
 800a2aa:	f7f6 fc1f 	bl	8000aec <__aeabi_dcmplt>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d050      	beq.n	800a354 <_dtoa_r+0x244>
 800a2b2:	9b00      	ldr	r3, [sp, #0]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2be:	1b5d      	subs	r5, r3, r5
 800a2c0:	1e6b      	subs	r3, r5, #1
 800a2c2:	9305      	str	r3, [sp, #20]
 800a2c4:	bf45      	ittet	mi
 800a2c6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2ca:	9304      	strmi	r3, [sp, #16]
 800a2cc:	2300      	movpl	r3, #0
 800a2ce:	2300      	movmi	r3, #0
 800a2d0:	bf4c      	ite	mi
 800a2d2:	9305      	strmi	r3, [sp, #20]
 800a2d4:	9304      	strpl	r3, [sp, #16]
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	db3d      	blt.n	800a358 <_dtoa_r+0x248>
 800a2dc:	9b05      	ldr	r3, [sp, #20]
 800a2de:	9a00      	ldr	r2, [sp, #0]
 800a2e0:	920a      	str	r2, [sp, #40]	; 0x28
 800a2e2:	4413      	add	r3, r2
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	9307      	str	r3, [sp, #28]
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	2b09      	cmp	r3, #9
 800a2ee:	f200 8089 	bhi.w	800a404 <_dtoa_r+0x2f4>
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	bfc4      	itt	gt
 800a2f6:	3b04      	subgt	r3, #4
 800a2f8:	9306      	strgt	r3, [sp, #24]
 800a2fa:	9b06      	ldr	r3, [sp, #24]
 800a2fc:	f1a3 0302 	sub.w	r3, r3, #2
 800a300:	bfcc      	ite	gt
 800a302:	2500      	movgt	r5, #0
 800a304:	2501      	movle	r5, #1
 800a306:	2b03      	cmp	r3, #3
 800a308:	f200 8087 	bhi.w	800a41a <_dtoa_r+0x30a>
 800a30c:	e8df f003 	tbb	[pc, r3]
 800a310:	59383a2d 	.word	0x59383a2d
 800a314:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a318:	441d      	add	r5, r3
 800a31a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a31e:	2b20      	cmp	r3, #32
 800a320:	bfc1      	itttt	gt
 800a322:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a326:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a32a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a32e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a332:	bfda      	itte	le
 800a334:	f1c3 0320 	rsble	r3, r3, #32
 800a338:	fa06 f003 	lslle.w	r0, r6, r3
 800a33c:	4318      	orrgt	r0, r3
 800a33e:	f7f6 f8e9 	bl	8000514 <__aeabi_ui2d>
 800a342:	2301      	movs	r3, #1
 800a344:	4606      	mov	r6, r0
 800a346:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a34a:	3d01      	subs	r5, #1
 800a34c:	930e      	str	r3, [sp, #56]	; 0x38
 800a34e:	e76a      	b.n	800a226 <_dtoa_r+0x116>
 800a350:	2301      	movs	r3, #1
 800a352:	e7b2      	b.n	800a2ba <_dtoa_r+0x1aa>
 800a354:	900b      	str	r0, [sp, #44]	; 0x2c
 800a356:	e7b1      	b.n	800a2bc <_dtoa_r+0x1ac>
 800a358:	9b04      	ldr	r3, [sp, #16]
 800a35a:	9a00      	ldr	r2, [sp, #0]
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	4253      	negs	r3, r2
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	2300      	movs	r3, #0
 800a366:	930a      	str	r3, [sp, #40]	; 0x28
 800a368:	e7bf      	b.n	800a2ea <_dtoa_r+0x1da>
 800a36a:	2300      	movs	r3, #0
 800a36c:	9308      	str	r3, [sp, #32]
 800a36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	dc55      	bgt.n	800a420 <_dtoa_r+0x310>
 800a374:	2301      	movs	r3, #1
 800a376:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a37a:	461a      	mov	r2, r3
 800a37c:	9209      	str	r2, [sp, #36]	; 0x24
 800a37e:	e00c      	b.n	800a39a <_dtoa_r+0x28a>
 800a380:	2301      	movs	r3, #1
 800a382:	e7f3      	b.n	800a36c <_dtoa_r+0x25c>
 800a384:	2300      	movs	r3, #0
 800a386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a388:	9308      	str	r3, [sp, #32]
 800a38a:	9b00      	ldr	r3, [sp, #0]
 800a38c:	4413      	add	r3, r2
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	3301      	adds	r3, #1
 800a392:	2b01      	cmp	r3, #1
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	bfb8      	it	lt
 800a398:	2301      	movlt	r3, #1
 800a39a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a39c:	2200      	movs	r2, #0
 800a39e:	6042      	str	r2, [r0, #4]
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	f102 0614 	add.w	r6, r2, #20
 800a3a6:	429e      	cmp	r6, r3
 800a3a8:	6841      	ldr	r1, [r0, #4]
 800a3aa:	d93d      	bls.n	800a428 <_dtoa_r+0x318>
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f7ff f99f 	bl	80096f0 <_Balloc>
 800a3b2:	9001      	str	r0, [sp, #4]
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d13b      	bne.n	800a430 <_dtoa_r+0x320>
 800a3b8:	4b11      	ldr	r3, [pc, #68]	; (800a400 <_dtoa_r+0x2f0>)
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3c0:	e6c0      	b.n	800a144 <_dtoa_r+0x34>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7df      	b.n	800a386 <_dtoa_r+0x276>
 800a3c6:	bf00      	nop
 800a3c8:	636f4361 	.word	0x636f4361
 800a3cc:	3fd287a7 	.word	0x3fd287a7
 800a3d0:	8b60c8b3 	.word	0x8b60c8b3
 800a3d4:	3fc68a28 	.word	0x3fc68a28
 800a3d8:	509f79fb 	.word	0x509f79fb
 800a3dc:	3fd34413 	.word	0x3fd34413
 800a3e0:	0800bc24 	.word	0x0800bc24
 800a3e4:	0800bdef 	.word	0x0800bdef
 800a3e8:	7ff00000 	.word	0x7ff00000
 800a3ec:	0800bde9 	.word	0x0800bde9
 800a3f0:	0800bde0 	.word	0x0800bde0
 800a3f4:	0800bdee 	.word	0x0800bdee
 800a3f8:	3ff80000 	.word	0x3ff80000
 800a3fc:	0800bcd0 	.word	0x0800bcd0
 800a400:	0800bc97 	.word	0x0800bc97
 800a404:	2501      	movs	r5, #1
 800a406:	2300      	movs	r3, #0
 800a408:	9306      	str	r3, [sp, #24]
 800a40a:	9508      	str	r5, [sp, #32]
 800a40c:	f04f 33ff 	mov.w	r3, #4294967295
 800a410:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a414:	2200      	movs	r2, #0
 800a416:	2312      	movs	r3, #18
 800a418:	e7b0      	b.n	800a37c <_dtoa_r+0x26c>
 800a41a:	2301      	movs	r3, #1
 800a41c:	9308      	str	r3, [sp, #32]
 800a41e:	e7f5      	b.n	800a40c <_dtoa_r+0x2fc>
 800a420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a422:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a426:	e7b8      	b.n	800a39a <_dtoa_r+0x28a>
 800a428:	3101      	adds	r1, #1
 800a42a:	6041      	str	r1, [r0, #4]
 800a42c:	0052      	lsls	r2, r2, #1
 800a42e:	e7b8      	b.n	800a3a2 <_dtoa_r+0x292>
 800a430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a432:	9a01      	ldr	r2, [sp, #4]
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	9b03      	ldr	r3, [sp, #12]
 800a438:	2b0e      	cmp	r3, #14
 800a43a:	f200 809d 	bhi.w	800a578 <_dtoa_r+0x468>
 800a43e:	2d00      	cmp	r5, #0
 800a440:	f000 809a 	beq.w	800a578 <_dtoa_r+0x468>
 800a444:	9b00      	ldr	r3, [sp, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	dd32      	ble.n	800a4b0 <_dtoa_r+0x3a0>
 800a44a:	4ab7      	ldr	r2, [pc, #732]	; (800a728 <_dtoa_r+0x618>)
 800a44c:	f003 030f 	and.w	r3, r3, #15
 800a450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a454:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a458:	9b00      	ldr	r3, [sp, #0]
 800a45a:	05d8      	lsls	r0, r3, #23
 800a45c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a460:	d516      	bpl.n	800a490 <_dtoa_r+0x380>
 800a462:	4bb2      	ldr	r3, [pc, #712]	; (800a72c <_dtoa_r+0x61c>)
 800a464:	ec51 0b19 	vmov	r0, r1, d9
 800a468:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a46c:	f7f6 f9f6 	bl	800085c <__aeabi_ddiv>
 800a470:	f007 070f 	and.w	r7, r7, #15
 800a474:	4682      	mov	sl, r0
 800a476:	468b      	mov	fp, r1
 800a478:	2503      	movs	r5, #3
 800a47a:	4eac      	ldr	r6, [pc, #688]	; (800a72c <_dtoa_r+0x61c>)
 800a47c:	b957      	cbnz	r7, 800a494 <_dtoa_r+0x384>
 800a47e:	4642      	mov	r2, r8
 800a480:	464b      	mov	r3, r9
 800a482:	4650      	mov	r0, sl
 800a484:	4659      	mov	r1, fp
 800a486:	f7f6 f9e9 	bl	800085c <__aeabi_ddiv>
 800a48a:	4682      	mov	sl, r0
 800a48c:	468b      	mov	fp, r1
 800a48e:	e028      	b.n	800a4e2 <_dtoa_r+0x3d2>
 800a490:	2502      	movs	r5, #2
 800a492:	e7f2      	b.n	800a47a <_dtoa_r+0x36a>
 800a494:	07f9      	lsls	r1, r7, #31
 800a496:	d508      	bpl.n	800a4aa <_dtoa_r+0x39a>
 800a498:	4640      	mov	r0, r8
 800a49a:	4649      	mov	r1, r9
 800a49c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4a0:	f7f6 f8b2 	bl	8000608 <__aeabi_dmul>
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	4689      	mov	r9, r1
 800a4aa:	107f      	asrs	r7, r7, #1
 800a4ac:	3608      	adds	r6, #8
 800a4ae:	e7e5      	b.n	800a47c <_dtoa_r+0x36c>
 800a4b0:	f000 809b 	beq.w	800a5ea <_dtoa_r+0x4da>
 800a4b4:	9b00      	ldr	r3, [sp, #0]
 800a4b6:	4f9d      	ldr	r7, [pc, #628]	; (800a72c <_dtoa_r+0x61c>)
 800a4b8:	425e      	negs	r6, r3
 800a4ba:	4b9b      	ldr	r3, [pc, #620]	; (800a728 <_dtoa_r+0x618>)
 800a4bc:	f006 020f 	and.w	r2, r6, #15
 800a4c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	ec51 0b19 	vmov	r0, r1, d9
 800a4cc:	f7f6 f89c 	bl	8000608 <__aeabi_dmul>
 800a4d0:	1136      	asrs	r6, r6, #4
 800a4d2:	4682      	mov	sl, r0
 800a4d4:	468b      	mov	fp, r1
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2502      	movs	r5, #2
 800a4da:	2e00      	cmp	r6, #0
 800a4dc:	d17a      	bne.n	800a5d4 <_dtoa_r+0x4c4>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1d3      	bne.n	800a48a <_dtoa_r+0x37a>
 800a4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 8082 	beq.w	800a5ee <_dtoa_r+0x4de>
 800a4ea:	4b91      	ldr	r3, [pc, #580]	; (800a730 <_dtoa_r+0x620>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	4659      	mov	r1, fp
 800a4f2:	f7f6 fafb 	bl	8000aec <__aeabi_dcmplt>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d079      	beq.n	800a5ee <_dtoa_r+0x4de>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d076      	beq.n	800a5ee <_dtoa_r+0x4de>
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	dd36      	ble.n	800a574 <_dtoa_r+0x464>
 800a506:	9b00      	ldr	r3, [sp, #0]
 800a508:	4650      	mov	r0, sl
 800a50a:	4659      	mov	r1, fp
 800a50c:	1e5f      	subs	r7, r3, #1
 800a50e:	2200      	movs	r2, #0
 800a510:	4b88      	ldr	r3, [pc, #544]	; (800a734 <_dtoa_r+0x624>)
 800a512:	f7f6 f879 	bl	8000608 <__aeabi_dmul>
 800a516:	9e02      	ldr	r6, [sp, #8]
 800a518:	4682      	mov	sl, r0
 800a51a:	468b      	mov	fp, r1
 800a51c:	3501      	adds	r5, #1
 800a51e:	4628      	mov	r0, r5
 800a520:	f7f6 f808 	bl	8000534 <__aeabi_i2d>
 800a524:	4652      	mov	r2, sl
 800a526:	465b      	mov	r3, fp
 800a528:	f7f6 f86e 	bl	8000608 <__aeabi_dmul>
 800a52c:	4b82      	ldr	r3, [pc, #520]	; (800a738 <_dtoa_r+0x628>)
 800a52e:	2200      	movs	r2, #0
 800a530:	f7f5 feb4 	bl	800029c <__adddf3>
 800a534:	46d0      	mov	r8, sl
 800a536:	46d9      	mov	r9, fp
 800a538:	4682      	mov	sl, r0
 800a53a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a53e:	2e00      	cmp	r6, #0
 800a540:	d158      	bne.n	800a5f4 <_dtoa_r+0x4e4>
 800a542:	4b7e      	ldr	r3, [pc, #504]	; (800a73c <_dtoa_r+0x62c>)
 800a544:	2200      	movs	r2, #0
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	f7f5 fea5 	bl	8000298 <__aeabi_dsub>
 800a54e:	4652      	mov	r2, sl
 800a550:	465b      	mov	r3, fp
 800a552:	4680      	mov	r8, r0
 800a554:	4689      	mov	r9, r1
 800a556:	f7f6 fae7 	bl	8000b28 <__aeabi_dcmpgt>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f040 8295 	bne.w	800aa8a <_dtoa_r+0x97a>
 800a560:	4652      	mov	r2, sl
 800a562:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a566:	4640      	mov	r0, r8
 800a568:	4649      	mov	r1, r9
 800a56a:	f7f6 fabf 	bl	8000aec <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	f040 8289 	bne.w	800aa86 <_dtoa_r+0x976>
 800a574:	ec5b ab19 	vmov	sl, fp, d9
 800a578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f2c0 8148 	blt.w	800a810 <_dtoa_r+0x700>
 800a580:	9a00      	ldr	r2, [sp, #0]
 800a582:	2a0e      	cmp	r2, #14
 800a584:	f300 8144 	bgt.w	800a810 <_dtoa_r+0x700>
 800a588:	4b67      	ldr	r3, [pc, #412]	; (800a728 <_dtoa_r+0x618>)
 800a58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a58e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	f280 80d5 	bge.w	800a744 <_dtoa_r+0x634>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f300 80d1 	bgt.w	800a744 <_dtoa_r+0x634>
 800a5a2:	f040 826f 	bne.w	800aa84 <_dtoa_r+0x974>
 800a5a6:	4b65      	ldr	r3, [pc, #404]	; (800a73c <_dtoa_r+0x62c>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	f7f6 f82b 	bl	8000608 <__aeabi_dmul>
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	f7f6 faad 	bl	8000b14 <__aeabi_dcmpge>
 800a5ba:	9e03      	ldr	r6, [sp, #12]
 800a5bc:	4637      	mov	r7, r6
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f040 8245 	bne.w	800aa4e <_dtoa_r+0x93e>
 800a5c4:	9d01      	ldr	r5, [sp, #4]
 800a5c6:	2331      	movs	r3, #49	; 0x31
 800a5c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a5cc:	9b00      	ldr	r3, [sp, #0]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	e240      	b.n	800aa56 <_dtoa_r+0x946>
 800a5d4:	07f2      	lsls	r2, r6, #31
 800a5d6:	d505      	bpl.n	800a5e4 <_dtoa_r+0x4d4>
 800a5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5dc:	f7f6 f814 	bl	8000608 <__aeabi_dmul>
 800a5e0:	3501      	adds	r5, #1
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	1076      	asrs	r6, r6, #1
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	e777      	b.n	800a4da <_dtoa_r+0x3ca>
 800a5ea:	2502      	movs	r5, #2
 800a5ec:	e779      	b.n	800a4e2 <_dtoa_r+0x3d2>
 800a5ee:	9f00      	ldr	r7, [sp, #0]
 800a5f0:	9e03      	ldr	r6, [sp, #12]
 800a5f2:	e794      	b.n	800a51e <_dtoa_r+0x40e>
 800a5f4:	9901      	ldr	r1, [sp, #4]
 800a5f6:	4b4c      	ldr	r3, [pc, #304]	; (800a728 <_dtoa_r+0x618>)
 800a5f8:	4431      	add	r1, r6
 800a5fa:	910d      	str	r1, [sp, #52]	; 0x34
 800a5fc:	9908      	ldr	r1, [sp, #32]
 800a5fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a602:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a606:	2900      	cmp	r1, #0
 800a608:	d043      	beq.n	800a692 <_dtoa_r+0x582>
 800a60a:	494d      	ldr	r1, [pc, #308]	; (800a740 <_dtoa_r+0x630>)
 800a60c:	2000      	movs	r0, #0
 800a60e:	f7f6 f925 	bl	800085c <__aeabi_ddiv>
 800a612:	4652      	mov	r2, sl
 800a614:	465b      	mov	r3, fp
 800a616:	f7f5 fe3f 	bl	8000298 <__aeabi_dsub>
 800a61a:	9d01      	ldr	r5, [sp, #4]
 800a61c:	4682      	mov	sl, r0
 800a61e:	468b      	mov	fp, r1
 800a620:	4649      	mov	r1, r9
 800a622:	4640      	mov	r0, r8
 800a624:	f7f6 fa8a 	bl	8000b3c <__aeabi_d2iz>
 800a628:	4606      	mov	r6, r0
 800a62a:	f7f5 ff83 	bl	8000534 <__aeabi_i2d>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4640      	mov	r0, r8
 800a634:	4649      	mov	r1, r9
 800a636:	f7f5 fe2f 	bl	8000298 <__aeabi_dsub>
 800a63a:	3630      	adds	r6, #48	; 0x30
 800a63c:	f805 6b01 	strb.w	r6, [r5], #1
 800a640:	4652      	mov	r2, sl
 800a642:	465b      	mov	r3, fp
 800a644:	4680      	mov	r8, r0
 800a646:	4689      	mov	r9, r1
 800a648:	f7f6 fa50 	bl	8000aec <__aeabi_dcmplt>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d163      	bne.n	800a718 <_dtoa_r+0x608>
 800a650:	4642      	mov	r2, r8
 800a652:	464b      	mov	r3, r9
 800a654:	4936      	ldr	r1, [pc, #216]	; (800a730 <_dtoa_r+0x620>)
 800a656:	2000      	movs	r0, #0
 800a658:	f7f5 fe1e 	bl	8000298 <__aeabi_dsub>
 800a65c:	4652      	mov	r2, sl
 800a65e:	465b      	mov	r3, fp
 800a660:	f7f6 fa44 	bl	8000aec <__aeabi_dcmplt>
 800a664:	2800      	cmp	r0, #0
 800a666:	f040 80b5 	bne.w	800a7d4 <_dtoa_r+0x6c4>
 800a66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a66c:	429d      	cmp	r5, r3
 800a66e:	d081      	beq.n	800a574 <_dtoa_r+0x464>
 800a670:	4b30      	ldr	r3, [pc, #192]	; (800a734 <_dtoa_r+0x624>)
 800a672:	2200      	movs	r2, #0
 800a674:	4650      	mov	r0, sl
 800a676:	4659      	mov	r1, fp
 800a678:	f7f5 ffc6 	bl	8000608 <__aeabi_dmul>
 800a67c:	4b2d      	ldr	r3, [pc, #180]	; (800a734 <_dtoa_r+0x624>)
 800a67e:	4682      	mov	sl, r0
 800a680:	468b      	mov	fp, r1
 800a682:	4640      	mov	r0, r8
 800a684:	4649      	mov	r1, r9
 800a686:	2200      	movs	r2, #0
 800a688:	f7f5 ffbe 	bl	8000608 <__aeabi_dmul>
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	e7c6      	b.n	800a620 <_dtoa_r+0x510>
 800a692:	4650      	mov	r0, sl
 800a694:	4659      	mov	r1, fp
 800a696:	f7f5 ffb7 	bl	8000608 <__aeabi_dmul>
 800a69a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a69c:	9d01      	ldr	r5, [sp, #4]
 800a69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	468b      	mov	fp, r1
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f7f6 fa48 	bl	8000b3c <__aeabi_d2iz>
 800a6ac:	4606      	mov	r6, r0
 800a6ae:	f7f5 ff41 	bl	8000534 <__aeabi_i2d>
 800a6b2:	3630      	adds	r6, #48	; 0x30
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f7f5 fdec 	bl	8000298 <__aeabi_dsub>
 800a6c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c6:	429d      	cmp	r5, r3
 800a6c8:	4680      	mov	r8, r0
 800a6ca:	4689      	mov	r9, r1
 800a6cc:	f04f 0200 	mov.w	r2, #0
 800a6d0:	d124      	bne.n	800a71c <_dtoa_r+0x60c>
 800a6d2:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <_dtoa_r+0x630>)
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	4659      	mov	r1, fp
 800a6d8:	f7f5 fde0 	bl	800029c <__adddf3>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	f7f6 fa20 	bl	8000b28 <__aeabi_dcmpgt>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d173      	bne.n	800a7d4 <_dtoa_r+0x6c4>
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	465b      	mov	r3, fp
 800a6f0:	4913      	ldr	r1, [pc, #76]	; (800a740 <_dtoa_r+0x630>)
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	4649      	mov	r1, r9
 800a700:	f7f6 f9f4 	bl	8000aec <__aeabi_dcmplt>
 800a704:	2800      	cmp	r0, #0
 800a706:	f43f af35 	beq.w	800a574 <_dtoa_r+0x464>
 800a70a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a70c:	1e6b      	subs	r3, r5, #1
 800a70e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a710:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a714:	2b30      	cmp	r3, #48	; 0x30
 800a716:	d0f8      	beq.n	800a70a <_dtoa_r+0x5fa>
 800a718:	9700      	str	r7, [sp, #0]
 800a71a:	e049      	b.n	800a7b0 <_dtoa_r+0x6a0>
 800a71c:	4b05      	ldr	r3, [pc, #20]	; (800a734 <_dtoa_r+0x624>)
 800a71e:	f7f5 ff73 	bl	8000608 <__aeabi_dmul>
 800a722:	4680      	mov	r8, r0
 800a724:	4689      	mov	r9, r1
 800a726:	e7bd      	b.n	800a6a4 <_dtoa_r+0x594>
 800a728:	0800bcd0 	.word	0x0800bcd0
 800a72c:	0800bca8 	.word	0x0800bca8
 800a730:	3ff00000 	.word	0x3ff00000
 800a734:	40240000 	.word	0x40240000
 800a738:	401c0000 	.word	0x401c0000
 800a73c:	40140000 	.word	0x40140000
 800a740:	3fe00000 	.word	0x3fe00000
 800a744:	9d01      	ldr	r5, [sp, #4]
 800a746:	4656      	mov	r6, sl
 800a748:	465f      	mov	r7, fp
 800a74a:	4642      	mov	r2, r8
 800a74c:	464b      	mov	r3, r9
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f6 f883 	bl	800085c <__aeabi_ddiv>
 800a756:	f7f6 f9f1 	bl	8000b3c <__aeabi_d2iz>
 800a75a:	4682      	mov	sl, r0
 800a75c:	f7f5 feea 	bl	8000534 <__aeabi_i2d>
 800a760:	4642      	mov	r2, r8
 800a762:	464b      	mov	r3, r9
 800a764:	f7f5 ff50 	bl	8000608 <__aeabi_dmul>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4630      	mov	r0, r6
 800a76e:	4639      	mov	r1, r7
 800a770:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a774:	f7f5 fd90 	bl	8000298 <__aeabi_dsub>
 800a778:	f805 6b01 	strb.w	r6, [r5], #1
 800a77c:	9e01      	ldr	r6, [sp, #4]
 800a77e:	9f03      	ldr	r7, [sp, #12]
 800a780:	1bae      	subs	r6, r5, r6
 800a782:	42b7      	cmp	r7, r6
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	d135      	bne.n	800a7f6 <_dtoa_r+0x6e6>
 800a78a:	f7f5 fd87 	bl	800029c <__adddf3>
 800a78e:	4642      	mov	r2, r8
 800a790:	464b      	mov	r3, r9
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	f7f6 f9c7 	bl	8000b28 <__aeabi_dcmpgt>
 800a79a:	b9d0      	cbnz	r0, 800a7d2 <_dtoa_r+0x6c2>
 800a79c:	4642      	mov	r2, r8
 800a79e:	464b      	mov	r3, r9
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f7f6 f998 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7a8:	b110      	cbz	r0, 800a7b0 <_dtoa_r+0x6a0>
 800a7aa:	f01a 0f01 	tst.w	sl, #1
 800a7ae:	d110      	bne.n	800a7d2 <_dtoa_r+0x6c2>
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	ee18 1a10 	vmov	r1, s16
 800a7b6:	f7fe ffdb 	bl	8009770 <_Bfree>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9800      	ldr	r0, [sp, #0]
 800a7be:	702b      	strb	r3, [r5, #0]
 800a7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	6018      	str	r0, [r3, #0]
 800a7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f43f acf1 	beq.w	800a1b0 <_dtoa_r+0xa0>
 800a7ce:	601d      	str	r5, [r3, #0]
 800a7d0:	e4ee      	b.n	800a1b0 <_dtoa_r+0xa0>
 800a7d2:	9f00      	ldr	r7, [sp, #0]
 800a7d4:	462b      	mov	r3, r5
 800a7d6:	461d      	mov	r5, r3
 800a7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7dc:	2a39      	cmp	r2, #57	; 0x39
 800a7de:	d106      	bne.n	800a7ee <_dtoa_r+0x6de>
 800a7e0:	9a01      	ldr	r2, [sp, #4]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d1f7      	bne.n	800a7d6 <_dtoa_r+0x6c6>
 800a7e6:	9901      	ldr	r1, [sp, #4]
 800a7e8:	2230      	movs	r2, #48	; 0x30
 800a7ea:	3701      	adds	r7, #1
 800a7ec:	700a      	strb	r2, [r1, #0]
 800a7ee:	781a      	ldrb	r2, [r3, #0]
 800a7f0:	3201      	adds	r2, #1
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	e790      	b.n	800a718 <_dtoa_r+0x608>
 800a7f6:	4ba6      	ldr	r3, [pc, #664]	; (800aa90 <_dtoa_r+0x980>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 ff05 	bl	8000608 <__aeabi_dmul>
 800a7fe:	2200      	movs	r2, #0
 800a800:	2300      	movs	r3, #0
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	f7f6 f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d09d      	beq.n	800a74a <_dtoa_r+0x63a>
 800a80e:	e7cf      	b.n	800a7b0 <_dtoa_r+0x6a0>
 800a810:	9a08      	ldr	r2, [sp, #32]
 800a812:	2a00      	cmp	r2, #0
 800a814:	f000 80d7 	beq.w	800a9c6 <_dtoa_r+0x8b6>
 800a818:	9a06      	ldr	r2, [sp, #24]
 800a81a:	2a01      	cmp	r2, #1
 800a81c:	f300 80ba 	bgt.w	800a994 <_dtoa_r+0x884>
 800a820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a822:	2a00      	cmp	r2, #0
 800a824:	f000 80b2 	beq.w	800a98c <_dtoa_r+0x87c>
 800a828:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a82c:	9e07      	ldr	r6, [sp, #28]
 800a82e:	9d04      	ldr	r5, [sp, #16]
 800a830:	9a04      	ldr	r2, [sp, #16]
 800a832:	441a      	add	r2, r3
 800a834:	9204      	str	r2, [sp, #16]
 800a836:	9a05      	ldr	r2, [sp, #20]
 800a838:	2101      	movs	r1, #1
 800a83a:	441a      	add	r2, r3
 800a83c:	4620      	mov	r0, r4
 800a83e:	9205      	str	r2, [sp, #20]
 800a840:	f7ff f84e 	bl	80098e0 <__i2b>
 800a844:	4607      	mov	r7, r0
 800a846:	2d00      	cmp	r5, #0
 800a848:	dd0c      	ble.n	800a864 <_dtoa_r+0x754>
 800a84a:	9b05      	ldr	r3, [sp, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dd09      	ble.n	800a864 <_dtoa_r+0x754>
 800a850:	42ab      	cmp	r3, r5
 800a852:	9a04      	ldr	r2, [sp, #16]
 800a854:	bfa8      	it	ge
 800a856:	462b      	movge	r3, r5
 800a858:	1ad2      	subs	r2, r2, r3
 800a85a:	9204      	str	r2, [sp, #16]
 800a85c:	9a05      	ldr	r2, [sp, #20]
 800a85e:	1aed      	subs	r5, r5, r3
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	9b07      	ldr	r3, [sp, #28]
 800a866:	b31b      	cbz	r3, 800a8b0 <_dtoa_r+0x7a0>
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 80af 	beq.w	800a9ce <_dtoa_r+0x8be>
 800a870:	2e00      	cmp	r6, #0
 800a872:	dd13      	ble.n	800a89c <_dtoa_r+0x78c>
 800a874:	4639      	mov	r1, r7
 800a876:	4632      	mov	r2, r6
 800a878:	4620      	mov	r0, r4
 800a87a:	f7ff f8f1 	bl	8009a60 <__pow5mult>
 800a87e:	ee18 2a10 	vmov	r2, s16
 800a882:	4601      	mov	r1, r0
 800a884:	4607      	mov	r7, r0
 800a886:	4620      	mov	r0, r4
 800a888:	f7ff f840 	bl	800990c <__multiply>
 800a88c:	ee18 1a10 	vmov	r1, s16
 800a890:	4680      	mov	r8, r0
 800a892:	4620      	mov	r0, r4
 800a894:	f7fe ff6c 	bl	8009770 <_Bfree>
 800a898:	ee08 8a10 	vmov	s16, r8
 800a89c:	9b07      	ldr	r3, [sp, #28]
 800a89e:	1b9a      	subs	r2, r3, r6
 800a8a0:	d006      	beq.n	800a8b0 <_dtoa_r+0x7a0>
 800a8a2:	ee18 1a10 	vmov	r1, s16
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff f8da 	bl	8009a60 <__pow5mult>
 800a8ac:	ee08 0a10 	vmov	s16, r0
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff f814 	bl	80098e0 <__i2b>
 800a8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	4606      	mov	r6, r0
 800a8be:	f340 8088 	ble.w	800a9d2 <_dtoa_r+0x8c2>
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f7ff f8ca 	bl	8009a60 <__pow5mult>
 800a8cc:	9b06      	ldr	r3, [sp, #24]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	f340 8081 	ble.w	800a9d8 <_dtoa_r+0x8c8>
 800a8d6:	f04f 0800 	mov.w	r8, #0
 800a8da:	6933      	ldr	r3, [r6, #16]
 800a8dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8e0:	6918      	ldr	r0, [r3, #16]
 800a8e2:	f7fe ffad 	bl	8009840 <__hi0bits>
 800a8e6:	f1c0 0020 	rsb	r0, r0, #32
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	4418      	add	r0, r3
 800a8ee:	f010 001f 	ands.w	r0, r0, #31
 800a8f2:	f000 8092 	beq.w	800aa1a <_dtoa_r+0x90a>
 800a8f6:	f1c0 0320 	rsb	r3, r0, #32
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	f340 808a 	ble.w	800aa14 <_dtoa_r+0x904>
 800a900:	f1c0 001c 	rsb	r0, r0, #28
 800a904:	9b04      	ldr	r3, [sp, #16]
 800a906:	4403      	add	r3, r0
 800a908:	9304      	str	r3, [sp, #16]
 800a90a:	9b05      	ldr	r3, [sp, #20]
 800a90c:	4403      	add	r3, r0
 800a90e:	4405      	add	r5, r0
 800a910:	9305      	str	r3, [sp, #20]
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd07      	ble.n	800a928 <_dtoa_r+0x818>
 800a918:	ee18 1a10 	vmov	r1, s16
 800a91c:	461a      	mov	r2, r3
 800a91e:	4620      	mov	r0, r4
 800a920:	f7ff f8f8 	bl	8009b14 <__lshift>
 800a924:	ee08 0a10 	vmov	s16, r0
 800a928:	9b05      	ldr	r3, [sp, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	dd05      	ble.n	800a93a <_dtoa_r+0x82a>
 800a92e:	4631      	mov	r1, r6
 800a930:	461a      	mov	r2, r3
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff f8ee 	bl	8009b14 <__lshift>
 800a938:	4606      	mov	r6, r0
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d06e      	beq.n	800aa1e <_dtoa_r+0x90e>
 800a940:	ee18 0a10 	vmov	r0, s16
 800a944:	4631      	mov	r1, r6
 800a946:	f7ff f955 	bl	8009bf4 <__mcmp>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	da67      	bge.n	800aa1e <_dtoa_r+0x90e>
 800a94e:	9b00      	ldr	r3, [sp, #0]
 800a950:	3b01      	subs	r3, #1
 800a952:	ee18 1a10 	vmov	r1, s16
 800a956:	9300      	str	r3, [sp, #0]
 800a958:	220a      	movs	r2, #10
 800a95a:	2300      	movs	r3, #0
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7fe ff29 	bl	80097b4 <__multadd>
 800a962:	9b08      	ldr	r3, [sp, #32]
 800a964:	ee08 0a10 	vmov	s16, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 81b1 	beq.w	800acd0 <_dtoa_r+0xbc0>
 800a96e:	2300      	movs	r3, #0
 800a970:	4639      	mov	r1, r7
 800a972:	220a      	movs	r2, #10
 800a974:	4620      	mov	r0, r4
 800a976:	f7fe ff1d 	bl	80097b4 <__multadd>
 800a97a:	9b02      	ldr	r3, [sp, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	4607      	mov	r7, r0
 800a980:	f300 808e 	bgt.w	800aaa0 <_dtoa_r+0x990>
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	2b02      	cmp	r3, #2
 800a988:	dc51      	bgt.n	800aa2e <_dtoa_r+0x91e>
 800a98a:	e089      	b.n	800aaa0 <_dtoa_r+0x990>
 800a98c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a98e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a992:	e74b      	b.n	800a82c <_dtoa_r+0x71c>
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	1e5e      	subs	r6, r3, #1
 800a998:	9b07      	ldr	r3, [sp, #28]
 800a99a:	42b3      	cmp	r3, r6
 800a99c:	bfbf      	itttt	lt
 800a99e:	9b07      	ldrlt	r3, [sp, #28]
 800a9a0:	9607      	strlt	r6, [sp, #28]
 800a9a2:	1af2      	sublt	r2, r6, r3
 800a9a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9a6:	bfb6      	itet	lt
 800a9a8:	189b      	addlt	r3, r3, r2
 800a9aa:	1b9e      	subge	r6, r3, r6
 800a9ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	bfb8      	it	lt
 800a9b2:	2600      	movlt	r6, #0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfb7      	itett	lt
 800a9b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a9bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a9c0:	1a9d      	sublt	r5, r3, r2
 800a9c2:	2300      	movlt	r3, #0
 800a9c4:	e734      	b.n	800a830 <_dtoa_r+0x720>
 800a9c6:	9e07      	ldr	r6, [sp, #28]
 800a9c8:	9d04      	ldr	r5, [sp, #16]
 800a9ca:	9f08      	ldr	r7, [sp, #32]
 800a9cc:	e73b      	b.n	800a846 <_dtoa_r+0x736>
 800a9ce:	9a07      	ldr	r2, [sp, #28]
 800a9d0:	e767      	b.n	800a8a2 <_dtoa_r+0x792>
 800a9d2:	9b06      	ldr	r3, [sp, #24]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	dc18      	bgt.n	800aa0a <_dtoa_r+0x8fa>
 800a9d8:	f1ba 0f00 	cmp.w	sl, #0
 800a9dc:	d115      	bne.n	800aa0a <_dtoa_r+0x8fa>
 800a9de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9e2:	b993      	cbnz	r3, 800aa0a <_dtoa_r+0x8fa>
 800a9e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9e8:	0d1b      	lsrs	r3, r3, #20
 800a9ea:	051b      	lsls	r3, r3, #20
 800a9ec:	b183      	cbz	r3, 800aa10 <_dtoa_r+0x900>
 800a9ee:	9b04      	ldr	r3, [sp, #16]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	9b05      	ldr	r3, [sp, #20]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	f04f 0801 	mov.w	r8, #1
 800a9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f47f af6a 	bne.w	800a8da <_dtoa_r+0x7ca>
 800aa06:	2001      	movs	r0, #1
 800aa08:	e76f      	b.n	800a8ea <_dtoa_r+0x7da>
 800aa0a:	f04f 0800 	mov.w	r8, #0
 800aa0e:	e7f6      	b.n	800a9fe <_dtoa_r+0x8ee>
 800aa10:	4698      	mov	r8, r3
 800aa12:	e7f4      	b.n	800a9fe <_dtoa_r+0x8ee>
 800aa14:	f43f af7d 	beq.w	800a912 <_dtoa_r+0x802>
 800aa18:	4618      	mov	r0, r3
 800aa1a:	301c      	adds	r0, #28
 800aa1c:	e772      	b.n	800a904 <_dtoa_r+0x7f4>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	dc37      	bgt.n	800aa94 <_dtoa_r+0x984>
 800aa24:	9b06      	ldr	r3, [sp, #24]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	dd34      	ble.n	800aa94 <_dtoa_r+0x984>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	9302      	str	r3, [sp, #8]
 800aa2e:	9b02      	ldr	r3, [sp, #8]
 800aa30:	b96b      	cbnz	r3, 800aa4e <_dtoa_r+0x93e>
 800aa32:	4631      	mov	r1, r6
 800aa34:	2205      	movs	r2, #5
 800aa36:	4620      	mov	r0, r4
 800aa38:	f7fe febc 	bl	80097b4 <__multadd>
 800aa3c:	4601      	mov	r1, r0
 800aa3e:	4606      	mov	r6, r0
 800aa40:	ee18 0a10 	vmov	r0, s16
 800aa44:	f7ff f8d6 	bl	8009bf4 <__mcmp>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f73f adbb 	bgt.w	800a5c4 <_dtoa_r+0x4b4>
 800aa4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa50:	9d01      	ldr	r5, [sp, #4]
 800aa52:	43db      	mvns	r3, r3
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7fe fe87 	bl	8009770 <_Bfree>
 800aa62:	2f00      	cmp	r7, #0
 800aa64:	f43f aea4 	beq.w	800a7b0 <_dtoa_r+0x6a0>
 800aa68:	f1b8 0f00 	cmp.w	r8, #0
 800aa6c:	d005      	beq.n	800aa7a <_dtoa_r+0x96a>
 800aa6e:	45b8      	cmp	r8, r7
 800aa70:	d003      	beq.n	800aa7a <_dtoa_r+0x96a>
 800aa72:	4641      	mov	r1, r8
 800aa74:	4620      	mov	r0, r4
 800aa76:	f7fe fe7b 	bl	8009770 <_Bfree>
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7fe fe77 	bl	8009770 <_Bfree>
 800aa82:	e695      	b.n	800a7b0 <_dtoa_r+0x6a0>
 800aa84:	2600      	movs	r6, #0
 800aa86:	4637      	mov	r7, r6
 800aa88:	e7e1      	b.n	800aa4e <_dtoa_r+0x93e>
 800aa8a:	9700      	str	r7, [sp, #0]
 800aa8c:	4637      	mov	r7, r6
 800aa8e:	e599      	b.n	800a5c4 <_dtoa_r+0x4b4>
 800aa90:	40240000 	.word	0x40240000
 800aa94:	9b08      	ldr	r3, [sp, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 80ca 	beq.w	800ac30 <_dtoa_r+0xb20>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	9302      	str	r3, [sp, #8]
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	dd05      	ble.n	800aab0 <_dtoa_r+0x9a0>
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	462a      	mov	r2, r5
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7ff f833 	bl	8009b14 <__lshift>
 800aaae:	4607      	mov	r7, r0
 800aab0:	f1b8 0f00 	cmp.w	r8, #0
 800aab4:	d05b      	beq.n	800ab6e <_dtoa_r+0xa5e>
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7fe fe19 	bl	80096f0 <_Balloc>
 800aabe:	4605      	mov	r5, r0
 800aac0:	b928      	cbnz	r0, 800aace <_dtoa_r+0x9be>
 800aac2:	4b87      	ldr	r3, [pc, #540]	; (800ace0 <_dtoa_r+0xbd0>)
 800aac4:	4602      	mov	r2, r0
 800aac6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaca:	f7ff bb3b 	b.w	800a144 <_dtoa_r+0x34>
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	3202      	adds	r2, #2
 800aad2:	0092      	lsls	r2, r2, #2
 800aad4:	f107 010c 	add.w	r1, r7, #12
 800aad8:	300c      	adds	r0, #12
 800aada:	f000 f921 	bl	800ad20 <memcpy>
 800aade:	2201      	movs	r2, #1
 800aae0:	4629      	mov	r1, r5
 800aae2:	4620      	mov	r0, r4
 800aae4:	f7ff f816 	bl	8009b14 <__lshift>
 800aae8:	9b01      	ldr	r3, [sp, #4]
 800aaea:	f103 0901 	add.w	r9, r3, #1
 800aaee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	f00a 0301 	and.w	r3, sl, #1
 800aafa:	46b8      	mov	r8, r7
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	4607      	mov	r7, r0
 800ab00:	4631      	mov	r1, r6
 800ab02:	ee18 0a10 	vmov	r0, s16
 800ab06:	f7ff fa75 	bl	8009ff4 <quorem>
 800ab0a:	4641      	mov	r1, r8
 800ab0c:	9002      	str	r0, [sp, #8]
 800ab0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab12:	ee18 0a10 	vmov	r0, s16
 800ab16:	f7ff f86d 	bl	8009bf4 <__mcmp>
 800ab1a:	463a      	mov	r2, r7
 800ab1c:	9003      	str	r0, [sp, #12]
 800ab1e:	4631      	mov	r1, r6
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7ff f883 	bl	8009c2c <__mdiff>
 800ab26:	68c2      	ldr	r2, [r0, #12]
 800ab28:	f109 3bff 	add.w	fp, r9, #4294967295
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	bb02      	cbnz	r2, 800ab72 <_dtoa_r+0xa62>
 800ab30:	4601      	mov	r1, r0
 800ab32:	ee18 0a10 	vmov	r0, s16
 800ab36:	f7ff f85d 	bl	8009bf4 <__mcmp>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4620      	mov	r0, r4
 800ab40:	9207      	str	r2, [sp, #28]
 800ab42:	f7fe fe15 	bl	8009770 <_Bfree>
 800ab46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ab4a:	ea43 0102 	orr.w	r1, r3, r2
 800ab4e:	9b04      	ldr	r3, [sp, #16]
 800ab50:	430b      	orrs	r3, r1
 800ab52:	464d      	mov	r5, r9
 800ab54:	d10f      	bne.n	800ab76 <_dtoa_r+0xa66>
 800ab56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab5a:	d02a      	beq.n	800abb2 <_dtoa_r+0xaa2>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dd02      	ble.n	800ab68 <_dtoa_r+0xa58>
 800ab62:	9b02      	ldr	r3, [sp, #8]
 800ab64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab68:	f88b a000 	strb.w	sl, [fp]
 800ab6c:	e775      	b.n	800aa5a <_dtoa_r+0x94a>
 800ab6e:	4638      	mov	r0, r7
 800ab70:	e7ba      	b.n	800aae8 <_dtoa_r+0x9d8>
 800ab72:	2201      	movs	r2, #1
 800ab74:	e7e2      	b.n	800ab3c <_dtoa_r+0xa2c>
 800ab76:	9b03      	ldr	r3, [sp, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	db04      	blt.n	800ab86 <_dtoa_r+0xa76>
 800ab7c:	9906      	ldr	r1, [sp, #24]
 800ab7e:	430b      	orrs	r3, r1
 800ab80:	9904      	ldr	r1, [sp, #16]
 800ab82:	430b      	orrs	r3, r1
 800ab84:	d122      	bne.n	800abcc <_dtoa_r+0xabc>
 800ab86:	2a00      	cmp	r2, #0
 800ab88:	ddee      	ble.n	800ab68 <_dtoa_r+0xa58>
 800ab8a:	ee18 1a10 	vmov	r1, s16
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7fe ffbf 	bl	8009b14 <__lshift>
 800ab96:	4631      	mov	r1, r6
 800ab98:	ee08 0a10 	vmov	s16, r0
 800ab9c:	f7ff f82a 	bl	8009bf4 <__mcmp>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	dc03      	bgt.n	800abac <_dtoa_r+0xa9c>
 800aba4:	d1e0      	bne.n	800ab68 <_dtoa_r+0xa58>
 800aba6:	f01a 0f01 	tst.w	sl, #1
 800abaa:	d0dd      	beq.n	800ab68 <_dtoa_r+0xa58>
 800abac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abb0:	d1d7      	bne.n	800ab62 <_dtoa_r+0xa52>
 800abb2:	2339      	movs	r3, #57	; 0x39
 800abb4:	f88b 3000 	strb.w	r3, [fp]
 800abb8:	462b      	mov	r3, r5
 800abba:	461d      	mov	r5, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abc2:	2a39      	cmp	r2, #57	; 0x39
 800abc4:	d071      	beq.n	800acaa <_dtoa_r+0xb9a>
 800abc6:	3201      	adds	r2, #1
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	e746      	b.n	800aa5a <_dtoa_r+0x94a>
 800abcc:	2a00      	cmp	r2, #0
 800abce:	dd07      	ble.n	800abe0 <_dtoa_r+0xad0>
 800abd0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abd4:	d0ed      	beq.n	800abb2 <_dtoa_r+0xaa2>
 800abd6:	f10a 0301 	add.w	r3, sl, #1
 800abda:	f88b 3000 	strb.w	r3, [fp]
 800abde:	e73c      	b.n	800aa5a <_dtoa_r+0x94a>
 800abe0:	9b05      	ldr	r3, [sp, #20]
 800abe2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800abe6:	4599      	cmp	r9, r3
 800abe8:	d047      	beq.n	800ac7a <_dtoa_r+0xb6a>
 800abea:	ee18 1a10 	vmov	r1, s16
 800abee:	2300      	movs	r3, #0
 800abf0:	220a      	movs	r2, #10
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7fe fdde 	bl	80097b4 <__multadd>
 800abf8:	45b8      	cmp	r8, r7
 800abfa:	ee08 0a10 	vmov	s16, r0
 800abfe:	f04f 0300 	mov.w	r3, #0
 800ac02:	f04f 020a 	mov.w	r2, #10
 800ac06:	4641      	mov	r1, r8
 800ac08:	4620      	mov	r0, r4
 800ac0a:	d106      	bne.n	800ac1a <_dtoa_r+0xb0a>
 800ac0c:	f7fe fdd2 	bl	80097b4 <__multadd>
 800ac10:	4680      	mov	r8, r0
 800ac12:	4607      	mov	r7, r0
 800ac14:	f109 0901 	add.w	r9, r9, #1
 800ac18:	e772      	b.n	800ab00 <_dtoa_r+0x9f0>
 800ac1a:	f7fe fdcb 	bl	80097b4 <__multadd>
 800ac1e:	4639      	mov	r1, r7
 800ac20:	4680      	mov	r8, r0
 800ac22:	2300      	movs	r3, #0
 800ac24:	220a      	movs	r2, #10
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7fe fdc4 	bl	80097b4 <__multadd>
 800ac2c:	4607      	mov	r7, r0
 800ac2e:	e7f1      	b.n	800ac14 <_dtoa_r+0xb04>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	9302      	str	r3, [sp, #8]
 800ac34:	9d01      	ldr	r5, [sp, #4]
 800ac36:	ee18 0a10 	vmov	r0, s16
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	f7ff f9da 	bl	8009ff4 <quorem>
 800ac40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac44:	9b01      	ldr	r3, [sp, #4]
 800ac46:	f805 ab01 	strb.w	sl, [r5], #1
 800ac4a:	1aea      	subs	r2, r5, r3
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	dd09      	ble.n	800ac66 <_dtoa_r+0xb56>
 800ac52:	ee18 1a10 	vmov	r1, s16
 800ac56:	2300      	movs	r3, #0
 800ac58:	220a      	movs	r2, #10
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f7fe fdaa 	bl	80097b4 <__multadd>
 800ac60:	ee08 0a10 	vmov	s16, r0
 800ac64:	e7e7      	b.n	800ac36 <_dtoa_r+0xb26>
 800ac66:	9b02      	ldr	r3, [sp, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	bfc8      	it	gt
 800ac6c:	461d      	movgt	r5, r3
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	bfd8      	it	le
 800ac72:	2501      	movle	r5, #1
 800ac74:	441d      	add	r5, r3
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	ee18 1a10 	vmov	r1, s16
 800ac7e:	2201      	movs	r2, #1
 800ac80:	4620      	mov	r0, r4
 800ac82:	f7fe ff47 	bl	8009b14 <__lshift>
 800ac86:	4631      	mov	r1, r6
 800ac88:	ee08 0a10 	vmov	s16, r0
 800ac8c:	f7fe ffb2 	bl	8009bf4 <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	dc91      	bgt.n	800abb8 <_dtoa_r+0xaa8>
 800ac94:	d102      	bne.n	800ac9c <_dtoa_r+0xb8c>
 800ac96:	f01a 0f01 	tst.w	sl, #1
 800ac9a:	d18d      	bne.n	800abb8 <_dtoa_r+0xaa8>
 800ac9c:	462b      	mov	r3, r5
 800ac9e:	461d      	mov	r5, r3
 800aca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aca4:	2a30      	cmp	r2, #48	; 0x30
 800aca6:	d0fa      	beq.n	800ac9e <_dtoa_r+0xb8e>
 800aca8:	e6d7      	b.n	800aa5a <_dtoa_r+0x94a>
 800acaa:	9a01      	ldr	r2, [sp, #4]
 800acac:	429a      	cmp	r2, r3
 800acae:	d184      	bne.n	800abba <_dtoa_r+0xaaa>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	2331      	movs	r3, #49	; 0x31
 800acb8:	7013      	strb	r3, [r2, #0]
 800acba:	e6ce      	b.n	800aa5a <_dtoa_r+0x94a>
 800acbc:	4b09      	ldr	r3, [pc, #36]	; (800ace4 <_dtoa_r+0xbd4>)
 800acbe:	f7ff ba95 	b.w	800a1ec <_dtoa_r+0xdc>
 800acc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f47f aa6e 	bne.w	800a1a6 <_dtoa_r+0x96>
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <_dtoa_r+0xbd8>)
 800accc:	f7ff ba8e 	b.w	800a1ec <_dtoa_r+0xdc>
 800acd0:	9b02      	ldr	r3, [sp, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dcae      	bgt.n	800ac34 <_dtoa_r+0xb24>
 800acd6:	9b06      	ldr	r3, [sp, #24]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	f73f aea8 	bgt.w	800aa2e <_dtoa_r+0x91e>
 800acde:	e7a9      	b.n	800ac34 <_dtoa_r+0xb24>
 800ace0:	0800bc97 	.word	0x0800bc97
 800ace4:	0800bded 	.word	0x0800bded
 800ace8:	0800bde0 	.word	0x0800bde0

0800acec <fiprintf>:
 800acec:	b40e      	push	{r1, r2, r3}
 800acee:	b503      	push	{r0, r1, lr}
 800acf0:	4601      	mov	r1, r0
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	4805      	ldr	r0, [pc, #20]	; (800ad0c <fiprintf+0x20>)
 800acf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfa:	6800      	ldr	r0, [r0, #0]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	f000 f89f 	bl	800ae40 <_vfiprintf_r>
 800ad02:	b002      	add	sp, #8
 800ad04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad08:	b003      	add	sp, #12
 800ad0a:	4770      	bx	lr
 800ad0c:	20000100 	.word	0x20000100

0800ad10 <malloc>:
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <malloc+0xc>)
 800ad12:	4601      	mov	r1, r0
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f7ff b8c3 	b.w	8009ea0 <_malloc_r>
 800ad1a:	bf00      	nop
 800ad1c:	20000100 	.word	0x20000100

0800ad20 <memcpy>:
 800ad20:	440a      	add	r2, r1
 800ad22:	4291      	cmp	r1, r2
 800ad24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad28:	d100      	bne.n	800ad2c <memcpy+0xc>
 800ad2a:	4770      	bx	lr
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad36:	4291      	cmp	r1, r2
 800ad38:	d1f9      	bne.n	800ad2e <memcpy+0xe>
 800ad3a:	bd10      	pop	{r4, pc}

0800ad3c <__malloc_lock>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__malloc_lock+0x8>)
 800ad3e:	f000 bdc3 	b.w	800b8c8 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	20001748 	.word	0x20001748

0800ad48 <__malloc_unlock>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__malloc_unlock+0x8>)
 800ad4a:	f000 bdbe 	b.w	800b8ca <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	20001748 	.word	0x20001748

0800ad54 <_free_r>:
 800ad54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad56:	2900      	cmp	r1, #0
 800ad58:	d044      	beq.n	800ade4 <_free_r+0x90>
 800ad5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad5e:	9001      	str	r0, [sp, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f1a1 0404 	sub.w	r4, r1, #4
 800ad66:	bfb8      	it	lt
 800ad68:	18e4      	addlt	r4, r4, r3
 800ad6a:	f7ff ffe7 	bl	800ad3c <__malloc_lock>
 800ad6e:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <_free_r+0x94>)
 800ad70:	9801      	ldr	r0, [sp, #4]
 800ad72:	6813      	ldr	r3, [r2, #0]
 800ad74:	b933      	cbnz	r3, 800ad84 <_free_r+0x30>
 800ad76:	6063      	str	r3, [r4, #4]
 800ad78:	6014      	str	r4, [r2, #0]
 800ad7a:	b003      	add	sp, #12
 800ad7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad80:	f7ff bfe2 	b.w	800ad48 <__malloc_unlock>
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	d908      	bls.n	800ad9a <_free_r+0x46>
 800ad88:	6825      	ldr	r5, [r4, #0]
 800ad8a:	1961      	adds	r1, r4, r5
 800ad8c:	428b      	cmp	r3, r1
 800ad8e:	bf01      	itttt	eq
 800ad90:	6819      	ldreq	r1, [r3, #0]
 800ad92:	685b      	ldreq	r3, [r3, #4]
 800ad94:	1949      	addeq	r1, r1, r5
 800ad96:	6021      	streq	r1, [r4, #0]
 800ad98:	e7ed      	b.n	800ad76 <_free_r+0x22>
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	b10b      	cbz	r3, 800ada4 <_free_r+0x50>
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	d9fa      	bls.n	800ad9a <_free_r+0x46>
 800ada4:	6811      	ldr	r1, [r2, #0]
 800ada6:	1855      	adds	r5, r2, r1
 800ada8:	42a5      	cmp	r5, r4
 800adaa:	d10b      	bne.n	800adc4 <_free_r+0x70>
 800adac:	6824      	ldr	r4, [r4, #0]
 800adae:	4421      	add	r1, r4
 800adb0:	1854      	adds	r4, r2, r1
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	6011      	str	r1, [r2, #0]
 800adb6:	d1e0      	bne.n	800ad7a <_free_r+0x26>
 800adb8:	681c      	ldr	r4, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	6053      	str	r3, [r2, #4]
 800adbe:	4421      	add	r1, r4
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	e7da      	b.n	800ad7a <_free_r+0x26>
 800adc4:	d902      	bls.n	800adcc <_free_r+0x78>
 800adc6:	230c      	movs	r3, #12
 800adc8:	6003      	str	r3, [r0, #0]
 800adca:	e7d6      	b.n	800ad7a <_free_r+0x26>
 800adcc:	6825      	ldr	r5, [r4, #0]
 800adce:	1961      	adds	r1, r4, r5
 800add0:	428b      	cmp	r3, r1
 800add2:	bf04      	itt	eq
 800add4:	6819      	ldreq	r1, [r3, #0]
 800add6:	685b      	ldreq	r3, [r3, #4]
 800add8:	6063      	str	r3, [r4, #4]
 800adda:	bf04      	itt	eq
 800addc:	1949      	addeq	r1, r1, r5
 800adde:	6021      	streq	r1, [r4, #0]
 800ade0:	6054      	str	r4, [r2, #4]
 800ade2:	e7ca      	b.n	800ad7a <_free_r+0x26>
 800ade4:	b003      	add	sp, #12
 800ade6:	bd30      	pop	{r4, r5, pc}
 800ade8:	2000173c 	.word	0x2000173c

0800adec <__sfputc_r>:
 800adec:	6893      	ldr	r3, [r2, #8]
 800adee:	3b01      	subs	r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	b410      	push	{r4}
 800adf4:	6093      	str	r3, [r2, #8]
 800adf6:	da08      	bge.n	800ae0a <__sfputc_r+0x1e>
 800adf8:	6994      	ldr	r4, [r2, #24]
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	db01      	blt.n	800ae02 <__sfputc_r+0x16>
 800adfe:	290a      	cmp	r1, #10
 800ae00:	d103      	bne.n	800ae0a <__sfputc_r+0x1e>
 800ae02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae06:	f000 badf 	b.w	800b3c8 <__swbuf_r>
 800ae0a:	6813      	ldr	r3, [r2, #0]
 800ae0c:	1c58      	adds	r0, r3, #1
 800ae0e:	6010      	str	r0, [r2, #0]
 800ae10:	7019      	strb	r1, [r3, #0]
 800ae12:	4608      	mov	r0, r1
 800ae14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <__sfputs_r>:
 800ae1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	460f      	mov	r7, r1
 800ae20:	4614      	mov	r4, r2
 800ae22:	18d5      	adds	r5, r2, r3
 800ae24:	42ac      	cmp	r4, r5
 800ae26:	d101      	bne.n	800ae2c <__sfputs_r+0x12>
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e007      	b.n	800ae3c <__sfputs_r+0x22>
 800ae2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae30:	463a      	mov	r2, r7
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ffda 	bl	800adec <__sfputc_r>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d1f3      	bne.n	800ae24 <__sfputs_r+0xa>
 800ae3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae40 <_vfiprintf_r>:
 800ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	460d      	mov	r5, r1
 800ae46:	b09d      	sub	sp, #116	; 0x74
 800ae48:	4614      	mov	r4, r2
 800ae4a:	4698      	mov	r8, r3
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	b118      	cbz	r0, 800ae58 <_vfiprintf_r+0x18>
 800ae50:	6983      	ldr	r3, [r0, #24]
 800ae52:	b90b      	cbnz	r3, 800ae58 <_vfiprintf_r+0x18>
 800ae54:	f000 fc9a 	bl	800b78c <__sinit>
 800ae58:	4b89      	ldr	r3, [pc, #548]	; (800b080 <_vfiprintf_r+0x240>)
 800ae5a:	429d      	cmp	r5, r3
 800ae5c:	d11b      	bne.n	800ae96 <_vfiprintf_r+0x56>
 800ae5e:	6875      	ldr	r5, [r6, #4]
 800ae60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae62:	07d9      	lsls	r1, r3, #31
 800ae64:	d405      	bmi.n	800ae72 <_vfiprintf_r+0x32>
 800ae66:	89ab      	ldrh	r3, [r5, #12]
 800ae68:	059a      	lsls	r2, r3, #22
 800ae6a:	d402      	bmi.n	800ae72 <_vfiprintf_r+0x32>
 800ae6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae6e:	f000 fd2b 	bl	800b8c8 <__retarget_lock_acquire_recursive>
 800ae72:	89ab      	ldrh	r3, [r5, #12]
 800ae74:	071b      	lsls	r3, r3, #28
 800ae76:	d501      	bpl.n	800ae7c <_vfiprintf_r+0x3c>
 800ae78:	692b      	ldr	r3, [r5, #16]
 800ae7a:	b9eb      	cbnz	r3, 800aeb8 <_vfiprintf_r+0x78>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f000 faf4 	bl	800b46c <__swsetup_r>
 800ae84:	b1c0      	cbz	r0, 800aeb8 <_vfiprintf_r+0x78>
 800ae86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae88:	07dc      	lsls	r4, r3, #31
 800ae8a:	d50e      	bpl.n	800aeaa <_vfiprintf_r+0x6a>
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	b01d      	add	sp, #116	; 0x74
 800ae92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae96:	4b7b      	ldr	r3, [pc, #492]	; (800b084 <_vfiprintf_r+0x244>)
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	d101      	bne.n	800aea0 <_vfiprintf_r+0x60>
 800ae9c:	68b5      	ldr	r5, [r6, #8]
 800ae9e:	e7df      	b.n	800ae60 <_vfiprintf_r+0x20>
 800aea0:	4b79      	ldr	r3, [pc, #484]	; (800b088 <_vfiprintf_r+0x248>)
 800aea2:	429d      	cmp	r5, r3
 800aea4:	bf08      	it	eq
 800aea6:	68f5      	ldreq	r5, [r6, #12]
 800aea8:	e7da      	b.n	800ae60 <_vfiprintf_r+0x20>
 800aeaa:	89ab      	ldrh	r3, [r5, #12]
 800aeac:	0598      	lsls	r0, r3, #22
 800aeae:	d4ed      	bmi.n	800ae8c <_vfiprintf_r+0x4c>
 800aeb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb2:	f000 fd0a 	bl	800b8ca <__retarget_lock_release_recursive>
 800aeb6:	e7e9      	b.n	800ae8c <_vfiprintf_r+0x4c>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	9309      	str	r3, [sp, #36]	; 0x24
 800aebc:	2320      	movs	r3, #32
 800aebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aec2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec6:	2330      	movs	r3, #48	; 0x30
 800aec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b08c <_vfiprintf_r+0x24c>
 800aecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aed0:	f04f 0901 	mov.w	r9, #1
 800aed4:	4623      	mov	r3, r4
 800aed6:	469a      	mov	sl, r3
 800aed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aedc:	b10a      	cbz	r2, 800aee2 <_vfiprintf_r+0xa2>
 800aede:	2a25      	cmp	r2, #37	; 0x25
 800aee0:	d1f9      	bne.n	800aed6 <_vfiprintf_r+0x96>
 800aee2:	ebba 0b04 	subs.w	fp, sl, r4
 800aee6:	d00b      	beq.n	800af00 <_vfiprintf_r+0xc0>
 800aee8:	465b      	mov	r3, fp
 800aeea:	4622      	mov	r2, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	4630      	mov	r0, r6
 800aef0:	f7ff ff93 	bl	800ae1a <__sfputs_r>
 800aef4:	3001      	adds	r0, #1
 800aef6:	f000 80aa 	beq.w	800b04e <_vfiprintf_r+0x20e>
 800aefa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aefc:	445a      	add	r2, fp
 800aefe:	9209      	str	r2, [sp, #36]	; 0x24
 800af00:	f89a 3000 	ldrb.w	r3, [sl]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 80a2 	beq.w	800b04e <_vfiprintf_r+0x20e>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f04f 32ff 	mov.w	r2, #4294967295
 800af10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af14:	f10a 0a01 	add.w	sl, sl, #1
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	9307      	str	r3, [sp, #28]
 800af1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af20:	931a      	str	r3, [sp, #104]	; 0x68
 800af22:	4654      	mov	r4, sl
 800af24:	2205      	movs	r2, #5
 800af26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2a:	4858      	ldr	r0, [pc, #352]	; (800b08c <_vfiprintf_r+0x24c>)
 800af2c:	f7f5 f960 	bl	80001f0 <memchr>
 800af30:	9a04      	ldr	r2, [sp, #16]
 800af32:	b9d8      	cbnz	r0, 800af6c <_vfiprintf_r+0x12c>
 800af34:	06d1      	lsls	r1, r2, #27
 800af36:	bf44      	itt	mi
 800af38:	2320      	movmi	r3, #32
 800af3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3e:	0713      	lsls	r3, r2, #28
 800af40:	bf44      	itt	mi
 800af42:	232b      	movmi	r3, #43	; 0x2b
 800af44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af48:	f89a 3000 	ldrb.w	r3, [sl]
 800af4c:	2b2a      	cmp	r3, #42	; 0x2a
 800af4e:	d015      	beq.n	800af7c <_vfiprintf_r+0x13c>
 800af50:	9a07      	ldr	r2, [sp, #28]
 800af52:	4654      	mov	r4, sl
 800af54:	2000      	movs	r0, #0
 800af56:	f04f 0c0a 	mov.w	ip, #10
 800af5a:	4621      	mov	r1, r4
 800af5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af60:	3b30      	subs	r3, #48	; 0x30
 800af62:	2b09      	cmp	r3, #9
 800af64:	d94e      	bls.n	800b004 <_vfiprintf_r+0x1c4>
 800af66:	b1b0      	cbz	r0, 800af96 <_vfiprintf_r+0x156>
 800af68:	9207      	str	r2, [sp, #28]
 800af6a:	e014      	b.n	800af96 <_vfiprintf_r+0x156>
 800af6c:	eba0 0308 	sub.w	r3, r0, r8
 800af70:	fa09 f303 	lsl.w	r3, r9, r3
 800af74:	4313      	orrs	r3, r2
 800af76:	9304      	str	r3, [sp, #16]
 800af78:	46a2      	mov	sl, r4
 800af7a:	e7d2      	b.n	800af22 <_vfiprintf_r+0xe2>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	1d19      	adds	r1, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	9103      	str	r1, [sp, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	bfbb      	ittet	lt
 800af88:	425b      	neglt	r3, r3
 800af8a:	f042 0202 	orrlt.w	r2, r2, #2
 800af8e:	9307      	strge	r3, [sp, #28]
 800af90:	9307      	strlt	r3, [sp, #28]
 800af92:	bfb8      	it	lt
 800af94:	9204      	strlt	r2, [sp, #16]
 800af96:	7823      	ldrb	r3, [r4, #0]
 800af98:	2b2e      	cmp	r3, #46	; 0x2e
 800af9a:	d10c      	bne.n	800afb6 <_vfiprintf_r+0x176>
 800af9c:	7863      	ldrb	r3, [r4, #1]
 800af9e:	2b2a      	cmp	r3, #42	; 0x2a
 800afa0:	d135      	bne.n	800b00e <_vfiprintf_r+0x1ce>
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	9203      	str	r2, [sp, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bfb8      	it	lt
 800afae:	f04f 33ff 	movlt.w	r3, #4294967295
 800afb2:	3402      	adds	r4, #2
 800afb4:	9305      	str	r3, [sp, #20]
 800afb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b09c <_vfiprintf_r+0x25c>
 800afba:	7821      	ldrb	r1, [r4, #0]
 800afbc:	2203      	movs	r2, #3
 800afbe:	4650      	mov	r0, sl
 800afc0:	f7f5 f916 	bl	80001f0 <memchr>
 800afc4:	b140      	cbz	r0, 800afd8 <_vfiprintf_r+0x198>
 800afc6:	2340      	movs	r3, #64	; 0x40
 800afc8:	eba0 000a 	sub.w	r0, r0, sl
 800afcc:	fa03 f000 	lsl.w	r0, r3, r0
 800afd0:	9b04      	ldr	r3, [sp, #16]
 800afd2:	4303      	orrs	r3, r0
 800afd4:	3401      	adds	r4, #1
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afdc:	482c      	ldr	r0, [pc, #176]	; (800b090 <_vfiprintf_r+0x250>)
 800afde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afe2:	2206      	movs	r2, #6
 800afe4:	f7f5 f904 	bl	80001f0 <memchr>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d03f      	beq.n	800b06c <_vfiprintf_r+0x22c>
 800afec:	4b29      	ldr	r3, [pc, #164]	; (800b094 <_vfiprintf_r+0x254>)
 800afee:	bb1b      	cbnz	r3, 800b038 <_vfiprintf_r+0x1f8>
 800aff0:	9b03      	ldr	r3, [sp, #12]
 800aff2:	3307      	adds	r3, #7
 800aff4:	f023 0307 	bic.w	r3, r3, #7
 800aff8:	3308      	adds	r3, #8
 800affa:	9303      	str	r3, [sp, #12]
 800affc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affe:	443b      	add	r3, r7
 800b000:	9309      	str	r3, [sp, #36]	; 0x24
 800b002:	e767      	b.n	800aed4 <_vfiprintf_r+0x94>
 800b004:	fb0c 3202 	mla	r2, ip, r2, r3
 800b008:	460c      	mov	r4, r1
 800b00a:	2001      	movs	r0, #1
 800b00c:	e7a5      	b.n	800af5a <_vfiprintf_r+0x11a>
 800b00e:	2300      	movs	r3, #0
 800b010:	3401      	adds	r4, #1
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	4619      	mov	r1, r3
 800b016:	f04f 0c0a 	mov.w	ip, #10
 800b01a:	4620      	mov	r0, r4
 800b01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b020:	3a30      	subs	r2, #48	; 0x30
 800b022:	2a09      	cmp	r2, #9
 800b024:	d903      	bls.n	800b02e <_vfiprintf_r+0x1ee>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0c5      	beq.n	800afb6 <_vfiprintf_r+0x176>
 800b02a:	9105      	str	r1, [sp, #20]
 800b02c:	e7c3      	b.n	800afb6 <_vfiprintf_r+0x176>
 800b02e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b032:	4604      	mov	r4, r0
 800b034:	2301      	movs	r3, #1
 800b036:	e7f0      	b.n	800b01a <_vfiprintf_r+0x1da>
 800b038:	ab03      	add	r3, sp, #12
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	462a      	mov	r2, r5
 800b03e:	4b16      	ldr	r3, [pc, #88]	; (800b098 <_vfiprintf_r+0x258>)
 800b040:	a904      	add	r1, sp, #16
 800b042:	4630      	mov	r0, r6
 800b044:	f3af 8000 	nop.w
 800b048:	4607      	mov	r7, r0
 800b04a:	1c78      	adds	r0, r7, #1
 800b04c:	d1d6      	bne.n	800affc <_vfiprintf_r+0x1bc>
 800b04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b050:	07d9      	lsls	r1, r3, #31
 800b052:	d405      	bmi.n	800b060 <_vfiprintf_r+0x220>
 800b054:	89ab      	ldrh	r3, [r5, #12]
 800b056:	059a      	lsls	r2, r3, #22
 800b058:	d402      	bmi.n	800b060 <_vfiprintf_r+0x220>
 800b05a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b05c:	f000 fc35 	bl	800b8ca <__retarget_lock_release_recursive>
 800b060:	89ab      	ldrh	r3, [r5, #12]
 800b062:	065b      	lsls	r3, r3, #25
 800b064:	f53f af12 	bmi.w	800ae8c <_vfiprintf_r+0x4c>
 800b068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b06a:	e711      	b.n	800ae90 <_vfiprintf_r+0x50>
 800b06c:	ab03      	add	r3, sp, #12
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	462a      	mov	r2, r5
 800b072:	4b09      	ldr	r3, [pc, #36]	; (800b098 <_vfiprintf_r+0x258>)
 800b074:	a904      	add	r1, sp, #16
 800b076:	4630      	mov	r0, r6
 800b078:	f000 f880 	bl	800b17c <_printf_i>
 800b07c:	e7e4      	b.n	800b048 <_vfiprintf_r+0x208>
 800b07e:	bf00      	nop
 800b080:	0800bea0 	.word	0x0800bea0
 800b084:	0800bec0 	.word	0x0800bec0
 800b088:	0800be80 	.word	0x0800be80
 800b08c:	0800be4a 	.word	0x0800be4a
 800b090:	0800be54 	.word	0x0800be54
 800b094:	00000000 	.word	0x00000000
 800b098:	0800ae1b 	.word	0x0800ae1b
 800b09c:	0800be50 	.word	0x0800be50

0800b0a0 <_printf_common>:
 800b0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	4699      	mov	r9, r3
 800b0a8:	688a      	ldr	r2, [r1, #8]
 800b0aa:	690b      	ldr	r3, [r1, #16]
 800b0ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	bfb8      	it	lt
 800b0b4:	4613      	movlt	r3, r2
 800b0b6:	6033      	str	r3, [r6, #0]
 800b0b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0bc:	4607      	mov	r7, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b10a      	cbz	r2, 800b0c6 <_printf_common+0x26>
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	6823      	ldr	r3, [r4, #0]
 800b0c8:	0699      	lsls	r1, r3, #26
 800b0ca:	bf42      	ittt	mi
 800b0cc:	6833      	ldrmi	r3, [r6, #0]
 800b0ce:	3302      	addmi	r3, #2
 800b0d0:	6033      	strmi	r3, [r6, #0]
 800b0d2:	6825      	ldr	r5, [r4, #0]
 800b0d4:	f015 0506 	ands.w	r5, r5, #6
 800b0d8:	d106      	bne.n	800b0e8 <_printf_common+0x48>
 800b0da:	f104 0a19 	add.w	sl, r4, #25
 800b0de:	68e3      	ldr	r3, [r4, #12]
 800b0e0:	6832      	ldr	r2, [r6, #0]
 800b0e2:	1a9b      	subs	r3, r3, r2
 800b0e4:	42ab      	cmp	r3, r5
 800b0e6:	dc26      	bgt.n	800b136 <_printf_common+0x96>
 800b0e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0ec:	1e13      	subs	r3, r2, #0
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	bf18      	it	ne
 800b0f2:	2301      	movne	r3, #1
 800b0f4:	0692      	lsls	r2, r2, #26
 800b0f6:	d42b      	bmi.n	800b150 <_printf_common+0xb0>
 800b0f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	4638      	mov	r0, r7
 800b100:	47c0      	blx	r8
 800b102:	3001      	adds	r0, #1
 800b104:	d01e      	beq.n	800b144 <_printf_common+0xa4>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	68e5      	ldr	r5, [r4, #12]
 800b10a:	6832      	ldr	r2, [r6, #0]
 800b10c:	f003 0306 	and.w	r3, r3, #6
 800b110:	2b04      	cmp	r3, #4
 800b112:	bf08      	it	eq
 800b114:	1aad      	subeq	r5, r5, r2
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	bf0c      	ite	eq
 800b11c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b120:	2500      	movne	r5, #0
 800b122:	4293      	cmp	r3, r2
 800b124:	bfc4      	itt	gt
 800b126:	1a9b      	subgt	r3, r3, r2
 800b128:	18ed      	addgt	r5, r5, r3
 800b12a:	2600      	movs	r6, #0
 800b12c:	341a      	adds	r4, #26
 800b12e:	42b5      	cmp	r5, r6
 800b130:	d11a      	bne.n	800b168 <_printf_common+0xc8>
 800b132:	2000      	movs	r0, #0
 800b134:	e008      	b.n	800b148 <_printf_common+0xa8>
 800b136:	2301      	movs	r3, #1
 800b138:	4652      	mov	r2, sl
 800b13a:	4649      	mov	r1, r9
 800b13c:	4638      	mov	r0, r7
 800b13e:	47c0      	blx	r8
 800b140:	3001      	adds	r0, #1
 800b142:	d103      	bne.n	800b14c <_printf_common+0xac>
 800b144:	f04f 30ff 	mov.w	r0, #4294967295
 800b148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14c:	3501      	adds	r5, #1
 800b14e:	e7c6      	b.n	800b0de <_printf_common+0x3e>
 800b150:	18e1      	adds	r1, r4, r3
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	2030      	movs	r0, #48	; 0x30
 800b156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b15a:	4422      	add	r2, r4
 800b15c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b164:	3302      	adds	r3, #2
 800b166:	e7c7      	b.n	800b0f8 <_printf_common+0x58>
 800b168:	2301      	movs	r3, #1
 800b16a:	4622      	mov	r2, r4
 800b16c:	4649      	mov	r1, r9
 800b16e:	4638      	mov	r0, r7
 800b170:	47c0      	blx	r8
 800b172:	3001      	adds	r0, #1
 800b174:	d0e6      	beq.n	800b144 <_printf_common+0xa4>
 800b176:	3601      	adds	r6, #1
 800b178:	e7d9      	b.n	800b12e <_printf_common+0x8e>
	...

0800b17c <_printf_i>:
 800b17c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	7e0f      	ldrb	r7, [r1, #24]
 800b182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b184:	2f78      	cmp	r7, #120	; 0x78
 800b186:	4691      	mov	r9, r2
 800b188:	4680      	mov	r8, r0
 800b18a:	460c      	mov	r4, r1
 800b18c:	469a      	mov	sl, r3
 800b18e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b192:	d807      	bhi.n	800b1a4 <_printf_i+0x28>
 800b194:	2f62      	cmp	r7, #98	; 0x62
 800b196:	d80a      	bhi.n	800b1ae <_printf_i+0x32>
 800b198:	2f00      	cmp	r7, #0
 800b19a:	f000 80d8 	beq.w	800b34e <_printf_i+0x1d2>
 800b19e:	2f58      	cmp	r7, #88	; 0x58
 800b1a0:	f000 80a3 	beq.w	800b2ea <_printf_i+0x16e>
 800b1a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1ac:	e03a      	b.n	800b224 <_printf_i+0xa8>
 800b1ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1b2:	2b15      	cmp	r3, #21
 800b1b4:	d8f6      	bhi.n	800b1a4 <_printf_i+0x28>
 800b1b6:	a101      	add	r1, pc, #4	; (adr r1, 800b1bc <_printf_i+0x40>)
 800b1b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1bc:	0800b215 	.word	0x0800b215
 800b1c0:	0800b229 	.word	0x0800b229
 800b1c4:	0800b1a5 	.word	0x0800b1a5
 800b1c8:	0800b1a5 	.word	0x0800b1a5
 800b1cc:	0800b1a5 	.word	0x0800b1a5
 800b1d0:	0800b1a5 	.word	0x0800b1a5
 800b1d4:	0800b229 	.word	0x0800b229
 800b1d8:	0800b1a5 	.word	0x0800b1a5
 800b1dc:	0800b1a5 	.word	0x0800b1a5
 800b1e0:	0800b1a5 	.word	0x0800b1a5
 800b1e4:	0800b1a5 	.word	0x0800b1a5
 800b1e8:	0800b335 	.word	0x0800b335
 800b1ec:	0800b259 	.word	0x0800b259
 800b1f0:	0800b317 	.word	0x0800b317
 800b1f4:	0800b1a5 	.word	0x0800b1a5
 800b1f8:	0800b1a5 	.word	0x0800b1a5
 800b1fc:	0800b357 	.word	0x0800b357
 800b200:	0800b1a5 	.word	0x0800b1a5
 800b204:	0800b259 	.word	0x0800b259
 800b208:	0800b1a5 	.word	0x0800b1a5
 800b20c:	0800b1a5 	.word	0x0800b1a5
 800b210:	0800b31f 	.word	0x0800b31f
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	1d1a      	adds	r2, r3, #4
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	602a      	str	r2, [r5, #0]
 800b21c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b224:	2301      	movs	r3, #1
 800b226:	e0a3      	b.n	800b370 <_printf_i+0x1f4>
 800b228:	6820      	ldr	r0, [r4, #0]
 800b22a:	6829      	ldr	r1, [r5, #0]
 800b22c:	0606      	lsls	r6, r0, #24
 800b22e:	f101 0304 	add.w	r3, r1, #4
 800b232:	d50a      	bpl.n	800b24a <_printf_i+0xce>
 800b234:	680e      	ldr	r6, [r1, #0]
 800b236:	602b      	str	r3, [r5, #0]
 800b238:	2e00      	cmp	r6, #0
 800b23a:	da03      	bge.n	800b244 <_printf_i+0xc8>
 800b23c:	232d      	movs	r3, #45	; 0x2d
 800b23e:	4276      	negs	r6, r6
 800b240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b244:	485e      	ldr	r0, [pc, #376]	; (800b3c0 <_printf_i+0x244>)
 800b246:	230a      	movs	r3, #10
 800b248:	e019      	b.n	800b27e <_printf_i+0x102>
 800b24a:	680e      	ldr	r6, [r1, #0]
 800b24c:	602b      	str	r3, [r5, #0]
 800b24e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b252:	bf18      	it	ne
 800b254:	b236      	sxthne	r6, r6
 800b256:	e7ef      	b.n	800b238 <_printf_i+0xbc>
 800b258:	682b      	ldr	r3, [r5, #0]
 800b25a:	6820      	ldr	r0, [r4, #0]
 800b25c:	1d19      	adds	r1, r3, #4
 800b25e:	6029      	str	r1, [r5, #0]
 800b260:	0601      	lsls	r1, r0, #24
 800b262:	d501      	bpl.n	800b268 <_printf_i+0xec>
 800b264:	681e      	ldr	r6, [r3, #0]
 800b266:	e002      	b.n	800b26e <_printf_i+0xf2>
 800b268:	0646      	lsls	r6, r0, #25
 800b26a:	d5fb      	bpl.n	800b264 <_printf_i+0xe8>
 800b26c:	881e      	ldrh	r6, [r3, #0]
 800b26e:	4854      	ldr	r0, [pc, #336]	; (800b3c0 <_printf_i+0x244>)
 800b270:	2f6f      	cmp	r7, #111	; 0x6f
 800b272:	bf0c      	ite	eq
 800b274:	2308      	moveq	r3, #8
 800b276:	230a      	movne	r3, #10
 800b278:	2100      	movs	r1, #0
 800b27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27e:	6865      	ldr	r5, [r4, #4]
 800b280:	60a5      	str	r5, [r4, #8]
 800b282:	2d00      	cmp	r5, #0
 800b284:	bfa2      	ittt	ge
 800b286:	6821      	ldrge	r1, [r4, #0]
 800b288:	f021 0104 	bicge.w	r1, r1, #4
 800b28c:	6021      	strge	r1, [r4, #0]
 800b28e:	b90e      	cbnz	r6, 800b294 <_printf_i+0x118>
 800b290:	2d00      	cmp	r5, #0
 800b292:	d04d      	beq.n	800b330 <_printf_i+0x1b4>
 800b294:	4615      	mov	r5, r2
 800b296:	fbb6 f1f3 	udiv	r1, r6, r3
 800b29a:	fb03 6711 	mls	r7, r3, r1, r6
 800b29e:	5dc7      	ldrb	r7, [r0, r7]
 800b2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2a4:	4637      	mov	r7, r6
 800b2a6:	42bb      	cmp	r3, r7
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	d9f4      	bls.n	800b296 <_printf_i+0x11a>
 800b2ac:	2b08      	cmp	r3, #8
 800b2ae:	d10b      	bne.n	800b2c8 <_printf_i+0x14c>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07de      	lsls	r6, r3, #31
 800b2b4:	d508      	bpl.n	800b2c8 <_printf_i+0x14c>
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	6861      	ldr	r1, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	bfde      	ittt	le
 800b2be:	2330      	movle	r3, #48	; 0x30
 800b2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c8:	1b52      	subs	r2, r2, r5
 800b2ca:	6122      	str	r2, [r4, #16]
 800b2cc:	f8cd a000 	str.w	sl, [sp]
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	aa03      	add	r2, sp, #12
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f7ff fee2 	bl	800b0a0 <_printf_common>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d14c      	bne.n	800b37a <_printf_i+0x1fe>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	b004      	add	sp, #16
 800b2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ea:	4835      	ldr	r0, [pc, #212]	; (800b3c0 <_printf_i+0x244>)
 800b2ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2f0:	6829      	ldr	r1, [r5, #0]
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2f8:	6029      	str	r1, [r5, #0]
 800b2fa:	061d      	lsls	r5, r3, #24
 800b2fc:	d514      	bpl.n	800b328 <_printf_i+0x1ac>
 800b2fe:	07df      	lsls	r7, r3, #31
 800b300:	bf44      	itt	mi
 800b302:	f043 0320 	orrmi.w	r3, r3, #32
 800b306:	6023      	strmi	r3, [r4, #0]
 800b308:	b91e      	cbnz	r6, 800b312 <_printf_i+0x196>
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f023 0320 	bic.w	r3, r3, #32
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	2310      	movs	r3, #16
 800b314:	e7b0      	b.n	800b278 <_printf_i+0xfc>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	f043 0320 	orr.w	r3, r3, #32
 800b31c:	6023      	str	r3, [r4, #0]
 800b31e:	2378      	movs	r3, #120	; 0x78
 800b320:	4828      	ldr	r0, [pc, #160]	; (800b3c4 <_printf_i+0x248>)
 800b322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b326:	e7e3      	b.n	800b2f0 <_printf_i+0x174>
 800b328:	0659      	lsls	r1, r3, #25
 800b32a:	bf48      	it	mi
 800b32c:	b2b6      	uxthmi	r6, r6
 800b32e:	e7e6      	b.n	800b2fe <_printf_i+0x182>
 800b330:	4615      	mov	r5, r2
 800b332:	e7bb      	b.n	800b2ac <_printf_i+0x130>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	6826      	ldr	r6, [r4, #0]
 800b338:	6961      	ldr	r1, [r4, #20]
 800b33a:	1d18      	adds	r0, r3, #4
 800b33c:	6028      	str	r0, [r5, #0]
 800b33e:	0635      	lsls	r5, r6, #24
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	d501      	bpl.n	800b348 <_printf_i+0x1cc>
 800b344:	6019      	str	r1, [r3, #0]
 800b346:	e002      	b.n	800b34e <_printf_i+0x1d2>
 800b348:	0670      	lsls	r0, r6, #25
 800b34a:	d5fb      	bpl.n	800b344 <_printf_i+0x1c8>
 800b34c:	8019      	strh	r1, [r3, #0]
 800b34e:	2300      	movs	r3, #0
 800b350:	6123      	str	r3, [r4, #16]
 800b352:	4615      	mov	r5, r2
 800b354:	e7ba      	b.n	800b2cc <_printf_i+0x150>
 800b356:	682b      	ldr	r3, [r5, #0]
 800b358:	1d1a      	adds	r2, r3, #4
 800b35a:	602a      	str	r2, [r5, #0]
 800b35c:	681d      	ldr	r5, [r3, #0]
 800b35e:	6862      	ldr	r2, [r4, #4]
 800b360:	2100      	movs	r1, #0
 800b362:	4628      	mov	r0, r5
 800b364:	f7f4 ff44 	bl	80001f0 <memchr>
 800b368:	b108      	cbz	r0, 800b36e <_printf_i+0x1f2>
 800b36a:	1b40      	subs	r0, r0, r5
 800b36c:	6060      	str	r0, [r4, #4]
 800b36e:	6863      	ldr	r3, [r4, #4]
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	2300      	movs	r3, #0
 800b374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b378:	e7a8      	b.n	800b2cc <_printf_i+0x150>
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	462a      	mov	r2, r5
 800b37e:	4649      	mov	r1, r9
 800b380:	4640      	mov	r0, r8
 800b382:	47d0      	blx	sl
 800b384:	3001      	adds	r0, #1
 800b386:	d0ab      	beq.n	800b2e0 <_printf_i+0x164>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	079b      	lsls	r3, r3, #30
 800b38c:	d413      	bmi.n	800b3b6 <_printf_i+0x23a>
 800b38e:	68e0      	ldr	r0, [r4, #12]
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	4298      	cmp	r0, r3
 800b394:	bfb8      	it	lt
 800b396:	4618      	movlt	r0, r3
 800b398:	e7a4      	b.n	800b2e4 <_printf_i+0x168>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4632      	mov	r2, r6
 800b39e:	4649      	mov	r1, r9
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	47d0      	blx	sl
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d09b      	beq.n	800b2e0 <_printf_i+0x164>
 800b3a8:	3501      	adds	r5, #1
 800b3aa:	68e3      	ldr	r3, [r4, #12]
 800b3ac:	9903      	ldr	r1, [sp, #12]
 800b3ae:	1a5b      	subs	r3, r3, r1
 800b3b0:	42ab      	cmp	r3, r5
 800b3b2:	dcf2      	bgt.n	800b39a <_printf_i+0x21e>
 800b3b4:	e7eb      	b.n	800b38e <_printf_i+0x212>
 800b3b6:	2500      	movs	r5, #0
 800b3b8:	f104 0619 	add.w	r6, r4, #25
 800b3bc:	e7f5      	b.n	800b3aa <_printf_i+0x22e>
 800b3be:	bf00      	nop
 800b3c0:	0800be5b 	.word	0x0800be5b
 800b3c4:	0800be6c 	.word	0x0800be6c

0800b3c8 <__swbuf_r>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	460e      	mov	r6, r1
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b118      	cbz	r0, 800b3da <__swbuf_r+0x12>
 800b3d2:	6983      	ldr	r3, [r0, #24]
 800b3d4:	b90b      	cbnz	r3, 800b3da <__swbuf_r+0x12>
 800b3d6:	f000 f9d9 	bl	800b78c <__sinit>
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <__swbuf_r+0x98>)
 800b3dc:	429c      	cmp	r4, r3
 800b3de:	d12b      	bne.n	800b438 <__swbuf_r+0x70>
 800b3e0:	686c      	ldr	r4, [r5, #4]
 800b3e2:	69a3      	ldr	r3, [r4, #24]
 800b3e4:	60a3      	str	r3, [r4, #8]
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	071a      	lsls	r2, r3, #28
 800b3ea:	d52f      	bpl.n	800b44c <__swbuf_r+0x84>
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	b36b      	cbz	r3, 800b44c <__swbuf_r+0x84>
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	1ac0      	subs	r0, r0, r3
 800b3f6:	6963      	ldr	r3, [r4, #20]
 800b3f8:	b2f6      	uxtb	r6, r6
 800b3fa:	4283      	cmp	r3, r0
 800b3fc:	4637      	mov	r7, r6
 800b3fe:	dc04      	bgt.n	800b40a <__swbuf_r+0x42>
 800b400:	4621      	mov	r1, r4
 800b402:	4628      	mov	r0, r5
 800b404:	f000 f92e 	bl	800b664 <_fflush_r>
 800b408:	bb30      	cbnz	r0, 800b458 <__swbuf_r+0x90>
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	3b01      	subs	r3, #1
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	6022      	str	r2, [r4, #0]
 800b416:	701e      	strb	r6, [r3, #0]
 800b418:	6963      	ldr	r3, [r4, #20]
 800b41a:	3001      	adds	r0, #1
 800b41c:	4283      	cmp	r3, r0
 800b41e:	d004      	beq.n	800b42a <__swbuf_r+0x62>
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	07db      	lsls	r3, r3, #31
 800b424:	d506      	bpl.n	800b434 <__swbuf_r+0x6c>
 800b426:	2e0a      	cmp	r6, #10
 800b428:	d104      	bne.n	800b434 <__swbuf_r+0x6c>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f919 	bl	800b664 <_fflush_r>
 800b432:	b988      	cbnz	r0, 800b458 <__swbuf_r+0x90>
 800b434:	4638      	mov	r0, r7
 800b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b438:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <__swbuf_r+0x9c>)
 800b43a:	429c      	cmp	r4, r3
 800b43c:	d101      	bne.n	800b442 <__swbuf_r+0x7a>
 800b43e:	68ac      	ldr	r4, [r5, #8]
 800b440:	e7cf      	b.n	800b3e2 <__swbuf_r+0x1a>
 800b442:	4b09      	ldr	r3, [pc, #36]	; (800b468 <__swbuf_r+0xa0>)
 800b444:	429c      	cmp	r4, r3
 800b446:	bf08      	it	eq
 800b448:	68ec      	ldreq	r4, [r5, #12]
 800b44a:	e7ca      	b.n	800b3e2 <__swbuf_r+0x1a>
 800b44c:	4621      	mov	r1, r4
 800b44e:	4628      	mov	r0, r5
 800b450:	f000 f80c 	bl	800b46c <__swsetup_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	d0cb      	beq.n	800b3f0 <__swbuf_r+0x28>
 800b458:	f04f 37ff 	mov.w	r7, #4294967295
 800b45c:	e7ea      	b.n	800b434 <__swbuf_r+0x6c>
 800b45e:	bf00      	nop
 800b460:	0800bea0 	.word	0x0800bea0
 800b464:	0800bec0 	.word	0x0800bec0
 800b468:	0800be80 	.word	0x0800be80

0800b46c <__swsetup_r>:
 800b46c:	4b32      	ldr	r3, [pc, #200]	; (800b538 <__swsetup_r+0xcc>)
 800b46e:	b570      	push	{r4, r5, r6, lr}
 800b470:	681d      	ldr	r5, [r3, #0]
 800b472:	4606      	mov	r6, r0
 800b474:	460c      	mov	r4, r1
 800b476:	b125      	cbz	r5, 800b482 <__swsetup_r+0x16>
 800b478:	69ab      	ldr	r3, [r5, #24]
 800b47a:	b913      	cbnz	r3, 800b482 <__swsetup_r+0x16>
 800b47c:	4628      	mov	r0, r5
 800b47e:	f000 f985 	bl	800b78c <__sinit>
 800b482:	4b2e      	ldr	r3, [pc, #184]	; (800b53c <__swsetup_r+0xd0>)
 800b484:	429c      	cmp	r4, r3
 800b486:	d10f      	bne.n	800b4a8 <__swsetup_r+0x3c>
 800b488:	686c      	ldr	r4, [r5, #4]
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b490:	0719      	lsls	r1, r3, #28
 800b492:	d42c      	bmi.n	800b4ee <__swsetup_r+0x82>
 800b494:	06dd      	lsls	r5, r3, #27
 800b496:	d411      	bmi.n	800b4bc <__swsetup_r+0x50>
 800b498:	2309      	movs	r3, #9
 800b49a:	6033      	str	r3, [r6, #0]
 800b49c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	e03e      	b.n	800b526 <__swsetup_r+0xba>
 800b4a8:	4b25      	ldr	r3, [pc, #148]	; (800b540 <__swsetup_r+0xd4>)
 800b4aa:	429c      	cmp	r4, r3
 800b4ac:	d101      	bne.n	800b4b2 <__swsetup_r+0x46>
 800b4ae:	68ac      	ldr	r4, [r5, #8]
 800b4b0:	e7eb      	b.n	800b48a <__swsetup_r+0x1e>
 800b4b2:	4b24      	ldr	r3, [pc, #144]	; (800b544 <__swsetup_r+0xd8>)
 800b4b4:	429c      	cmp	r4, r3
 800b4b6:	bf08      	it	eq
 800b4b8:	68ec      	ldreq	r4, [r5, #12]
 800b4ba:	e7e6      	b.n	800b48a <__swsetup_r+0x1e>
 800b4bc:	0758      	lsls	r0, r3, #29
 800b4be:	d512      	bpl.n	800b4e6 <__swsetup_r+0x7a>
 800b4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4c2:	b141      	cbz	r1, 800b4d6 <__swsetup_r+0x6a>
 800b4c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4c8:	4299      	cmp	r1, r3
 800b4ca:	d002      	beq.n	800b4d2 <__swsetup_r+0x66>
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f7ff fc41 	bl	800ad54 <_free_r>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	6063      	str	r3, [r4, #4]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	6023      	str	r3, [r4, #0]
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	f043 0308 	orr.w	r3, r3, #8
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	6923      	ldr	r3, [r4, #16]
 800b4f0:	b94b      	cbnz	r3, 800b506 <__swsetup_r+0x9a>
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4fc:	d003      	beq.n	800b506 <__swsetup_r+0x9a>
 800b4fe:	4621      	mov	r1, r4
 800b500:	4630      	mov	r0, r6
 800b502:	f000 fa09 	bl	800b918 <__smakebuf_r>
 800b506:	89a0      	ldrh	r0, [r4, #12]
 800b508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b50c:	f010 0301 	ands.w	r3, r0, #1
 800b510:	d00a      	beq.n	800b528 <__swsetup_r+0xbc>
 800b512:	2300      	movs	r3, #0
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	6963      	ldr	r3, [r4, #20]
 800b518:	425b      	negs	r3, r3
 800b51a:	61a3      	str	r3, [r4, #24]
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	b943      	cbnz	r3, 800b532 <__swsetup_r+0xc6>
 800b520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b524:	d1ba      	bne.n	800b49c <__swsetup_r+0x30>
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	0781      	lsls	r1, r0, #30
 800b52a:	bf58      	it	pl
 800b52c:	6963      	ldrpl	r3, [r4, #20]
 800b52e:	60a3      	str	r3, [r4, #8]
 800b530:	e7f4      	b.n	800b51c <__swsetup_r+0xb0>
 800b532:	2000      	movs	r0, #0
 800b534:	e7f7      	b.n	800b526 <__swsetup_r+0xba>
 800b536:	bf00      	nop
 800b538:	20000100 	.word	0x20000100
 800b53c:	0800bea0 	.word	0x0800bea0
 800b540:	0800bec0 	.word	0x0800bec0
 800b544:	0800be80 	.word	0x0800be80

0800b548 <abort>:
 800b548:	b508      	push	{r3, lr}
 800b54a:	2006      	movs	r0, #6
 800b54c:	f000 fa4c 	bl	800b9e8 <raise>
 800b550:	2001      	movs	r0, #1
 800b552:	f7f6 f913 	bl	800177c <_exit>
	...

0800b558 <__sflush_r>:
 800b558:	898a      	ldrh	r2, [r1, #12]
 800b55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55e:	4605      	mov	r5, r0
 800b560:	0710      	lsls	r0, r2, #28
 800b562:	460c      	mov	r4, r1
 800b564:	d458      	bmi.n	800b618 <__sflush_r+0xc0>
 800b566:	684b      	ldr	r3, [r1, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dc05      	bgt.n	800b578 <__sflush_r+0x20>
 800b56c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b56e:	2b00      	cmp	r3, #0
 800b570:	dc02      	bgt.n	800b578 <__sflush_r+0x20>
 800b572:	2000      	movs	r0, #0
 800b574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	d0f9      	beq.n	800b572 <__sflush_r+0x1a>
 800b57e:	2300      	movs	r3, #0
 800b580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b584:	682f      	ldr	r7, [r5, #0]
 800b586:	602b      	str	r3, [r5, #0]
 800b588:	d032      	beq.n	800b5f0 <__sflush_r+0x98>
 800b58a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	075a      	lsls	r2, r3, #29
 800b590:	d505      	bpl.n	800b59e <__sflush_r+0x46>
 800b592:	6863      	ldr	r3, [r4, #4]
 800b594:	1ac0      	subs	r0, r0, r3
 800b596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b598:	b10b      	cbz	r3, 800b59e <__sflush_r+0x46>
 800b59a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b59c:	1ac0      	subs	r0, r0, r3
 800b59e:	2300      	movs	r3, #0
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5a4:	6a21      	ldr	r1, [r4, #32]
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b0      	blx	r6
 800b5aa:	1c43      	adds	r3, r0, #1
 800b5ac:	89a3      	ldrh	r3, [r4, #12]
 800b5ae:	d106      	bne.n	800b5be <__sflush_r+0x66>
 800b5b0:	6829      	ldr	r1, [r5, #0]
 800b5b2:	291d      	cmp	r1, #29
 800b5b4:	d82c      	bhi.n	800b610 <__sflush_r+0xb8>
 800b5b6:	4a2a      	ldr	r2, [pc, #168]	; (800b660 <__sflush_r+0x108>)
 800b5b8:	40ca      	lsrs	r2, r1
 800b5ba:	07d6      	lsls	r6, r2, #31
 800b5bc:	d528      	bpl.n	800b610 <__sflush_r+0xb8>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	6062      	str	r2, [r4, #4]
 800b5c2:	04d9      	lsls	r1, r3, #19
 800b5c4:	6922      	ldr	r2, [r4, #16]
 800b5c6:	6022      	str	r2, [r4, #0]
 800b5c8:	d504      	bpl.n	800b5d4 <__sflush_r+0x7c>
 800b5ca:	1c42      	adds	r2, r0, #1
 800b5cc:	d101      	bne.n	800b5d2 <__sflush_r+0x7a>
 800b5ce:	682b      	ldr	r3, [r5, #0]
 800b5d0:	b903      	cbnz	r3, 800b5d4 <__sflush_r+0x7c>
 800b5d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5d6:	602f      	str	r7, [r5, #0]
 800b5d8:	2900      	cmp	r1, #0
 800b5da:	d0ca      	beq.n	800b572 <__sflush_r+0x1a>
 800b5dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	d002      	beq.n	800b5ea <__sflush_r+0x92>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f7ff fbb5 	bl	800ad54 <_free_r>
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ee:	e7c1      	b.n	800b574 <__sflush_r+0x1c>
 800b5f0:	6a21      	ldr	r1, [r4, #32]
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	47b0      	blx	r6
 800b5f8:	1c41      	adds	r1, r0, #1
 800b5fa:	d1c7      	bne.n	800b58c <__sflush_r+0x34>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0c4      	beq.n	800b58c <__sflush_r+0x34>
 800b602:	2b1d      	cmp	r3, #29
 800b604:	d001      	beq.n	800b60a <__sflush_r+0xb2>
 800b606:	2b16      	cmp	r3, #22
 800b608:	d101      	bne.n	800b60e <__sflush_r+0xb6>
 800b60a:	602f      	str	r7, [r5, #0]
 800b60c:	e7b1      	b.n	800b572 <__sflush_r+0x1a>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b614:	81a3      	strh	r3, [r4, #12]
 800b616:	e7ad      	b.n	800b574 <__sflush_r+0x1c>
 800b618:	690f      	ldr	r7, [r1, #16]
 800b61a:	2f00      	cmp	r7, #0
 800b61c:	d0a9      	beq.n	800b572 <__sflush_r+0x1a>
 800b61e:	0793      	lsls	r3, r2, #30
 800b620:	680e      	ldr	r6, [r1, #0]
 800b622:	bf08      	it	eq
 800b624:	694b      	ldreq	r3, [r1, #20]
 800b626:	600f      	str	r7, [r1, #0]
 800b628:	bf18      	it	ne
 800b62a:	2300      	movne	r3, #0
 800b62c:	eba6 0807 	sub.w	r8, r6, r7
 800b630:	608b      	str	r3, [r1, #8]
 800b632:	f1b8 0f00 	cmp.w	r8, #0
 800b636:	dd9c      	ble.n	800b572 <__sflush_r+0x1a>
 800b638:	6a21      	ldr	r1, [r4, #32]
 800b63a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b63c:	4643      	mov	r3, r8
 800b63e:	463a      	mov	r2, r7
 800b640:	4628      	mov	r0, r5
 800b642:	47b0      	blx	r6
 800b644:	2800      	cmp	r0, #0
 800b646:	dc06      	bgt.n	800b656 <__sflush_r+0xfe>
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	f04f 30ff 	mov.w	r0, #4294967295
 800b654:	e78e      	b.n	800b574 <__sflush_r+0x1c>
 800b656:	4407      	add	r7, r0
 800b658:	eba8 0800 	sub.w	r8, r8, r0
 800b65c:	e7e9      	b.n	800b632 <__sflush_r+0xda>
 800b65e:	bf00      	nop
 800b660:	20400001 	.word	0x20400001

0800b664 <_fflush_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	690b      	ldr	r3, [r1, #16]
 800b668:	4605      	mov	r5, r0
 800b66a:	460c      	mov	r4, r1
 800b66c:	b913      	cbnz	r3, 800b674 <_fflush_r+0x10>
 800b66e:	2500      	movs	r5, #0
 800b670:	4628      	mov	r0, r5
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	b118      	cbz	r0, 800b67e <_fflush_r+0x1a>
 800b676:	6983      	ldr	r3, [r0, #24]
 800b678:	b90b      	cbnz	r3, 800b67e <_fflush_r+0x1a>
 800b67a:	f000 f887 	bl	800b78c <__sinit>
 800b67e:	4b14      	ldr	r3, [pc, #80]	; (800b6d0 <_fflush_r+0x6c>)
 800b680:	429c      	cmp	r4, r3
 800b682:	d11b      	bne.n	800b6bc <_fflush_r+0x58>
 800b684:	686c      	ldr	r4, [r5, #4]
 800b686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d0ef      	beq.n	800b66e <_fflush_r+0xa>
 800b68e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b690:	07d0      	lsls	r0, r2, #31
 800b692:	d404      	bmi.n	800b69e <_fflush_r+0x3a>
 800b694:	0599      	lsls	r1, r3, #22
 800b696:	d402      	bmi.n	800b69e <_fflush_r+0x3a>
 800b698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b69a:	f000 f915 	bl	800b8c8 <__retarget_lock_acquire_recursive>
 800b69e:	4628      	mov	r0, r5
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	f7ff ff59 	bl	800b558 <__sflush_r>
 800b6a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6a8:	07da      	lsls	r2, r3, #31
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	d4e0      	bmi.n	800b670 <_fflush_r+0xc>
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	059b      	lsls	r3, r3, #22
 800b6b2:	d4dd      	bmi.n	800b670 <_fflush_r+0xc>
 800b6b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6b6:	f000 f908 	bl	800b8ca <__retarget_lock_release_recursive>
 800b6ba:	e7d9      	b.n	800b670 <_fflush_r+0xc>
 800b6bc:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <_fflush_r+0x70>)
 800b6be:	429c      	cmp	r4, r3
 800b6c0:	d101      	bne.n	800b6c6 <_fflush_r+0x62>
 800b6c2:	68ac      	ldr	r4, [r5, #8]
 800b6c4:	e7df      	b.n	800b686 <_fflush_r+0x22>
 800b6c6:	4b04      	ldr	r3, [pc, #16]	; (800b6d8 <_fflush_r+0x74>)
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	bf08      	it	eq
 800b6cc:	68ec      	ldreq	r4, [r5, #12]
 800b6ce:	e7da      	b.n	800b686 <_fflush_r+0x22>
 800b6d0:	0800bea0 	.word	0x0800bea0
 800b6d4:	0800bec0 	.word	0x0800bec0
 800b6d8:	0800be80 	.word	0x0800be80

0800b6dc <std>:
 800b6dc:	2300      	movs	r3, #0
 800b6de:	b510      	push	{r4, lr}
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	e9c0 3300 	strd	r3, r3, [r0]
 800b6e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6ea:	6083      	str	r3, [r0, #8]
 800b6ec:	8181      	strh	r1, [r0, #12]
 800b6ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b6f0:	81c2      	strh	r2, [r0, #14]
 800b6f2:	6183      	str	r3, [r0, #24]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	2208      	movs	r2, #8
 800b6f8:	305c      	adds	r0, #92	; 0x5c
 800b6fa:	f7fd feb7 	bl	800946c <memset>
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <std+0x38>)
 800b700:	6263      	str	r3, [r4, #36]	; 0x24
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <std+0x3c>)
 800b704:	62a3      	str	r3, [r4, #40]	; 0x28
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <std+0x40>)
 800b708:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <std+0x44>)
 800b70c:	6224      	str	r4, [r4, #32]
 800b70e:	6323      	str	r3, [r4, #48]	; 0x30
 800b710:	bd10      	pop	{r4, pc}
 800b712:	bf00      	nop
 800b714:	0800ba21 	.word	0x0800ba21
 800b718:	0800ba43 	.word	0x0800ba43
 800b71c:	0800ba7b 	.word	0x0800ba7b
 800b720:	0800ba9f 	.word	0x0800ba9f

0800b724 <_cleanup_r>:
 800b724:	4901      	ldr	r1, [pc, #4]	; (800b72c <_cleanup_r+0x8>)
 800b726:	f000 b8af 	b.w	800b888 <_fwalk_reent>
 800b72a:	bf00      	nop
 800b72c:	0800b665 	.word	0x0800b665

0800b730 <__sfmoreglue>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	2268      	movs	r2, #104	; 0x68
 800b734:	1e4d      	subs	r5, r1, #1
 800b736:	4355      	muls	r5, r2
 800b738:	460e      	mov	r6, r1
 800b73a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b73e:	f7fe fbaf 	bl	8009ea0 <_malloc_r>
 800b742:	4604      	mov	r4, r0
 800b744:	b140      	cbz	r0, 800b758 <__sfmoreglue+0x28>
 800b746:	2100      	movs	r1, #0
 800b748:	e9c0 1600 	strd	r1, r6, [r0]
 800b74c:	300c      	adds	r0, #12
 800b74e:	60a0      	str	r0, [r4, #8]
 800b750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b754:	f7fd fe8a 	bl	800946c <memset>
 800b758:	4620      	mov	r0, r4
 800b75a:	bd70      	pop	{r4, r5, r6, pc}

0800b75c <__sfp_lock_acquire>:
 800b75c:	4801      	ldr	r0, [pc, #4]	; (800b764 <__sfp_lock_acquire+0x8>)
 800b75e:	f000 b8b3 	b.w	800b8c8 <__retarget_lock_acquire_recursive>
 800b762:	bf00      	nop
 800b764:	20001749 	.word	0x20001749

0800b768 <__sfp_lock_release>:
 800b768:	4801      	ldr	r0, [pc, #4]	; (800b770 <__sfp_lock_release+0x8>)
 800b76a:	f000 b8ae 	b.w	800b8ca <__retarget_lock_release_recursive>
 800b76e:	bf00      	nop
 800b770:	20001749 	.word	0x20001749

0800b774 <__sinit_lock_acquire>:
 800b774:	4801      	ldr	r0, [pc, #4]	; (800b77c <__sinit_lock_acquire+0x8>)
 800b776:	f000 b8a7 	b.w	800b8c8 <__retarget_lock_acquire_recursive>
 800b77a:	bf00      	nop
 800b77c:	2000174a 	.word	0x2000174a

0800b780 <__sinit_lock_release>:
 800b780:	4801      	ldr	r0, [pc, #4]	; (800b788 <__sinit_lock_release+0x8>)
 800b782:	f000 b8a2 	b.w	800b8ca <__retarget_lock_release_recursive>
 800b786:	bf00      	nop
 800b788:	2000174a 	.word	0x2000174a

0800b78c <__sinit>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	4604      	mov	r4, r0
 800b790:	f7ff fff0 	bl	800b774 <__sinit_lock_acquire>
 800b794:	69a3      	ldr	r3, [r4, #24]
 800b796:	b11b      	cbz	r3, 800b7a0 <__sinit+0x14>
 800b798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b79c:	f7ff bff0 	b.w	800b780 <__sinit_lock_release>
 800b7a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b7a6:	4b13      	ldr	r3, [pc, #76]	; (800b7f4 <__sinit+0x68>)
 800b7a8:	4a13      	ldr	r2, [pc, #76]	; (800b7f8 <__sinit+0x6c>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7ae:	42a3      	cmp	r3, r4
 800b7b0:	bf04      	itt	eq
 800b7b2:	2301      	moveq	r3, #1
 800b7b4:	61a3      	streq	r3, [r4, #24]
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f820 	bl	800b7fc <__sfp>
 800b7bc:	6060      	str	r0, [r4, #4]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 f81c 	bl	800b7fc <__sfp>
 800b7c4:	60a0      	str	r0, [r4, #8]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 f818 	bl	800b7fc <__sfp>
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	60e0      	str	r0, [r4, #12]
 800b7d0:	2104      	movs	r1, #4
 800b7d2:	6860      	ldr	r0, [r4, #4]
 800b7d4:	f7ff ff82 	bl	800b6dc <std>
 800b7d8:	68a0      	ldr	r0, [r4, #8]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	2109      	movs	r1, #9
 800b7de:	f7ff ff7d 	bl	800b6dc <std>
 800b7e2:	68e0      	ldr	r0, [r4, #12]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	2112      	movs	r1, #18
 800b7e8:	f7ff ff78 	bl	800b6dc <std>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	61a3      	str	r3, [r4, #24]
 800b7f0:	e7d2      	b.n	800b798 <__sinit+0xc>
 800b7f2:	bf00      	nop
 800b7f4:	0800bc20 	.word	0x0800bc20
 800b7f8:	0800b725 	.word	0x0800b725

0800b7fc <__sfp>:
 800b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fe:	4607      	mov	r7, r0
 800b800:	f7ff ffac 	bl	800b75c <__sfp_lock_acquire>
 800b804:	4b1e      	ldr	r3, [pc, #120]	; (800b880 <__sfp+0x84>)
 800b806:	681e      	ldr	r6, [r3, #0]
 800b808:	69b3      	ldr	r3, [r6, #24]
 800b80a:	b913      	cbnz	r3, 800b812 <__sfp+0x16>
 800b80c:	4630      	mov	r0, r6
 800b80e:	f7ff ffbd 	bl	800b78c <__sinit>
 800b812:	3648      	adds	r6, #72	; 0x48
 800b814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b818:	3b01      	subs	r3, #1
 800b81a:	d503      	bpl.n	800b824 <__sfp+0x28>
 800b81c:	6833      	ldr	r3, [r6, #0]
 800b81e:	b30b      	cbz	r3, 800b864 <__sfp+0x68>
 800b820:	6836      	ldr	r6, [r6, #0]
 800b822:	e7f7      	b.n	800b814 <__sfp+0x18>
 800b824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b828:	b9d5      	cbnz	r5, 800b860 <__sfp+0x64>
 800b82a:	4b16      	ldr	r3, [pc, #88]	; (800b884 <__sfp+0x88>)
 800b82c:	60e3      	str	r3, [r4, #12]
 800b82e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b832:	6665      	str	r5, [r4, #100]	; 0x64
 800b834:	f000 f847 	bl	800b8c6 <__retarget_lock_init_recursive>
 800b838:	f7ff ff96 	bl	800b768 <__sfp_lock_release>
 800b83c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b844:	6025      	str	r5, [r4, #0]
 800b846:	61a5      	str	r5, [r4, #24]
 800b848:	2208      	movs	r2, #8
 800b84a:	4629      	mov	r1, r5
 800b84c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b850:	f7fd fe0c 	bl	800946c <memset>
 800b854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b85c:	4620      	mov	r0, r4
 800b85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b860:	3468      	adds	r4, #104	; 0x68
 800b862:	e7d9      	b.n	800b818 <__sfp+0x1c>
 800b864:	2104      	movs	r1, #4
 800b866:	4638      	mov	r0, r7
 800b868:	f7ff ff62 	bl	800b730 <__sfmoreglue>
 800b86c:	4604      	mov	r4, r0
 800b86e:	6030      	str	r0, [r6, #0]
 800b870:	2800      	cmp	r0, #0
 800b872:	d1d5      	bne.n	800b820 <__sfp+0x24>
 800b874:	f7ff ff78 	bl	800b768 <__sfp_lock_release>
 800b878:	230c      	movs	r3, #12
 800b87a:	603b      	str	r3, [r7, #0]
 800b87c:	e7ee      	b.n	800b85c <__sfp+0x60>
 800b87e:	bf00      	nop
 800b880:	0800bc20 	.word	0x0800bc20
 800b884:	ffff0001 	.word	0xffff0001

0800b888 <_fwalk_reent>:
 800b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b88c:	4606      	mov	r6, r0
 800b88e:	4688      	mov	r8, r1
 800b890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b894:	2700      	movs	r7, #0
 800b896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b89a:	f1b9 0901 	subs.w	r9, r9, #1
 800b89e:	d505      	bpl.n	800b8ac <_fwalk_reent+0x24>
 800b8a0:	6824      	ldr	r4, [r4, #0]
 800b8a2:	2c00      	cmp	r4, #0
 800b8a4:	d1f7      	bne.n	800b896 <_fwalk_reent+0xe>
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ac:	89ab      	ldrh	r3, [r5, #12]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d907      	bls.n	800b8c2 <_fwalk_reent+0x3a>
 800b8b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	d003      	beq.n	800b8c2 <_fwalk_reent+0x3a>
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	4630      	mov	r0, r6
 800b8be:	47c0      	blx	r8
 800b8c0:	4307      	orrs	r7, r0
 800b8c2:	3568      	adds	r5, #104	; 0x68
 800b8c4:	e7e9      	b.n	800b89a <_fwalk_reent+0x12>

0800b8c6 <__retarget_lock_init_recursive>:
 800b8c6:	4770      	bx	lr

0800b8c8 <__retarget_lock_acquire_recursive>:
 800b8c8:	4770      	bx	lr

0800b8ca <__retarget_lock_release_recursive>:
 800b8ca:	4770      	bx	lr

0800b8cc <__swhatbuf_r>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	460e      	mov	r6, r1
 800b8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	b096      	sub	sp, #88	; 0x58
 800b8d8:	4614      	mov	r4, r2
 800b8da:	461d      	mov	r5, r3
 800b8dc:	da08      	bge.n	800b8f0 <__swhatbuf_r+0x24>
 800b8de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	602a      	str	r2, [r5, #0]
 800b8e6:	061a      	lsls	r2, r3, #24
 800b8e8:	d410      	bmi.n	800b90c <__swhatbuf_r+0x40>
 800b8ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ee:	e00e      	b.n	800b90e <__swhatbuf_r+0x42>
 800b8f0:	466a      	mov	r2, sp
 800b8f2:	f000 f8fb 	bl	800baec <_fstat_r>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	dbf1      	blt.n	800b8de <__swhatbuf_r+0x12>
 800b8fa:	9a01      	ldr	r2, [sp, #4]
 800b8fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b900:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b904:	425a      	negs	r2, r3
 800b906:	415a      	adcs	r2, r3
 800b908:	602a      	str	r2, [r5, #0]
 800b90a:	e7ee      	b.n	800b8ea <__swhatbuf_r+0x1e>
 800b90c:	2340      	movs	r3, #64	; 0x40
 800b90e:	2000      	movs	r0, #0
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	b016      	add	sp, #88	; 0x58
 800b914:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b918 <__smakebuf_r>:
 800b918:	898b      	ldrh	r3, [r1, #12]
 800b91a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b91c:	079d      	lsls	r5, r3, #30
 800b91e:	4606      	mov	r6, r0
 800b920:	460c      	mov	r4, r1
 800b922:	d507      	bpl.n	800b934 <__smakebuf_r+0x1c>
 800b924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	6123      	str	r3, [r4, #16]
 800b92c:	2301      	movs	r3, #1
 800b92e:	6163      	str	r3, [r4, #20]
 800b930:	b002      	add	sp, #8
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	ab01      	add	r3, sp, #4
 800b936:	466a      	mov	r2, sp
 800b938:	f7ff ffc8 	bl	800b8cc <__swhatbuf_r>
 800b93c:	9900      	ldr	r1, [sp, #0]
 800b93e:	4605      	mov	r5, r0
 800b940:	4630      	mov	r0, r6
 800b942:	f7fe faad 	bl	8009ea0 <_malloc_r>
 800b946:	b948      	cbnz	r0, 800b95c <__smakebuf_r+0x44>
 800b948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b94c:	059a      	lsls	r2, r3, #22
 800b94e:	d4ef      	bmi.n	800b930 <__smakebuf_r+0x18>
 800b950:	f023 0303 	bic.w	r3, r3, #3
 800b954:	f043 0302 	orr.w	r3, r3, #2
 800b958:	81a3      	strh	r3, [r4, #12]
 800b95a:	e7e3      	b.n	800b924 <__smakebuf_r+0xc>
 800b95c:	4b0d      	ldr	r3, [pc, #52]	; (800b994 <__smakebuf_r+0x7c>)
 800b95e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	6020      	str	r0, [r4, #0]
 800b964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	9b00      	ldr	r3, [sp, #0]
 800b96c:	6163      	str	r3, [r4, #20]
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	6120      	str	r0, [r4, #16]
 800b972:	b15b      	cbz	r3, 800b98c <__smakebuf_r+0x74>
 800b974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b978:	4630      	mov	r0, r6
 800b97a:	f000 f8c9 	bl	800bb10 <_isatty_r>
 800b97e:	b128      	cbz	r0, 800b98c <__smakebuf_r+0x74>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	89a0      	ldrh	r0, [r4, #12]
 800b98e:	4305      	orrs	r5, r0
 800b990:	81a5      	strh	r5, [r4, #12]
 800b992:	e7cd      	b.n	800b930 <__smakebuf_r+0x18>
 800b994:	0800b725 	.word	0x0800b725

0800b998 <_raise_r>:
 800b998:	291f      	cmp	r1, #31
 800b99a:	b538      	push	{r3, r4, r5, lr}
 800b99c:	4604      	mov	r4, r0
 800b99e:	460d      	mov	r5, r1
 800b9a0:	d904      	bls.n	800b9ac <_raise_r+0x14>
 800b9a2:	2316      	movs	r3, #22
 800b9a4:	6003      	str	r3, [r0, #0]
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9ae:	b112      	cbz	r2, 800b9b6 <_raise_r+0x1e>
 800b9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9b4:	b94b      	cbnz	r3, 800b9ca <_raise_r+0x32>
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 f830 	bl	800ba1c <_getpid_r>
 800b9bc:	462a      	mov	r2, r5
 800b9be:	4601      	mov	r1, r0
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c6:	f000 b817 	b.w	800b9f8 <_kill_r>
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d00a      	beq.n	800b9e4 <_raise_r+0x4c>
 800b9ce:	1c59      	adds	r1, r3, #1
 800b9d0:	d103      	bne.n	800b9da <_raise_r+0x42>
 800b9d2:	2316      	movs	r3, #22
 800b9d4:	6003      	str	r3, [r0, #0]
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	e7e7      	b.n	800b9aa <_raise_r+0x12>
 800b9da:	2400      	movs	r4, #0
 800b9dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	4798      	blx	r3
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	e7e0      	b.n	800b9aa <_raise_r+0x12>

0800b9e8 <raise>:
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <raise+0xc>)
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	f7ff bfd3 	b.w	800b998 <_raise_r>
 800b9f2:	bf00      	nop
 800b9f4:	20000100 	.word	0x20000100

0800b9f8 <_kill_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	; (800ba18 <_kill_r+0x20>)
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4604      	mov	r4, r0
 800ba00:	4608      	mov	r0, r1
 800ba02:	4611      	mov	r1, r2
 800ba04:	602b      	str	r3, [r5, #0]
 800ba06:	f7f5 fea9 	bl	800175c <_kill>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	d102      	bne.n	800ba14 <_kill_r+0x1c>
 800ba0e:	682b      	ldr	r3, [r5, #0]
 800ba10:	b103      	cbz	r3, 800ba14 <_kill_r+0x1c>
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	bd38      	pop	{r3, r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	20001744 	.word	0x20001744

0800ba1c <_getpid_r>:
 800ba1c:	f7f5 be96 	b.w	800174c <_getpid>

0800ba20 <__sread>:
 800ba20:	b510      	push	{r4, lr}
 800ba22:	460c      	mov	r4, r1
 800ba24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba28:	f000 f894 	bl	800bb54 <_read_r>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	bfab      	itete	ge
 800ba30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba32:	89a3      	ldrhlt	r3, [r4, #12]
 800ba34:	181b      	addge	r3, r3, r0
 800ba36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba3a:	bfac      	ite	ge
 800ba3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba3e:	81a3      	strhlt	r3, [r4, #12]
 800ba40:	bd10      	pop	{r4, pc}

0800ba42 <__swrite>:
 800ba42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba46:	461f      	mov	r7, r3
 800ba48:	898b      	ldrh	r3, [r1, #12]
 800ba4a:	05db      	lsls	r3, r3, #23
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	460c      	mov	r4, r1
 800ba50:	4616      	mov	r6, r2
 800ba52:	d505      	bpl.n	800ba60 <__swrite+0x1e>
 800ba54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba58:	2302      	movs	r3, #2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f000 f868 	bl	800bb30 <_lseek_r>
 800ba60:	89a3      	ldrh	r3, [r4, #12]
 800ba62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba6a:	81a3      	strh	r3, [r4, #12]
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	463b      	mov	r3, r7
 800ba70:	4628      	mov	r0, r5
 800ba72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba76:	f000 b817 	b.w	800baa8 <_write_r>

0800ba7a <__sseek>:
 800ba7a:	b510      	push	{r4, lr}
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba82:	f000 f855 	bl	800bb30 <_lseek_r>
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	bf15      	itete	ne
 800ba8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba96:	81a3      	strheq	r3, [r4, #12]
 800ba98:	bf18      	it	ne
 800ba9a:	81a3      	strhne	r3, [r4, #12]
 800ba9c:	bd10      	pop	{r4, pc}

0800ba9e <__sclose>:
 800ba9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa2:	f000 b813 	b.w	800bacc <_close_r>
	...

0800baa8 <_write_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d07      	ldr	r5, [pc, #28]	; (800bac8 <_write_r+0x20>)
 800baac:	4604      	mov	r4, r0
 800baae:	4608      	mov	r0, r1
 800bab0:	4611      	mov	r1, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	602a      	str	r2, [r5, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	f7f5 fe87 	bl	80017ca <_write>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_write_r+0x1e>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_write_r+0x1e>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	20001744 	.word	0x20001744

0800bacc <_close_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d06      	ldr	r5, [pc, #24]	; (800bae8 <_close_r+0x1c>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	f7f5 fe93 	bl	8001802 <_close>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_close_r+0x1a>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_close_r+0x1a>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	20001744 	.word	0x20001744

0800baec <_fstat_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	; (800bb0c <_fstat_r+0x20>)
 800baf0:	2300      	movs	r3, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	f7f5 fe8e 	bl	800181a <_fstat>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d102      	bne.n	800bb08 <_fstat_r+0x1c>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b103      	cbz	r3, 800bb08 <_fstat_r+0x1c>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20001744 	.word	0x20001744

0800bb10 <_isatty_r>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	4d06      	ldr	r5, [pc, #24]	; (800bb2c <_isatty_r+0x1c>)
 800bb14:	2300      	movs	r3, #0
 800bb16:	4604      	mov	r4, r0
 800bb18:	4608      	mov	r0, r1
 800bb1a:	602b      	str	r3, [r5, #0]
 800bb1c:	f7f5 fe8d 	bl	800183a <_isatty>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_isatty_r+0x1a>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_isatty_r+0x1a>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	20001744 	.word	0x20001744

0800bb30 <_lseek_r>:
 800bb30:	b538      	push	{r3, r4, r5, lr}
 800bb32:	4d07      	ldr	r5, [pc, #28]	; (800bb50 <_lseek_r+0x20>)
 800bb34:	4604      	mov	r4, r0
 800bb36:	4608      	mov	r0, r1
 800bb38:	4611      	mov	r1, r2
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	602a      	str	r2, [r5, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f7f5 fe86 	bl	8001850 <_lseek>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_lseek_r+0x1e>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_lseek_r+0x1e>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	20001744 	.word	0x20001744

0800bb54 <_read_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_read_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f5 fe14 	bl	8001790 <_read>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_read_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_read_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20001744 	.word	0x20001744

0800bb78 <_init>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	bf00      	nop
 800bb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb7e:	bc08      	pop	{r3}
 800bb80:	469e      	mov	lr, r3
 800bb82:	4770      	bx	lr

0800bb84 <_fini>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	bf00      	nop
 800bb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8a:	bc08      	pop	{r3}
 800bb8c:	469e      	mov	lr, r3
 800bb8e:	4770      	bx	lr
